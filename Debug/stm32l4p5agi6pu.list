
stm32l4p5agi6pu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000883c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08008a00  08008a00  00018a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eec  08008eec  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ef4  08008ef4  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef4  08008ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08008efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000020c  08009108  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08009108  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013682  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002622  00000000  00000000  000338be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00035ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  00036f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cce9  00000000  00000000  00037f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001377c  00000000  00000000  00064c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111d5b  00000000  00000000  0007839d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018a0f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005684  00000000  00000000  0018a148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080089e4 	.word	0x080089e4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000210 	.word	0x20000210
 80001fc:	080089e4 	.word	0x080089e4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *F)
#endif

PUTCHAR_PROTOTYPE
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ee4:	1d39      	adds	r1, r7, #4
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <__io_putchar+0x20>)
 8000eee:	f003 fa75 	bl	80043dc <HAL_UART_Transmit>
	return ch;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000274 	.word	0x20000274

08000f00 <printf_usart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printf_usart(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	printf("length=%d\r\n",RxLine);
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <printf_usart+0x38>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <printf_usart+0x3c>)
 8000f0c:	f005 fc32 	bl	8006774 <iprintf>
	DataBuff[RxLine] = '\0';
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <printf_usart+0x38>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <printf_usart+0x40>)
 8000f16:	2100      	movs	r1, #0
 8000f18:	54d1      	strb	r1, [r2, r3]
		printf("Rxdata:%s\r\n",DataBuff);
 8000f1a:	4909      	ldr	r1, [pc, #36]	; (8000f40 <printf_usart+0x40>)
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <printf_usart+0x44>)
 8000f1e:	f005 fc29 	bl	8006774 <iprintf>
	memset(DataBuff,0,sizeof(DataBuff));  //清空缓存数组
 8000f22:	2264      	movs	r2, #100	; 0x64
 8000f24:	2100      	movs	r1, #0
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <printf_usart+0x40>)
 8000f28:	f004 ffb2 	bl	8005e90 <memset>
	//memset()作用：可以方便的清空一个结构类型的变量或数组。
	//例句：memset(aTxbuffer,0,sizeof(aTxbuffer))  用memset清空aTxbuffer。
	RxLine=0;  //清空接收长度
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <printf_usart+0x38>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000036c 	.word	0x2000036c
 8000f3c:	08008a00 	.word	0x08008a00
 8000f40:	20000308 	.word	0x20000308
 8000f44:	08008a0c 	.word	0x08008a0c

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f000 fc74 	bl	800183a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f869 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 f947 	bl	80011e8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000f5a:	f000 f8ab 	bl	80010b4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f5e:	f000 f8f7 	bl	8001150 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //key4x4_Init();
  //HAL_UART_Receive_IT(&huart2, RxBuff, 1);
  HAL_UART_Receive_IT(&huart2,  (uint8_t *)RxBuff, 1);
 8000f62:	2201      	movs	r2, #1
 8000f64:	4928      	ldr	r1, [pc, #160]	; (8001008 <main+0xc0>)
 8000f66:	4829      	ldr	r0, [pc, #164]	; (800100c <main+0xc4>)
 8000f68:	f003 face 	bl	8004508 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);//开启定时器
 8000f6c:	4828      	ldr	r0, [pc, #160]	; (8001010 <main+0xc8>)
 8000f6e:	f002 fd8b 	bl	8003a88 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static int passward=0;
	  int key=read_keypad();
 8000f72:	f004 fe71 	bl	8005c58 <read_keypad>
 8000f76:	6078      	str	r0, [r7, #4]
	  int use_key=key+1;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	603b      	str	r3, [r7, #0]
	  if(use_key!=0){
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f6      	beq.n	8000f72 <main+0x2a>
		  if(use_key==16){
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2b10      	cmp	r3, #16
 8000f88:	d103      	bne.n	8000f92 <main+0x4a>
			  printf("key board:\n"
 8000f8a:	4822      	ldr	r0, [pc, #136]	; (8001014 <main+0xcc>)
 8000f8c:	f005 fc78 	bl	8006880 <puts>
 8000f90:	e7ef      	b.n	8000f72 <main+0x2a>
					  "1  2  3  4\n"
					  "5  6  7  8\n"
					  "9  *  *  *\n"
					  "*  *  ok help\n");
		  }
		  else if(use_key==15){
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d125      	bne.n	8000fe4 <main+0x9c>
			  if(passward==1234){
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <main+0xd0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d118      	bne.n	8000fd6 <main+0x8e>
				  printf("open the door\n");
 8000fa4:	481d      	ldr	r0, [pc, #116]	; (800101c <main+0xd4>)
 8000fa6:	f005 fc6b 	bl	8006880 <puts>
				  //Forward();
				  passward=0;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <main+0xd0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
				  Forward_turn_step(4096/2);
 8000fb0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000fb4:	f004 ff1e 	bl	8005df4 <Forward_turn_step>
				  HAL_Delay(1000);
 8000fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbc:	f000 fcb2 	bl	8001924 <HAL_Delay>
				  StopMotor();
 8000fc0:	f004 ff0c 	bl	8005ddc <StopMotor>
				  // Reverse();
				  Reverse_turn_step(4096/2);
 8000fc4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000fc8:	f004 ff26 	bl	8005e18 <Reverse_turn_step>
				  HAL_Delay(1000);
 8000fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd0:	f000 fca8 	bl	8001924 <HAL_Delay>
 8000fd4:	e7cd      	b.n	8000f72 <main+0x2a>
				  //StopMotor();
			  }
			  else {
				  printf("your passward is error\n");
 8000fd6:	4812      	ldr	r0, [pc, #72]	; (8001020 <main+0xd8>)
 8000fd8:	f005 fc52 	bl	8006880 <puts>
				  passward=0;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <main+0xd0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e7c6      	b.n	8000f72 <main+0x2a>
			  }
		  }
		  else{
		  passward=(passward*10)+use_key;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <main+0xd0>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <main+0xd0>)
 8000ff8:	6013      	str	r3, [r2, #0]
		  //printf("put down key=%d\r\n",use_key);
		  printf("the passward you input is:%d\r\n",passward);
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <main+0xd0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <main+0xdc>)
 8001002:	f005 fbb7 	bl	8006774 <iprintf>
  {
 8001006:	e7b4      	b.n	8000f72 <main+0x2a>
 8001008:	20000304 	.word	0x20000304
 800100c:	20000274 	.word	0x20000274
 8001010:	20000228 	.word	0x20000228
 8001014:	08008a18 	.word	0x08008a18
 8001018:	20000374 	.word	0x20000374
 800101c:	08008a54 	.word	0x08008a54
 8001020:	08008a64 	.word	0x08008a64
 8001024:	08008a7c 	.word	0x08008a7c

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b098      	sub	sp, #96	; 0x60
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0318 	add.w	r3, r7, #24
 8001032:	2248      	movs	r2, #72	; 0x48
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f004 ff2a 	bl	8005e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800104a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800104e:	f000 ff81 	bl	8001f54 <HAL_PWREx_ControlVoltageScaling>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001058:	f000 fa0e 	bl	8001478 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800105c:	2310      	movs	r3, #16
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001068:	2360      	movs	r3, #96	; 0x60
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0318 	add.w	r3, r7, #24
 8001074:	4618      	mov	r0, r3
 8001076:	f001 f821 	bl	80020bc <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001080:	f000 f9fa 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fc89 	bl	80029b4 <HAL_RCC_ClockConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010a8:	f000 f9e6 	bl	8001478 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3760      	adds	r7, #96	; 0x60
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_TIM3_Init+0x94>)
 80010d4:	4a1d      	ldr	r2, [pc, #116]	; (800114c <MX_TIM3_Init+0x98>)
 80010d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_TIM3_Init+0x94>)
 80010da:	223f      	movs	r2, #63	; 0x3f
 80010dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_TIM3_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_TIM3_Init+0x94>)
 80010e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_TIM3_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_TIM3_Init+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010f8:	4813      	ldr	r0, [pc, #76]	; (8001148 <MX_TIM3_Init+0x94>)
 80010fa:	f002 fc6d 	bl	80039d8 <HAL_TIM_Base_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001104:	f000 f9b8 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <MX_TIM3_Init+0x94>)
 8001116:	f002 fe46 	bl	8003da6 <HAL_TIM_ConfigClockSource>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001120:	f000 f9aa 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_TIM3_Init+0x94>)
 8001132:	f003 f85d 	bl	80041f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800113c:	f000 f99c 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000228 	.word	0x20000228
 800114c:	40000400 	.word	0x40000400

08001150 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 8001156:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <MX_USART2_UART_Init+0x94>)
 8001158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001198:	4811      	ldr	r0, [pc, #68]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 800119a:	f003 f8cf 	bl	800433c <HAL_UART_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011a4:	f000 f968 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a8:	2100      	movs	r1, #0
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 80011ac:	f004 fc89 	bl	8005ac2 <HAL_UARTEx_SetTxFifoThreshold>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011b6:	f000 f95f 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 80011be:	f004 fcbe 	bl	8005b3e <HAL_UARTEx_SetRxFifoThreshold>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011c8:	f000 f956 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_USART2_UART_Init+0x90>)
 80011ce:	f004 fc3f 	bl	8005a50 <HAL_UARTEx_DisableFifoMode>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011d8:	f000 f94e 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000274 	.word	0x20000274
 80011e4:	40004400 	.word	0x40004400

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fe:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a6c      	ldr	r2, [pc, #432]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001216:	4b67      	ldr	r3, [pc, #412]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a66      	ldr	r2, [pc, #408]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 800121c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b64      	ldr	r3, [pc, #400]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697b      	ldr	r3, [r7, #20]
  HAL_PWREx_EnableVddIO2();
 800122e:	f000 ff35 	bl	800209c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b60      	ldr	r3, [pc, #384]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a5f      	ldr	r2, [pc, #380]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a59      	ldr	r2, [pc, #356]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b54      	ldr	r3, [pc, #336]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a53      	ldr	r2, [pc, #332]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b51      	ldr	r3, [pc, #324]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127a:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a4d      	ldr	r2, [pc, #308]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <MX_GPIO_Init+0x1cc>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f24e 0101 	movw	r1, #57345	; 0xe001
 8001298:	4847      	ldr	r0, [pc, #284]	; (80013b8 <MX_GPIO_Init+0x1d0>)
 800129a:	f000 fe23 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2102      	movs	r1, #2
 80012a2:	4845      	ldr	r0, [pc, #276]	; (80013b8 <MX_GPIO_Init+0x1d0>)
 80012a4:	f000 fe1e 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14|GPIO_PIN_13, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012ae:	4843      	ldr	r0, [pc, #268]	; (80013bc <MX_GPIO_Init+0x1d4>)
 80012b0:	f000 fe18 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80012ba:	4841      	ldr	r0, [pc, #260]	; (80013c0 <MX_GPIO_Init+0x1d8>)
 80012bc:	f000 fe12 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c6:	483f      	ldr	r0, [pc, #252]	; (80013c4 <MX_GPIO_Init+0x1dc>)
 80012c8:	f000 fe0c 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD0 PD15 PD14 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 80012cc:	f24e 0301 	movw	r3, #57345	; 0xe001
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012da:	2302      	movs	r3, #2
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4834      	ldr	r0, [pc, #208]	; (80013b8 <MX_GPIO_Init+0x1d0>)
 80012e6:	f000 fc53 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	482d      	ldr	r0, [pc, #180]	; (80013b8 <MX_GPIO_Init+0x1d0>)
 8001302:	f000 fc45 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001306:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4827      	ldr	r0, [pc, #156]	; (80013bc <MX_GPIO_Init+0x1d4>)
 8001320:	f000 fc36 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001324:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	4820      	ldr	r0, [pc, #128]	; (80013c0 <MX_GPIO_Init+0x1d8>)
 800133e:	f000 fc27 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001342:	2302      	movs	r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134a:	2301      	movs	r3, #1
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <MX_GPIO_Init+0x1e0>)
 8001356:	f000 fc1b 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800135a:	2303      	movs	r3, #3
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001362:	2301      	movs	r3, #1
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	4814      	ldr	r0, [pc, #80]	; (80013c0 <MX_GPIO_Init+0x1d8>)
 800136e:	f000 fc0f 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137c:	2301      	movs	r3, #1
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <MX_GPIO_Init+0x1dc>)
 800138c:	f000 fc00 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001390:	2302      	movs	r3, #2
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001398:	2301      	movs	r3, #1
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a6:	f000 fbf3 	bl	8001b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	48000c00 	.word	0x48000c00
 80013bc:	48001800 	.word	0x48001800
 80013c0:	48000400 	.word	0x48000400
 80013c4:	48001400 	.word	0x48001400
 80013c8:	48000800 	.word	0x48000800

080013cc <HAL_UART_RxCpltCallback>:
//		HAL_UART_Transmit(&huart2,RxBuff,1,100);	// 接收到数据马上使用串口2发送出去
//		HAL_UART_Receive_IT(&huart2,RxBuff,1);		// 重新使能串口2接收中断
//	}
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2)	// 判断是由哪个串口触发的中�?
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a13      	ldr	r2, [pc, #76]	; (8001428 <HAL_UART_RxCpltCallback+0x5c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d120      	bne.n	8001420 <HAL_UART_RxCpltCallback+0x54>
	{
		RxLine++;                      //每接收到一个数据，进入回调数据长度加1
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_UART_RxCpltCallback+0x60>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_UART_RxCpltCallback+0x60>)
 80013e6:	6013      	str	r3, [r2, #0]
		DataBuff[RxLine-1]=RxBuff[0];  //把每次接收到的数据保存到缓存数组
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_UART_RxCpltCallback+0x60>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	4a10      	ldr	r2, [pc, #64]	; (8001430 <HAL_UART_RxCpltCallback+0x64>)
 80013f0:	7811      	ldrb	r1, [r2, #0]
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <HAL_UART_RxCpltCallback+0x68>)
 80013f4:	54d1      	strb	r1, [r2, r3]
		Rx_flag=1;
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_UART_RxCpltCallback+0x6c>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
		if(RxBuff[0]==0xff)            //接收结束标志位，这个数据可以自定义，根据实际需求，这里只做示例使用，不一定是0xff
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_UART_RxCpltCallback+0x64>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2bff      	cmp	r3, #255	; 0xff
 8001402:	d101      	bne.n	8001408 <HAL_UART_RxCpltCallback+0x3c>
		{
			printf_usart();
 8001404:	f7ff fd7c 	bl	8000f00 <printf_usart>
		}
		RxBuff[0]=0;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_UART_RxCpltCallback+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, (uint8_t *)RxBuff, 1); //每接收一个数据，就打开一次串口中断接收，否则只会接收一个数据就停止接收
 800140e:	2201      	movs	r2, #1
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <HAL_UART_RxCpltCallback+0x64>)
 8001412:	480a      	ldr	r0, [pc, #40]	; (800143c <HAL_UART_RxCpltCallback+0x70>)
 8001414:	f003 f878 	bl	8004508 <HAL_UART_Receive_IT>
		__HAL_TIM_SET_COUNTER(&htim3, 1); // 计数清零，从头开始计
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_UART_RxCpltCallback+0x74>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2201      	movs	r2, #1
 800141e:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40004400 	.word	0x40004400
 800142c:	2000036c 	.word	0x2000036c
 8001430:	20000304 	.word	0x20000304
 8001434:	20000308 	.word	0x20000308
 8001438:	20000370 	.word	0x20000370
 800143c:	20000274 	.word	0x20000274
 8001440:	20000228 	.word	0x20000228

08001444 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3){	// 判断是由哪个定时器触发的中断
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d108      	bne.n	8001468 <HAL_TIM_PeriodElapsedCallback+0x24>
    	if(Rx_flag==1)
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d104      	bne.n	8001468 <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			printf_usart();
 800145e:	f7ff fd4f 	bl	8000f00 <printf_usart>
			Rx_flag=0;
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
		}
    }
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40000400 	.word	0x40000400
 8001474:	20000370 	.word	0x20000370

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_MspInit+0x44>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_MspInit+0x44>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6613      	str	r3, [r2, #96]	; 0x60
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_MspInit+0x44>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_MspInit+0x44>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_MspInit+0x44>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6593      	str	r3, [r2, #88]	; 0x58
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_MspInit+0x44>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <HAL_TIM_Base_MspInit+0x44>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d113      	bne.n	8001506 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_TIM_Base_MspInit+0x48>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <HAL_TIM_Base_MspInit+0x48>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_TIM_Base_MspInit+0x48>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	201d      	movs	r0, #29
 80014fc:	f000 fb11 	bl	8001b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001500:	201d      	movs	r0, #29
 8001502:	f000 fb2a 	bl	8001b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40000400 	.word	0x40000400
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0b0      	sub	sp, #192	; 0xc0
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2298      	movs	r2, #152	; 0x98
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f004 fca9 	bl	8005e90 <memset>
  if(huart->Instance==USART2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <HAL_UART_MspInit+0xb0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d13b      	bne.n	80015c0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001548:	2302      	movs	r3, #2
 800154a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800154c:	2304      	movs	r3, #4
 800154e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fceb 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001560:	f7ff ff8a 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_UART_MspInit+0xb4>)
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_UART_MspInit+0xb4>)
 800156a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156e:	6593      	str	r3, [r2, #88]	; 0x58
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_UART_MspInit+0xb4>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_UART_MspInit+0xb4>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <HAL_UART_MspInit+0xb4>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_UART_MspInit+0xb4>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001594:	230c      	movs	r3, #12
 8001596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ac:	2307      	movs	r3, #7
 80015ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015bc:	f000 fae8 	bl	8001b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	37c0      	adds	r7, #192	; 0xc0
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40004400 	.word	0x40004400
 80015cc:	40021000 	.word	0x40021000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 f962 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM3_IRQHandler+0x10>)
 800162a:	f002 fa9d 	bl	8003b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000228 	.word	0x20000228

08001638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_kill>:

int _kill(int pid, int sig)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001652:	f004 fbf3 	bl	8005e3c <__errno>
 8001656:	4603      	mov	r3, r0
 8001658:	2216      	movs	r2, #22
 800165a:	601a      	str	r2, [r3, #0]
  return -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_exit>:

void _exit (int status)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ffe7 	bl	8001648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800167a:	e7fe      	b.n	800167a <_exit+0x12>

0800167c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e00a      	b.n	80016a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168e:	f3af 8000 	nop.w
 8001692:	4601      	mov	r1, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf0      	blt.n	800168e <_read+0x12>
  }

  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fc03 	bl	8000edc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>
  }
  return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001716:	605a      	str	r2, [r3, #4]
  return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_isatty>:

int _isatty(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f004 fb58 	bl	8005e3c <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20050000 	.word	0x20050000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	20000378 	.word	0x20000378
 80017c0:	20000398 	.word	0x20000398

080017c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017ec:	f7ff ffea 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	; (8001828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <LoopForever+0xe>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	; (8001834 <LoopForever+0x16>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001816:	f004 fb17 	bl	8005e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181a:	f7ff fb95 	bl	8000f48 <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001820:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800182c:	08008efc 	.word	0x08008efc
  ldr r2, =_sbss
 8001830:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001834:	20000394 	.word	0x20000394

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>

0800183a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f961 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184a:	200f      	movs	r0, #15
 800184c:	f000 f80e 	bl	800186c <HAL_InitTick>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	e001      	b.n	8001860 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800185c:	f7ff fe12 	bl	8001484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001860:	79fb      	ldrb	r3, [r7, #7]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_InitTick+0x6c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d023      	beq.n	80018c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_InitTick+0x70>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_InitTick+0x6c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f96d 	bl	8001b76 <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d809      	bhi.n	80018bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018b0:	f000 f937 	bl	8001b22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_InitTick+0x74>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e007      	b.n	80018cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e004      	b.n	80018cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e001      	b.n	80018cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000008 	.word	0x20000008
 8001908:	2000037c 	.word	0x2000037c

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2000037c 	.word	0x2000037c

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff ffee 	bl	800190c <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_Delay+0x44>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194a:	bf00      	nop
 800194c:	f7ff ffde 	bl	800190c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60d3      	str	r3, [r2, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db0b      	blt.n	80019fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4907      	ldr	r1, [pc, #28]	; (8001a08 <__NVIC_EnableIRQ+0x38>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000e100 	.word	0xe000e100

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	; (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	; (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	; 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad8:	d301      	bcc.n	8001ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00f      	b.n	8001afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <SysTick_Config+0x40>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aec:	f7ff ff8e 	bl	8001a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <SysTick_Config+0x40>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <SysTick_Config+0x40>)
 8001af8:	2207      	movs	r2, #7
 8001afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000e010 	.word	0xe000e010

08001b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff29 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff3e 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff8e 	bl	8001a60 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5d 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff31 	bl	80019d0 <__NVIC_EnableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffa2 	bl	8001ac8 <SysTick_Config>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	e166      	b.n	8001e6e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8158 	beq.w	8001e68 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d005      	beq.n	8001bd0 <HAL_GPIO_Init+0x40>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d130      	bne.n	8001c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c06:	2201      	movs	r2, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 0201 	and.w	r2, r3, #1
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d017      	beq.n	8001c6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d123      	bne.n	8001cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	6939      	ldr	r1, [r7, #16]
 8001cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0203 	and.w	r2, r3, #3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80b2 	beq.w	8001e68 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d04:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <HAL_GPIO_Init+0x2fc>)
 8001d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d08:	4a60      	ldr	r2, [pc, #384]	; (8001e8c <HAL_GPIO_Init+0x2fc>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d10:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <HAL_GPIO_Init+0x2fc>)
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d1c:	4a5c      	ldr	r2, [pc, #368]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d46:	d02b      	beq.n	8001da0 <HAL_GPIO_Init+0x210>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d025      	beq.n	8001d9c <HAL_GPIO_Init+0x20c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a51      	ldr	r2, [pc, #324]	; (8001e98 <HAL_GPIO_Init+0x308>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d01f      	beq.n	8001d98 <HAL_GPIO_Init+0x208>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a50      	ldr	r2, [pc, #320]	; (8001e9c <HAL_GPIO_Init+0x30c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d019      	beq.n	8001d94 <HAL_GPIO_Init+0x204>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a4f      	ldr	r2, [pc, #316]	; (8001ea0 <HAL_GPIO_Init+0x310>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x200>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a4e      	ldr	r2, [pc, #312]	; (8001ea4 <HAL_GPIO_Init+0x314>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1fc>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a4d      	ldr	r2, [pc, #308]	; (8001ea8 <HAL_GPIO_Init+0x318>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1f8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a4c      	ldr	r2, [pc, #304]	; (8001eac <HAL_GPIO_Init+0x31c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1f4>
 8001d80:	2307      	movs	r3, #7
 8001d82:	e00e      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d84:	2308      	movs	r3, #8
 8001d86:	e00c      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d88:	2306      	movs	r3, #6
 8001d8a:	e00a      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	e008      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d90:	2304      	movs	r3, #4
 8001d92:	e006      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e004      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001da0:	2300      	movs	r3, #0
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	f002 0203 	and.w	r2, r2, #3
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	4093      	lsls	r3, r2
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001db2:	4937      	ldr	r1, [pc, #220]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dc0:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001de4:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e0e:	4a28      	ldr	r2, [pc, #160]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e62:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f47f ae91 	bne.w	8001ba0 <HAL_GPIO_Init+0x10>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010000 	.word	0x40010000
 8001e94:	48000400 	.word	0x48000400
 8001e98:	48000800 	.word	0x48000800
 8001e9c:	48000c00 	.word	0x48000c00
 8001ea0:	48001000 	.word	0x48001000
 8001ea4:	48001400 	.word	0x48001400
 8001ea8:	48001800 	.word	0x48001800
 8001eac:	48001c00 	.word	0x48001c00
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e001      	b.n	8001ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f24:	d102      	bne.n	8001f2c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2a:	e00b      	b.n	8001f44 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f3a:	d102      	bne.n	8001f42 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f40:	e000      	b.n	8001f44 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001f42:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40007000 	.word	0x40007000

08001f54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d141      	bne.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f62:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6e:	d131      	bne.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f70:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f76:	4a46      	ldr	r2, [pc, #280]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f80:	4b43      	ldr	r3, [pc, #268]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f88:	4a41      	ldr	r2, [pc, #260]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f90:	4b40      	ldr	r3, [pc, #256]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2232      	movs	r2, #50	; 0x32
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	4a3f      	ldr	r2, [pc, #252]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	0c9b      	lsrs	r3, r3, #18
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa6:	e002      	b.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fae:	4b38      	ldr	r3, [pc, #224]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fba:	d102      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f2      	bne.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fc2:	4b33      	ldr	r3, [pc, #204]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fce:	d158      	bne.n	8002082 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e057      	b.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fda:	4a2d      	ldr	r2, [pc, #180]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fe4:	e04d      	b.n	8002082 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fec:	d141      	bne.n	8002072 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fee:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffa:	d131      	bne.n	8002060 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ffc:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002002:	4a23      	ldr	r2, [pc, #140]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800200c:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002014:	4a1e      	ldr	r2, [pc, #120]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2232      	movs	r2, #50	; 0x32
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	0c9b      	lsrs	r3, r3, #18
 800202e:	3301      	adds	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002032:	e002      	b.n	800203a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3b01      	subs	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002046:	d102      	bne.n	800204e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f2      	bne.n	8002034 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205a:	d112      	bne.n	8002082 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e011      	b.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002070:	e007      	b.n	8002082 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002080:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40007000 	.word	0x40007000
 8002094:	20000000 	.word	0x20000000
 8002098:	431bde83 	.word	0x431bde83

0800209c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80020a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020aa:	6053      	str	r3, [r2, #4]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40007000 	.word	0x40007000

080020bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d102      	bne.n	80020d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f000 bc68 	b.w	80029a0 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d0:	4b97      	ldr	r3, [pc, #604]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020da:	4b95      	ldr	r3, [pc, #596]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80e6 	beq.w	80022be <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_RCC_OscConfig+0x4c>
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	f040 808d 	bne.w	800221a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	2b01      	cmp	r3, #1
 8002104:	f040 8089 	bne.w	800221a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002108:	4b89      	ldr	r3, [pc, #548]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <HAL_RCC_OscConfig+0x66>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	f000 bc3f 	b.w	80029a0 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002126:	4b82      	ldr	r3, [pc, #520]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d004      	beq.n	800213c <HAL_RCC_OscConfig+0x80>
 8002132:	4b7f      	ldr	r3, [pc, #508]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213a:	e005      	b.n	8002148 <HAL_RCC_OscConfig+0x8c>
 800213c:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800213e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002148:	4293      	cmp	r3, r2
 800214a:	d224      	bcs.n	8002196 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fe2d 	bl	8002db0 <RCC_SetFlashLatencyFromMSIRange>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	f000 bc1f 	b.w	80029a0 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002162:	4b73      	ldr	r3, [pc, #460]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a72      	ldr	r2, [pc, #456]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b70      	ldr	r3, [pc, #448]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	496d      	ldr	r1, [pc, #436]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002180:	4b6b      	ldr	r3, [pc, #428]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	4968      	ldr	r1, [pc, #416]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
 8002194:	e025      	b.n	80021e2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002196:	4b66      	ldr	r3, [pc, #408]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a65      	ldr	r2, [pc, #404]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	4960      	ldr	r1, [pc, #384]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b4:	4b5e      	ldr	r3, [pc, #376]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	495b      	ldr	r1, [pc, #364]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fdec 	bl	8002db0 <RCC_SetFlashLatencyFromMSIRange>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e3de      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e2:	f000 fd21 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b51      	ldr	r3, [pc, #324]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	4950      	ldr	r1, [pc, #320]	; (8002334 <HAL_RCC_OscConfig+0x278>)
 80021f4:	5ccb      	ldrb	r3, [r1, r3]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a4e      	ldr	r2, [pc, #312]	; (8002338 <HAL_RCC_OscConfig+0x27c>)
 8002200:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002202:	4b4e      	ldr	r3, [pc, #312]	; (800233c <HAL_RCC_OscConfig+0x280>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fb30 	bl	800186c <HAL_InitTick>
 800220c:	4603      	mov	r3, r0
 800220e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d052      	beq.n	80022bc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002216:	7dfb      	ldrb	r3, [r7, #23]
 8002218:	e3c2      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d032      	beq.n	8002288 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002222:	4b43      	ldr	r3, [pc, #268]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a42      	ldr	r2, [pc, #264]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800222e:	f7ff fb6d 	bl	800190c <HAL_GetTick>
 8002232:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002236:	f7ff fb69 	bl	800190c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e3ab      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002248:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a35      	ldr	r2, [pc, #212]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	4930      	ldr	r1, [pc, #192]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002272:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	492b      	ldr	r1, [pc, #172]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
 8002286:	e01a      	b.n	80022be <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002288:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a28      	ldr	r2, [pc, #160]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002294:	f7ff fb3a 	bl	800190c <HAL_GetTick>
 8002298:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800229c:	f7ff fb36 	bl	800190c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e378      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x1e0>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d073      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_OscConfig+0x220>
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	d10e      	bne.n	80022f4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d10b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d063      	beq.n	80023b0 <HAL_RCC_OscConfig+0x2f4>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d15f      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e355      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x250>
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e025      	b.n	8002358 <HAL_RCC_OscConfig+0x29c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002314:	d114      	bne.n	8002340 <HAL_RCC_OscConfig+0x284>
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a02      	ldr	r2, [pc, #8]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e013      	b.n	8002358 <HAL_RCC_OscConfig+0x29c>
 8002330:	40021000 	.word	0x40021000
 8002334:	08008a9c 	.word	0x08008a9c
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004
 8002340:	4b8f      	ldr	r3, [pc, #572]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a8e      	ldr	r2, [pc, #568]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b8c      	ldr	r3, [pc, #560]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a8b      	ldr	r2, [pc, #556]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff fad4 	bl	800190c <HAL_GetTick>
 8002364:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7ff fad0 	bl	800190c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e312      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237a:	4b81      	ldr	r3, [pc, #516]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x2ac>
 8002386:	e014      	b.n	80023b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7ff fac0 	bl	800190c <HAL_GetTick>
 800238c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7ff fabc 	bl	800190c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e2fe      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023a2:	4b77      	ldr	r3, [pc, #476]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x2d4>
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d060      	beq.n	8002480 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_OscConfig+0x314>
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d119      	bne.n	80023fe <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d116      	bne.n	80023fe <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d0:	4b6b      	ldr	r3, [pc, #428]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_OscConfig+0x32c>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e2db      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b65      	ldr	r3, [pc, #404]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	4962      	ldr	r1, [pc, #392]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023fc:	e040      	b.n	8002480 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d023      	beq.n	800244e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002406:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a5d      	ldr	r2, [pc, #372]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7ff fa7b 	bl	800190c <HAL_GetTick>
 8002416:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241a:	f7ff fa77 	bl	800190c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e2b9      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242c:	4b54      	ldr	r3, [pc, #336]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b51      	ldr	r3, [pc, #324]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	061b      	lsls	r3, r3, #24
 8002446:	494e      	ldr	r1, [pc, #312]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
 800244c:	e018      	b.n	8002480 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244e:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a4b      	ldr	r2, [pc, #300]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7ff fa57 	bl	800190c <HAL_GetTick>
 800245e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002462:	f7ff fa53 	bl	800190c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e295      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002474:	4b42      	ldr	r3, [pc, #264]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 8082 	beq.w	8002592 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d05f      	beq.n	8002556 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002496:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d037      	beq.n	800251c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e26d      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01b      	beq.n	8002506 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d4:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024de:	f7ff fa15 	bl	800190c <HAL_GetTick>
 80024e2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e6:	f7ff fa11 	bl	800190c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b11      	cmp	r3, #17
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e253      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ef      	bne.n	80024e6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250c:	f023 0210 	bic.w	r2, r3, #16
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	491a      	ldr	r1, [pc, #104]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002522:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7ff f9ee 	bl	800190c <HAL_GetTick>
 8002530:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7ff f9ea 	bl	800190c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b11      	cmp	r3, #17
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e22c      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ef      	beq.n	8002534 <HAL_RCC_OscConfig+0x478>
 8002554:	e01d      	b.n	8002592 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255c:	4a08      	ldr	r2, [pc, #32]	; (8002580 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7ff f9d1 	bl	800190c <HAL_GetTick>
 800256a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256e:	f7ff f9cd 	bl	800190c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b11      	cmp	r3, #17
 800257a:	d903      	bls.n	8002584 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e20f      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
 8002580:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002584:	4b83      	ldr	r3, [pc, #524]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ed      	bne.n	800256e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80bd 	beq.w	800271a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025a6:	4b7b      	ldr	r3, [pc, #492]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10e      	bne.n	80025d0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b78      	ldr	r3, [pc, #480]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	4a77      	ldr	r2, [pc, #476]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6593      	str	r3, [r2, #88]	; 0x58
 80025be:	4b75      	ldr	r3, [pc, #468]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d0:	4b71      	ldr	r3, [pc, #452]	; (8002798 <HAL_RCC_OscConfig+0x6dc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d118      	bne.n	800260e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025dc:	4b6e      	ldr	r3, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x6dc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a6d      	ldr	r2, [pc, #436]	; (8002798 <HAL_RCC_OscConfig+0x6dc>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e8:	f7ff f990 	bl	800190c <HAL_GetTick>
 80025ec:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f0:	f7ff f98c 	bl	800190c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1ce      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002602:	4b65      	ldr	r3, [pc, #404]	; (8002798 <HAL_RCC_OscConfig+0x6dc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d02c      	beq.n	8002674 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800261a:	4b5e      	ldr	r3, [pc, #376]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002620:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262c:	4959      	ldr	r1, [pc, #356]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d010      	beq.n	8002662 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002640:	4b54      	ldr	r3, [pc, #336]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	4a53      	ldr	r2, [pc, #332]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002648:	f043 0304 	orr.w	r3, r3, #4
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002656:	4a4f      	ldr	r2, [pc, #316]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002660:	e018      	b.n	8002694 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002662:	4b4c      	ldr	r3, [pc, #304]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	4a4a      	ldr	r2, [pc, #296]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002672:	e00f      	b.n	8002694 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002674:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267a:	4a46      	ldr	r2, [pc, #280]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002684:	4b43      	ldr	r3, [pc, #268]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	4a42      	ldr	r2, [pc, #264]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 800268c:	f023 0304 	bic.w	r3, r3, #4
 8002690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d016      	beq.n	80026ca <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7ff f936 	bl	800190c <HAL_GetTick>
 80026a0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a4:	f7ff f932 	bl	800190c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e172      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ba:	4b36      	ldr	r3, [pc, #216]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ed      	beq.n	80026a4 <HAL_RCC_OscConfig+0x5e8>
 80026c8:	e01d      	b.n	8002706 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ca:	f7ff f91f 	bl	800190c <HAL_GetTick>
 80026ce:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7ff f91b 	bl	800190c <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e15b      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e8:	4b2a      	ldr	r3, [pc, #168]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1ed      	bne.n	80026d2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80026f6:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	4a25      	ldr	r2, [pc, #148]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 80026fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	4a20      	ldr	r2, [pc, #128]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002718:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d041      	beq.n	80027aa <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01c      	beq.n	8002768 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800272e:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002734:	4a17      	ldr	r2, [pc, #92]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7ff f8e5 	bl	800190c <HAL_GetTick>
 8002742:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002746:	f7ff f8e1 	bl	800190c <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e123      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 800275a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ef      	beq.n	8002746 <HAL_RCC_OscConfig+0x68a>
 8002766:	e020      	b.n	80027aa <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 800276a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800276e:	4a09      	ldr	r2, [pc, #36]	; (8002794 <HAL_RCC_OscConfig+0x6d8>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7ff f8c8 	bl	800190c <HAL_GetTick>
 800277c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800277e:	e00d      	b.n	800279c <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002780:	f7ff f8c4 	bl	800190c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d906      	bls.n	800279c <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e106      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800279c:	4b82      	ldr	r3, [pc, #520]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 800279e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ea      	bne.n	8002780 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80f5 	beq.w	800299e <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	f040 80cb 	bne.w	8002954 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027be:	4b7a      	ldr	r3, [pc, #488]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 0203 	and.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d12c      	bne.n	800282c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	3b01      	subs	r3, #1
 80027de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d123      	bne.n	800282c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d11b      	bne.n	800282c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d113      	bne.n	800282c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	3b01      	subs	r3, #1
 8002812:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d109      	bne.n	800282c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	085b      	lsrs	r3, r3, #1
 8002824:	3b01      	subs	r3, #1
 8002826:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d06d      	beq.n	8002908 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d068      	beq.n	8002904 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002832:	4b5d      	ldr	r3, [pc, #372]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800283e:	4b5a      	ldr	r3, [pc, #360]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0a8      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800284e:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a55      	ldr	r2, [pc, #340]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002854:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002858:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800285a:	f7ff f857 	bl	800190c <HAL_GetTick>
 800285e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002862:	f7ff f853 	bl	800190c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e095      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002874:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f0      	bne.n	8002862 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002880:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	4b49      	ldr	r3, [pc, #292]	; (80029ac <HAL_RCC_OscConfig+0x8f0>)
 8002886:	4013      	ands	r3, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002890:	3a01      	subs	r2, #1
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	4311      	orrs	r1, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800289a:	0212      	lsls	r2, r2, #8
 800289c:	4311      	orrs	r1, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028a2:	0852      	lsrs	r2, r2, #1
 80028a4:	3a01      	subs	r2, #1
 80028a6:	0552      	lsls	r2, r2, #21
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028ae:	0852      	lsrs	r2, r2, #1
 80028b0:	3a01      	subs	r2, #1
 80028b2:	0652      	lsls	r2, r2, #25
 80028b4:	4311      	orrs	r1, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028ba:	06d2      	lsls	r2, r2, #27
 80028bc:	430a      	orrs	r2, r1
 80028be:	493a      	ldr	r1, [pc, #232]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028c4:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a37      	ldr	r2, [pc, #220]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d0:	4b35      	ldr	r3, [pc, #212]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a34      	ldr	r2, [pc, #208]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028dc:	f7ff f816 	bl	800190c <HAL_GetTick>
 80028e0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7ff f812 	bl	800190c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e054      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002902:	e04c      	b.n	800299e <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e04b      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d144      	bne.n	800299e <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002914:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a20      	ldr	r2, [pc, #128]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800292c:	f7fe ffee 	bl	800190c <HAL_GetTick>
 8002930:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe ffea 	bl	800190c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e02c      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x878>
 8002952:	e024      	b.n	800299e <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d01f      	beq.n	800299a <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002960:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe ffd1 	bl	800190c <HAL_GetTick>
 800296a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296e:	f7fe ffcd 	bl	800190c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e00f      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	4905      	ldr	r1, [pc, #20]	; (80029a8 <HAL_RCC_OscConfig+0x8ec>)
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <HAL_RCC_OscConfig+0x8f4>)
 8002994:	4013      	ands	r3, r2
 8002996:	60cb      	str	r3, [r1, #12]
 8002998:	e001      	b.n	800299e <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3728      	adds	r7, #40	; 0x28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	019d800c 	.word	0x019d800c
 80029b0:	feeefffc 	.word	0xfeeefffc

080029b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e11d      	b.n	8002c08 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b90      	ldr	r3, [pc, #576]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d910      	bls.n	80029fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b8d      	ldr	r3, [pc, #564]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 020f 	bic.w	r2, r3, #15
 80029e2:	498b      	ldr	r1, [pc, #556]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b89      	ldr	r3, [pc, #548]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e105      	b.n	8002c08 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d010      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	4b81      	ldr	r3, [pc, #516]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d908      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b7e      	ldr	r3, [pc, #504]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	497b      	ldr	r1, [pc, #492]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d079      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d11e      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	4b75      	ldr	r3, [pc, #468]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0dc      	b.n	8002c08 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a4e:	f000 fa09 	bl	8002e64 <RCC_GetSysClockFreqFromPLLSource>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4a70      	ldr	r2, [pc, #448]	; (8002c18 <HAL_RCC_ClockConfig+0x264>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d946      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a5a:	4b6e      	ldr	r3, [pc, #440]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d140      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a66:	4b6b      	ldr	r3, [pc, #428]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6e:	4a69      	ldr	r2, [pc, #420]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e035      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a84:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d115      	bne.n	8002abc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b9      	b.n	8002c08 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a9c:	4b5d      	ldr	r3, [pc, #372]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0ad      	b.n	8002c08 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0a5      	b.n	8002c08 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002abc:	f000 f8b4 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4a55      	ldr	r2, [pc, #340]	; (8002c18 <HAL_RCC_ClockConfig+0x264>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d90f      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ac8:	4b52      	ldr	r3, [pc, #328]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002adc:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 0203 	bic.w	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4947      	ldr	r1, [pc, #284]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afa:	f7fe ff07 	bl	800190c <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b02:	f7fe ff03 	bl	800190c <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e077      	b.n	8002c08 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b18:	4b3e      	ldr	r3, [pc, #248]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 020c 	and.w	r2, r3, #12
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d1eb      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b80      	cmp	r3, #128	; 0x80
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b30:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a37      	ldr	r2, [pc, #220]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b3a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d010      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d208      	bcs.n	8002b6a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	492b      	ldr	r1, [pc, #172]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6a:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d210      	bcs.n	8002b9a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 020f 	bic.w	r2, r3, #15
 8002b80:	4923      	ldr	r1, [pc, #140]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e036      	b.n	8002c08 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4918      	ldr	r1, [pc, #96]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4910      	ldr	r1, [pc, #64]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bd8:	f000 f826 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	490c      	ldr	r1, [pc, #48]	; (8002c1c <HAL_RCC_ClockConfig+0x268>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <HAL_RCC_ClockConfig+0x26c>)
 8002bf6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_RCC_ClockConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe fe35 	bl	800186c <HAL_InitTick>
 8002c02:	4603      	mov	r3, r0
 8002c04:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40022000 	.word	0x40022000
 8002c14:	40021000 	.word	0x40021000
 8002c18:	04c4b400 	.word	0x04c4b400
 8002c1c:	08008a9c 	.word	0x08008a9c
 8002c20:	20000000 	.word	0x20000000
 8002c24:	20000004 	.word	0x20000004

08002c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c36:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c40:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x34>
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d121      	bne.n	8002c9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d11e      	bne.n	8002c9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c5c:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d107      	bne.n	8002c78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c68:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e005      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c78:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c84:	4a2b      	ldr	r2, [pc, #172]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10d      	bne.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d102      	bne.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	e004      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cac:	4b23      	ldr	r3, [pc, #140]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d134      	bne.n	8002d20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0xa6>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d003      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xac>
 8002ccc:	e005      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cd0:	617b      	str	r3, [r7, #20]
      break;
 8002cd2:	e005      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cd6:	617b      	str	r3, [r7, #20]
      break;
 8002cd8:	e002      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	617b      	str	r3, [r7, #20]
      break;
 8002cde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	3301      	adds	r3, #1
 8002cec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	fb03 f202 	mul.w	r2, r3, r2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	0e5b      	lsrs	r3, r3, #25
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	3301      	adds	r3, #1
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d20:	69bb      	ldr	r3, [r7, #24]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	; 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08008ab4 	.word	0x08008ab4
 8002d38:	00f42400 	.word	0x00f42400
 8002d3c:	007a1200 	.word	0x007a1200

08002d40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000000 	.word	0x20000000

08002d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d5c:	f7ff fff0 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4904      	ldr	r1, [pc, #16]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	08008aac 	.word	0x08008aac

08002d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d88:	f7ff ffda 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	0adb      	lsrs	r3, r3, #11
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4904      	ldr	r1, [pc, #16]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08008aac 	.word	0x08008aac

08002db0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dc8:	f7ff f8a4 	bl	8001f14 <HAL_PWREx_GetVoltageRange>
 8002dcc:	6178      	str	r0, [r7, #20]
 8002dce:	e014      	b.n	8002dfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dd0:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dda:	6593      	str	r3, [r2, #88]	; 0x58
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002de8:	f7ff f894 	bl	8001f14 <HAL_PWREx_GetVoltageRange>
 8002dec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df2:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e00:	d10b      	bne.n	8002e1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d913      	bls.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e0c:	d902      	bls.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e0e:	2302      	movs	r3, #2
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	e00d      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e14:	2301      	movs	r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	e00a      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e1e:	d902      	bls.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e20:	2302      	movs	r3, #2
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e004      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b70      	cmp	r3, #112	; 0x70
 8002e2a:	d101      	bne.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 020f 	bic.w	r2, r3, #15
 8002e38:	4909      	ldr	r1, [pc, #36]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40022000 	.word	0x40022000

08002e64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d00b      	beq.n	8002e92 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d825      	bhi.n	8002ecc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d008      	beq.n	8002e98 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d11f      	bne.n	8002ecc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e8e:	613b      	str	r3, [r7, #16]
    break;
 8002e90:	e01f      	b.n	8002ed2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002e92:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002e94:	613b      	str	r3, [r7, #16]
    break;
 8002e96:	e01c      	b.n	8002ed2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e005      	b.n	8002ec0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002ec0:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec8:	613b      	str	r3, [r7, #16]
    break;
 8002eca:	e002      	b.n	8002ed2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
    break;
 8002ed0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	3301      	adds	r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	fb03 f202 	mul.w	r2, r3, r2
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0e5b      	lsrs	r3, r3, #25
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	3301      	adds	r3, #1
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f12:	683b      	ldr	r3, [r7, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40021000 	.word	0x40021000
 8002f24:	00f42400 	.word	0x00f42400
 8002f28:	007a1200 	.word	0x007a1200
 8002f2c:	08008ab4 	.word	0x08008ab4

08002f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d040      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d02a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f54:	2b80      	cmp	r3, #128	; 0x80
 8002f56:	d825      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f58:	2b60      	cmp	r3, #96	; 0x60
 8002f5a:	d026      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f5c:	2b60      	cmp	r3, #96	; 0x60
 8002f5e:	d821      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d006      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d81d      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d010      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f70:	e018      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f72:	4b89      	ldr	r3, [pc, #548]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4a88      	ldr	r2, [pc, #544]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f7e:	e015      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fb3e 	bl	8003608 <RCCEx_PLLSAI1_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f90:	e00c      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3320      	adds	r3, #32
 8002f96:	2100      	movs	r1, #0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fc29 	bl	80037f0 <RCCEx_PLLSAI2_Config>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa2:	e003      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	74fb      	strb	r3, [r7, #19]
      break;
 8002fa8:	e000      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb2:	4b79      	ldr	r3, [pc, #484]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fb8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc0:	4975      	ldr	r1, [pc, #468]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002fc8:	e001      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fca:	7cfb      	ldrb	r3, [r7, #19]
 8002fcc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d047      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d030      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe8:	d82a      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fee:	d02a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff4:	d824      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffa:	d008      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d81e      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300a:	d010      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800300c:	e018      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800300e:	4b62      	ldr	r3, [pc, #392]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4a61      	ldr	r2, [pc, #388]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800301a:	e015      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f000 faf0 	bl	8003608 <RCCEx_PLLSAI1_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800302c:	e00c      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3320      	adds	r3, #32
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fbdb 	bl	80037f0 <RCCEx_PLLSAI2_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800303e:	e003      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	74fb      	strb	r3, [r7, #19]
      break;
 8003044:	e000      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10b      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800304e:	4b52      	ldr	r3, [pc, #328]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003050:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	494e      	ldr	r1, [pc, #312]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003064:	e001      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003066:	7cfb      	ldrb	r3, [r7, #19]
 8003068:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 809f 	beq.w	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003078:	2300      	movs	r3, #0
 800307a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800307c:	4b46      	ldr	r3, [pc, #280]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800308c:	2300      	movs	r3, #0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	4a40      	ldr	r2, [pc, #256]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	6593      	str	r3, [r2, #88]	; 0x58
 800309e:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030aa:	2301      	movs	r3, #1
 80030ac:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ae:	4b3b      	ldr	r3, [pc, #236]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a3a      	ldr	r2, [pc, #232]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ba:	f7fe fc27 	bl	800190c <HAL_GetTick>
 80030be:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030c0:	e009      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c2:	f7fe fc23 	bl	800190c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d902      	bls.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	74fb      	strb	r3, [r7, #19]
        break;
 80030d4:	e005      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ef      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d15b      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030e8:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d01f      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	429a      	cmp	r2, r3
 8003104:	d019      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003106:	4b24      	ldr	r3, [pc, #144]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003110:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003122:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	4a1b      	ldr	r2, [pc, #108]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800312a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003132:	4a19      	ldr	r2, [pc, #100]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d016      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fbe2 	bl	800190c <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314a:	e00b      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7fe fbde 	bl	800190c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d902      	bls.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	74fb      	strb	r3, [r7, #19]
            break;
 8003162:	e006      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ec      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10c      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003178:	4b07      	ldr	r3, [pc, #28]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003188:	4903      	ldr	r1, [pc, #12]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003190:	e008      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003192:	7cfb      	ldrb	r3, [r7, #19]
 8003194:	74bb      	strb	r3, [r7, #18]
 8003196:	e005      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003198:	40021000 	.word	0x40021000
 800319c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a4:	7c7b      	ldrb	r3, [r7, #17]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d105      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4ba0      	ldr	r3, [pc, #640]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	4a9f      	ldr	r2, [pc, #636]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031c2:	4b9a      	ldr	r3, [pc, #616]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f023 0203 	bic.w	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	4996      	ldr	r1, [pc, #600]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031e4:	4b91      	ldr	r3, [pc, #580]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f023 020c 	bic.w	r2, r3, #12
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	498e      	ldr	r1, [pc, #568]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003206:	4b89      	ldr	r3, [pc, #548]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	4985      	ldr	r1, [pc, #532]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003228:	4b80      	ldr	r3, [pc, #512]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003236:	497d      	ldr	r1, [pc, #500]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800324a:	4b78      	ldr	r3, [pc, #480]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003258:	4974      	ldr	r1, [pc, #464]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800326c:	4b6f      	ldr	r3, [pc, #444]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327a:	496c      	ldr	r1, [pc, #432]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800328e:	4b67      	ldr	r3, [pc, #412]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800329c:	4963      	ldr	r1, [pc, #396]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032b0:	4b5e      	ldr	r3, [pc, #376]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032be:	495b      	ldr	r1, [pc, #364]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032d2:	4b56      	ldr	r3, [pc, #344]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	4952      	ldr	r1, [pc, #328]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032f4:	4b4d      	ldr	r3, [pc, #308]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	494a      	ldr	r1, [pc, #296]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003316:	4b45      	ldr	r3, [pc, #276]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	4941      	ldr	r1, [pc, #260]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003338:	4b3c      	ldr	r3, [pc, #240]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800333e:	f023 0203 	bic.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	4939      	ldr	r1, [pc, #228]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d028      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800335a:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003368:	4930      	ldr	r1, [pc, #192]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003378:	d106      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800337a:	4b2c      	ldr	r3, [pc, #176]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	4a2b      	ldr	r2, [pc, #172]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003384:	60d3      	str	r3, [r2, #12]
 8003386:	e011      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003390:	d10c      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	2101      	movs	r1, #1
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f935 	bl	8003608 <RCCEx_PLLSAI1_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d04d      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c0:	d108      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033c8:	4a18      	ldr	r2, [pc, #96]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80033d2:	e012      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80033d4:	4b15      	ldr	r3, [pc, #84]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033da:	4a14      	ldr	r2, [pc, #80]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f2:	490e      	ldr	r1, [pc, #56]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003402:	d106      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003404:	4b09      	ldr	r3, [pc, #36]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a08      	ldr	r2, [pc, #32]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800340e:	60d3      	str	r3, [r2, #12]
 8003410:	e020      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341a:	d109      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800341c:	4b03      	ldr	r3, [pc, #12]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a02      	ldr	r2, [pc, #8]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003426:	60d3      	str	r3, [r2, #12]
 8003428:	e014      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003438:	d10c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f8e1 	bl	8003608 <RCCEx_PLLSAI1_Config>
 8003446:	4603      	mov	r3, r0
 8003448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800344a:	7cfb      	ldrb	r3, [r7, #19]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d028      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003460:	4b68      	ldr	r3, [pc, #416]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346e:	4965      	ldr	r1, [pc, #404]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800347e:	d106      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003480:	4b60      	ldr	r3, [pc, #384]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a5f      	ldr	r2, [pc, #380]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800348a:	60d3      	str	r3, [r2, #12]
 800348c:	e011      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003496:	d10c      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	2101      	movs	r1, #1
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f8b2 	bl	8003608 <RCCEx_PLLSAI1_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80034ae:	7cfb      	ldrb	r3, [r7, #19]
 80034b0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01e      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034be:	4b51      	ldr	r3, [pc, #324]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ce:	494d      	ldr	r1, [pc, #308]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034e0:	d10c      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2102      	movs	r1, #2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f88d 	bl	8003608 <RCCEx_PLLSAI1_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003508:	4b3e      	ldr	r3, [pc, #248]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800350a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800350e:	f023 0204 	bic.w	r2, r3, #4
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003518:	493a      	ldr	r1, [pc, #232]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00b      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800352c:	4b35      	ldr	r3, [pc, #212]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800352e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003532:	f023 0218 	bic.w	r2, r3, #24
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	4931      	ldr	r1, [pc, #196]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d035      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003550:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355c:	f7fe f9d6 	bl	800190c <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003562:	e009      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003564:	f7fe f9d2 	bl	800190c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d902      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	74fb      	strb	r3, [r7, #19]
        break;
 8003576:	e005      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ef      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d113      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800358c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800359a:	491a      	ldr	r1, [pc, #104]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3320      	adds	r3, #32
 80035a6:	2102      	movs	r1, #2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f921 	bl	80037f0 <RCCEx_PLLSAI2_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d017      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80035c8:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	490a      	ldr	r1, [pc, #40]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035ea:	d105      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a04      	ldr	r2, [pc, #16]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000

08003608 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003616:	4b72      	ldr	r3, [pc, #456]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00e      	beq.n	8003640 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003622:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0203 	and.w	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d103      	bne.n	800363a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
       ||
 8003636:	2b00      	cmp	r3, #0
 8003638:	d142      	bne.n	80036c0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	e03f      	b.n	80036c0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d018      	beq.n	800367a <RCCEx_PLLSAI1_Config+0x72>
 8003648:	2b03      	cmp	r3, #3
 800364a:	d825      	bhi.n	8003698 <RCCEx_PLLSAI1_Config+0x90>
 800364c:	2b01      	cmp	r3, #1
 800364e:	d002      	beq.n	8003656 <RCCEx_PLLSAI1_Config+0x4e>
 8003650:	2b02      	cmp	r3, #2
 8003652:	d009      	beq.n	8003668 <RCCEx_PLLSAI1_Config+0x60>
 8003654:	e020      	b.n	8003698 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003656:	4b62      	ldr	r3, [pc, #392]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d11d      	bne.n	800369e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003666:	e01a      	b.n	800369e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003668:	4b5d      	ldr	r3, [pc, #372]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d116      	bne.n	80036a2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003678:	e013      	b.n	80036a2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800367a:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003686:	4b56      	ldr	r3, [pc, #344]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003696:	e006      	b.n	80036a6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      break;
 800369c:	e004      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800369e:	bf00      	nop
 80036a0:	e002      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80036a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80036ae:	4b4c      	ldr	r3, [pc, #304]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4949      	ldr	r1, [pc, #292]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 8086 	bne.w	80037d4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036c8:	4b45      	ldr	r3, [pc, #276]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a44      	ldr	r2, [pc, #272]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d4:	f7fe f91a 	bl	800190c <HAL_GetTick>
 80036d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036da:	e009      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036dc:	f7fe f916 	bl	800190c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d902      	bls.n	80036f0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	73fb      	strb	r3, [r7, #15]
        break;
 80036ee:	e005      	b.n	80036fc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036f0:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ef      	bne.n	80036dc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d168      	bne.n	80037d4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d113      	bne.n	8003730 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003708:	4b35      	ldr	r3, [pc, #212]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800370e:	4013      	ands	r3, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6892      	ldr	r2, [r2, #8]
 8003714:	0211      	lsls	r1, r2, #8
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68d2      	ldr	r2, [r2, #12]
 800371a:	06d2      	lsls	r2, r2, #27
 800371c:	4311      	orrs	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6852      	ldr	r2, [r2, #4]
 8003722:	3a01      	subs	r2, #1
 8003724:	0112      	lsls	r2, r2, #4
 8003726:	430a      	orrs	r2, r1
 8003728:	492d      	ldr	r1, [pc, #180]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	610b      	str	r3, [r1, #16]
 800372e:	e02d      	b.n	800378c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d115      	bne.n	8003762 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003736:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800373c:	4013      	ands	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6892      	ldr	r2, [r2, #8]
 8003742:	0211      	lsls	r1, r2, #8
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6912      	ldr	r2, [r2, #16]
 8003748:	0852      	lsrs	r2, r2, #1
 800374a:	3a01      	subs	r2, #1
 800374c:	0552      	lsls	r2, r2, #21
 800374e:	4311      	orrs	r1, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6852      	ldr	r2, [r2, #4]
 8003754:	3a01      	subs	r2, #1
 8003756:	0112      	lsls	r2, r2, #4
 8003758:	430a      	orrs	r2, r1
 800375a:	4921      	ldr	r1, [pc, #132]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800375c:	4313      	orrs	r3, r2
 800375e:	610b      	str	r3, [r1, #16]
 8003760:	e014      	b.n	800378c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003762:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	4b21      	ldr	r3, [pc, #132]	; (80037ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003768:	4013      	ands	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6892      	ldr	r2, [r2, #8]
 800376e:	0211      	lsls	r1, r2, #8
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6952      	ldr	r2, [r2, #20]
 8003774:	0852      	lsrs	r2, r2, #1
 8003776:	3a01      	subs	r2, #1
 8003778:	0652      	lsls	r2, r2, #25
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6852      	ldr	r2, [r2, #4]
 8003780:	3a01      	subs	r2, #1
 8003782:	0112      	lsls	r2, r2, #4
 8003784:	430a      	orrs	r2, r1
 8003786:	4916      	ldr	r1, [pc, #88]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003788:	4313      	orrs	r3, r2
 800378a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003796:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fe f8b8 	bl	800190c <HAL_GetTick>
 800379c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800379e:	e009      	b.n	80037b4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037a0:	f7fe f8b4 	bl	800190c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d902      	bls.n	80037b4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	73fb      	strb	r3, [r7, #15]
          break;
 80037b2:	e005      	b.n	80037c0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ef      	beq.n	80037a0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	4904      	ldr	r1, [pc, #16]	; (80037e0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	07ff800f 	.word	0x07ff800f
 80037e8:	ff9f800f 	.word	0xff9f800f
 80037ec:	f9ff800f 	.word	0xf9ff800f

080037f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037fe:	4b72      	ldr	r3, [pc, #456]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00e      	beq.n	8003828 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800380a:	4b6f      	ldr	r3, [pc, #444]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0203 	and.w	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d103      	bne.n	8003822 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
       ||
 800381e:	2b00      	cmp	r3, #0
 8003820:	d142      	bne.n	80038a8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
 8003826:	e03f      	b.n	80038a8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d018      	beq.n	8003862 <RCCEx_PLLSAI2_Config+0x72>
 8003830:	2b03      	cmp	r3, #3
 8003832:	d825      	bhi.n	8003880 <RCCEx_PLLSAI2_Config+0x90>
 8003834:	2b01      	cmp	r3, #1
 8003836:	d002      	beq.n	800383e <RCCEx_PLLSAI2_Config+0x4e>
 8003838:	2b02      	cmp	r3, #2
 800383a:	d009      	beq.n	8003850 <RCCEx_PLLSAI2_Config+0x60>
 800383c:	e020      	b.n	8003880 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800383e:	4b62      	ldr	r3, [pc, #392]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11d      	bne.n	8003886 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384e:	e01a      	b.n	8003886 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003850:	4b5d      	ldr	r3, [pc, #372]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d116      	bne.n	800388a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003860:	e013      	b.n	800388a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003862:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10f      	bne.n	800388e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800386e:	4b56      	ldr	r3, [pc, #344]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800387e:	e006      	b.n	800388e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      break;
 8003884:	e004      	b.n	8003890 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003886:	bf00      	nop
 8003888:	e002      	b.n	8003890 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800388e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003896:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f023 0203 	bic.w	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4949      	ldr	r1, [pc, #292]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 8086 	bne.w	80039bc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038b0:	4b45      	ldr	r3, [pc, #276]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a44      	ldr	r2, [pc, #272]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038bc:	f7fe f826 	bl	800190c <HAL_GetTick>
 80038c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038c2:	e009      	b.n	80038d8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038c4:	f7fe f822 	bl	800190c <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d902      	bls.n	80038d8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	73fb      	strb	r3, [r7, #15]
        break;
 80038d6:	e005      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038d8:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ef      	bne.n	80038c4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d168      	bne.n	80039bc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d113      	bne.n	8003918 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038f0:	4b35      	ldr	r3, [pc, #212]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	4b35      	ldr	r3, [pc, #212]	; (80039cc <RCCEx_PLLSAI2_Config+0x1dc>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6892      	ldr	r2, [r2, #8]
 80038fc:	0211      	lsls	r1, r2, #8
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68d2      	ldr	r2, [r2, #12]
 8003902:	06d2      	lsls	r2, r2, #27
 8003904:	4311      	orrs	r1, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6852      	ldr	r2, [r2, #4]
 800390a:	3a01      	subs	r2, #1
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	430a      	orrs	r2, r1
 8003910:	492d      	ldr	r1, [pc, #180]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003912:	4313      	orrs	r3, r2
 8003914:	614b      	str	r3, [r1, #20]
 8003916:	e02d      	b.n	8003974 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d115      	bne.n	800394a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800391e:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003924:	4013      	ands	r3, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6892      	ldr	r2, [r2, #8]
 800392a:	0211      	lsls	r1, r2, #8
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6912      	ldr	r2, [r2, #16]
 8003930:	0852      	lsrs	r2, r2, #1
 8003932:	3a01      	subs	r2, #1
 8003934:	0552      	lsls	r2, r2, #21
 8003936:	4311      	orrs	r1, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6852      	ldr	r2, [r2, #4]
 800393c:	3a01      	subs	r2, #1
 800393e:	0112      	lsls	r2, r2, #4
 8003940:	430a      	orrs	r2, r1
 8003942:	4921      	ldr	r1, [pc, #132]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003944:	4313      	orrs	r3, r2
 8003946:	614b      	str	r3, [r1, #20]
 8003948:	e014      	b.n	8003974 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800394a:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003950:	4013      	ands	r3, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6892      	ldr	r2, [r2, #8]
 8003956:	0211      	lsls	r1, r2, #8
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6952      	ldr	r2, [r2, #20]
 800395c:	0852      	lsrs	r2, r2, #1
 800395e:	3a01      	subs	r2, #1
 8003960:	0652      	lsls	r2, r2, #25
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6852      	ldr	r2, [r2, #4]
 8003968:	3a01      	subs	r2, #1
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	430a      	orrs	r2, r1
 800396e:	4916      	ldr	r1, [pc, #88]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003970:	4313      	orrs	r3, r2
 8003972:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd ffc4 	bl	800190c <HAL_GetTick>
 8003984:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003986:	e009      	b.n	800399c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003988:	f7fd ffc0 	bl	800190c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d902      	bls.n	800399c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	73fb      	strb	r3, [r7, #15]
          break;
 800399a:	e005      	b.n	80039a8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0ef      	beq.n	8003988 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	4904      	ldr	r1, [pc, #16]	; (80039c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	07ff800f 	.word	0x07ff800f
 80039d0:	ff9f800f 	.word	0xff9f800f
 80039d4:	f9ff800f 	.word	0xf9ff800f

080039d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e049      	b.n	8003a7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd fd64 	bl	80014cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f000 fab6 	bl	8003f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d001      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e04f      	b.n	8003b40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a23      	ldr	r2, [pc, #140]	; (8003b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d018      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1c      	ldr	r2, [pc, #112]	; (8003b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d115      	bne.n	8003b2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b06      	cmp	r3, #6
 8003b0e:	d015      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0xb4>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b16:	d011      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b28:	e008      	b.n	8003b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e000      	b.n	8003b3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800
 8003b58:	40000c00 	.word	0x40000c00
 8003b5c:	40013400 	.word	0x40013400
 8003b60:	40014000 	.word	0x40014000
 8003b64:	00010007 	.word	0x00010007

08003b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d122      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0202 	mvn.w	r2, #2
 8003b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f9ce 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f9c0 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f9d1 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d122      	bne.n	8003c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0204 	mvn.w	r2, #4
 8003be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9a4 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f996 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f9a7 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0208 	mvn.w	r2, #8
 8003c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2204      	movs	r2, #4
 8003c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f97a 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f96c 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f97d 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0210 	mvn.w	r2, #16
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2208      	movs	r2, #8
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f950 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f942 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f953 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10e      	bne.n	8003cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0201 	mvn.w	r2, #1
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fbac 	bl	8001444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b80      	cmp	r3, #128	; 0x80
 8003cf8:	d10e      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fafe 	bl	8004314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d26:	d10e      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b80      	cmp	r3, #128	; 0x80
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 faf1 	bl	8004328 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	d10e      	bne.n	8003d72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d107      	bne.n	8003d72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f901 	bl	8003f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d10e      	bne.n	8003d9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	d107      	bne.n	8003d9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f06f 0220 	mvn.w	r2, #32
 8003d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fab1 	bl	8004300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_TIM_ConfigClockSource+0x1c>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e0b6      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x18a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003de4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfe:	d03e      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0xd8>
 8003e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e04:	f200 8087 	bhi.w	8003f16 <HAL_TIM_ConfigClockSource+0x170>
 8003e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0c:	f000 8086 	beq.w	8003f1c <HAL_TIM_ConfigClockSource+0x176>
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e14:	d87f      	bhi.n	8003f16 <HAL_TIM_ConfigClockSource+0x170>
 8003e16:	2b70      	cmp	r3, #112	; 0x70
 8003e18:	d01a      	beq.n	8003e50 <HAL_TIM_ConfigClockSource+0xaa>
 8003e1a:	2b70      	cmp	r3, #112	; 0x70
 8003e1c:	d87b      	bhi.n	8003f16 <HAL_TIM_ConfigClockSource+0x170>
 8003e1e:	2b60      	cmp	r3, #96	; 0x60
 8003e20:	d050      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x11e>
 8003e22:	2b60      	cmp	r3, #96	; 0x60
 8003e24:	d877      	bhi.n	8003f16 <HAL_TIM_ConfigClockSource+0x170>
 8003e26:	2b50      	cmp	r3, #80	; 0x50
 8003e28:	d03c      	beq.n	8003ea4 <HAL_TIM_ConfigClockSource+0xfe>
 8003e2a:	2b50      	cmp	r3, #80	; 0x50
 8003e2c:	d873      	bhi.n	8003f16 <HAL_TIM_ConfigClockSource+0x170>
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d058      	beq.n	8003ee4 <HAL_TIM_ConfigClockSource+0x13e>
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d86f      	bhi.n	8003f16 <HAL_TIM_ConfigClockSource+0x170>
 8003e36:	2b30      	cmp	r3, #48	; 0x30
 8003e38:	d064      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0x15e>
 8003e3a:	2b30      	cmp	r3, #48	; 0x30
 8003e3c:	d86b      	bhi.n	8003f16 <HAL_TIM_ConfigClockSource+0x170>
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d060      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0x15e>
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d867      	bhi.n	8003f16 <HAL_TIM_ConfigClockSource+0x170>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d05c      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0x15e>
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d05a      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0x15e>
 8003e4e:	e062      	b.n	8003f16 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6899      	ldr	r1, [r3, #8]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f000 f9a6 	bl	80041b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e72:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
      break;
 8003e7c:	e04f      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6899      	ldr	r1, [r3, #8]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f000 f98f 	bl	80041b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea0:	609a      	str	r2, [r3, #8]
      break;
 8003ea2:	e03c      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f000 f903 	bl	80040bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2150      	movs	r1, #80	; 0x50
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f95c 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003ec2:	e02c      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f000 f922 	bl	800411a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2160      	movs	r1, #96	; 0x60
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f94c 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003ee2:	e01c      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f000 f8e3 	bl	80040bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2140      	movs	r1, #64	; 0x40
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f93c 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003f02:	e00c      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f000 f933 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003f14:	e003      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1a:	e000      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a40      	ldr	r2, [pc, #256]	; (800409c <TIM_Base_SetConfig+0x114>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d013      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d00f      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a3d      	ldr	r2, [pc, #244]	; (80040a0 <TIM_Base_SetConfig+0x118>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <TIM_Base_SetConfig+0x11c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <TIM_Base_SetConfig+0x120>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a3a      	ldr	r2, [pc, #232]	; (80040ac <TIM_Base_SetConfig+0x124>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d108      	bne.n	8003fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2f      	ldr	r2, [pc, #188]	; (800409c <TIM_Base_SetConfig+0x114>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01f      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d01b      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a2c      	ldr	r2, [pc, #176]	; (80040a0 <TIM_Base_SetConfig+0x118>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d017      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <TIM_Base_SetConfig+0x11c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a2a      	ldr	r2, [pc, #168]	; (80040a8 <TIM_Base_SetConfig+0x120>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00f      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a29      	ldr	r2, [pc, #164]	; (80040ac <TIM_Base_SetConfig+0x124>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00b      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a28      	ldr	r2, [pc, #160]	; (80040b0 <TIM_Base_SetConfig+0x128>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d007      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <TIM_Base_SetConfig+0x12c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d003      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <TIM_Base_SetConfig+0x130>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d108      	bne.n	8004034 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a10      	ldr	r2, [pc, #64]	; (800409c <TIM_Base_SetConfig+0x114>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00f      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a12      	ldr	r2, [pc, #72]	; (80040ac <TIM_Base_SetConfig+0x124>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00b      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a11      	ldr	r2, [pc, #68]	; (80040b0 <TIM_Base_SetConfig+0x128>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d007      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <TIM_Base_SetConfig+0x12c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <TIM_Base_SetConfig+0x130>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d103      	bne.n	8004088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	615a      	str	r2, [r3, #20]
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40000c00 	.word	0x40000c00
 80040ac:	40013400 	.word	0x40013400
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40014400 	.word	0x40014400
 80040b8:	40014800 	.word	0x40014800

080040bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 030a 	bic.w	r3, r3, #10
 80040f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800411a:	b480      	push	{r7}
 800411c:	b087      	sub	sp, #28
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0210 	bic.w	r2, r3, #16
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	031b      	lsls	r3, r3, #12
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004156:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	f043 0307 	orr.w	r3, r3, #7
 800419c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	609a      	str	r2, [r3, #8]
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004204:	2302      	movs	r3, #2
 8004206:	e068      	b.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2e      	ldr	r2, [pc, #184]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2d      	ldr	r2, [pc, #180]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d108      	bne.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004242:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004254:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01d      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427a:	d018      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a13      	ldr	r2, [pc, #76]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d10c      	bne.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40013400 	.word	0x40013400
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40014000 	.word	0x40014000

08004300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e042      	b.n	80043d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fd f8d9 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2224      	movs	r2, #36	; 0x24
 800436a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f92e 	bl	80045e0 <UART_SetConfig>
 8004384:	4603      	mov	r3, r0
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e022      	b.n	80043d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fc1e 	bl	8004bd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fca5 	bl	8004d1c <UART_CheckIdleState>
 80043d2:	4603      	mov	r3, r0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	f040 8083 	bne.w	80044fe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_UART_Transmit+0x28>
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e07b      	b.n	8004500 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_UART_Transmit+0x3a>
 8004412:	2302      	movs	r3, #2
 8004414:	e074      	b.n	8004500 <HAL_UART_Transmit+0x124>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2221      	movs	r2, #33	; 0x21
 800442a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800442e:	f7fd fa6d 	bl	800190c <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444c:	d108      	bne.n	8004460 <HAL_UART_Transmit+0x84>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e003      	b.n	8004468 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004470:	e02c      	b.n	80044cc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2200      	movs	r2, #0
 800447a:	2180      	movs	r1, #128	; 0x80
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fc98 	bl	8004db2 <UART_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e039      	b.n	8004500 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	3302      	adds	r3, #2
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	e007      	b.n	80044ba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1cc      	bne.n	8004472 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2200      	movs	r2, #0
 80044e0:	2140      	movs	r1, #64	; 0x40
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fc65 	bl	8004db2 <UART_WaitOnFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e006      	b.n	8004500 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e000      	b.n	8004500 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80044fe:	2302      	movs	r3, #2
  }
}
 8004500:	4618      	mov	r0, r3
 8004502:	3720      	adds	r7, #32
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	2b20      	cmp	r3, #32
 800451e:	d142      	bne.n	80045a6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <HAL_UART_Receive_IT+0x24>
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e03b      	b.n	80045a8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_UART_Receive_IT+0x36>
 800453a:	2302      	movs	r3, #2
 800453c:	e034      	b.n	80045a8 <HAL_UART_Receive_IT+0xa0>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <HAL_UART_Receive_IT+0xa8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d01f      	beq.n	8004596 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d018      	beq.n	8004596 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	613b      	str	r3, [r7, #16]
   return(result);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	623b      	str	r3, [r7, #32]
 8004584:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	69f9      	ldr	r1, [r7, #28]
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e6      	bne.n	8004564 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	461a      	mov	r2, r3
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fcd1 	bl	8004f44 <UART_Start_Receive_IT>
 80045a2:	4603      	mov	r3, r0
 80045a4:	e000      	b.n	80045a8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3728      	adds	r7, #40	; 0x28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40008000 	.word	0x40008000

080045b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e4:	b08c      	sub	sp, #48	; 0x30
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	431a      	orrs	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	4313      	orrs	r3, r2
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4baa      	ldr	r3, [pc, #680]	; (80048b8 <UART_SetConfig+0x2d8>)
 8004610:	4013      	ands	r3, r2
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004618:	430b      	orrs	r3, r1
 800461a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a9f      	ldr	r2, [pc, #636]	; (80048bc <UART_SetConfig+0x2dc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004648:	4313      	orrs	r3, r2
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004656:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004660:	430b      	orrs	r3, r1
 8004662:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	f023 010f 	bic.w	r1, r3, #15
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a90      	ldr	r2, [pc, #576]	; (80048c0 <UART_SetConfig+0x2e0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d125      	bne.n	80046d0 <UART_SetConfig+0xf0>
 8004684:	4b8f      	ldr	r3, [pc, #572]	; (80048c4 <UART_SetConfig+0x2e4>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b03      	cmp	r3, #3
 8004690:	d81a      	bhi.n	80046c8 <UART_SetConfig+0xe8>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0xb8>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046b9 	.word	0x080046b9
 80046a0:	080046b1 	.word	0x080046b1
 80046a4:	080046c1 	.word	0x080046c1
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ae:	e116      	b.n	80048de <UART_SetConfig+0x2fe>
 80046b0:	2302      	movs	r3, #2
 80046b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046b6:	e112      	b.n	80048de <UART_SetConfig+0x2fe>
 80046b8:	2304      	movs	r3, #4
 80046ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046be:	e10e      	b.n	80048de <UART_SetConfig+0x2fe>
 80046c0:	2308      	movs	r3, #8
 80046c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046c6:	e10a      	b.n	80048de <UART_SetConfig+0x2fe>
 80046c8:	2310      	movs	r3, #16
 80046ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ce:	e106      	b.n	80048de <UART_SetConfig+0x2fe>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a7c      	ldr	r2, [pc, #496]	; (80048c8 <UART_SetConfig+0x2e8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d138      	bne.n	800474c <UART_SetConfig+0x16c>
 80046da:	4b7a      	ldr	r3, [pc, #488]	; (80048c4 <UART_SetConfig+0x2e4>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f003 030c 	and.w	r3, r3, #12
 80046e4:	2b0c      	cmp	r3, #12
 80046e6:	d82d      	bhi.n	8004744 <UART_SetConfig+0x164>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0x110>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004725 	.word	0x08004725
 80046f4:	08004745 	.word	0x08004745
 80046f8:	08004745 	.word	0x08004745
 80046fc:	08004745 	.word	0x08004745
 8004700:	08004735 	.word	0x08004735
 8004704:	08004745 	.word	0x08004745
 8004708:	08004745 	.word	0x08004745
 800470c:	08004745 	.word	0x08004745
 8004710:	0800472d 	.word	0x0800472d
 8004714:	08004745 	.word	0x08004745
 8004718:	08004745 	.word	0x08004745
 800471c:	08004745 	.word	0x08004745
 8004720:	0800473d 	.word	0x0800473d
 8004724:	2300      	movs	r3, #0
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800472a:	e0d8      	b.n	80048de <UART_SetConfig+0x2fe>
 800472c:	2302      	movs	r3, #2
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004732:	e0d4      	b.n	80048de <UART_SetConfig+0x2fe>
 8004734:	2304      	movs	r3, #4
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473a:	e0d0      	b.n	80048de <UART_SetConfig+0x2fe>
 800473c:	2308      	movs	r3, #8
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004742:	e0cc      	b.n	80048de <UART_SetConfig+0x2fe>
 8004744:	2310      	movs	r3, #16
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474a:	e0c8      	b.n	80048de <UART_SetConfig+0x2fe>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a5e      	ldr	r2, [pc, #376]	; (80048cc <UART_SetConfig+0x2ec>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d125      	bne.n	80047a2 <UART_SetConfig+0x1c2>
 8004756:	4b5b      	ldr	r3, [pc, #364]	; (80048c4 <UART_SetConfig+0x2e4>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004760:	2b30      	cmp	r3, #48	; 0x30
 8004762:	d016      	beq.n	8004792 <UART_SetConfig+0x1b2>
 8004764:	2b30      	cmp	r3, #48	; 0x30
 8004766:	d818      	bhi.n	800479a <UART_SetConfig+0x1ba>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d00a      	beq.n	8004782 <UART_SetConfig+0x1a2>
 800476c:	2b20      	cmp	r3, #32
 800476e:	d814      	bhi.n	800479a <UART_SetConfig+0x1ba>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <UART_SetConfig+0x19a>
 8004774:	2b10      	cmp	r3, #16
 8004776:	d008      	beq.n	800478a <UART_SetConfig+0x1aa>
 8004778:	e00f      	b.n	800479a <UART_SetConfig+0x1ba>
 800477a:	2300      	movs	r3, #0
 800477c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004780:	e0ad      	b.n	80048de <UART_SetConfig+0x2fe>
 8004782:	2302      	movs	r3, #2
 8004784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004788:	e0a9      	b.n	80048de <UART_SetConfig+0x2fe>
 800478a:	2304      	movs	r3, #4
 800478c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004790:	e0a5      	b.n	80048de <UART_SetConfig+0x2fe>
 8004792:	2308      	movs	r3, #8
 8004794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004798:	e0a1      	b.n	80048de <UART_SetConfig+0x2fe>
 800479a:	2310      	movs	r3, #16
 800479c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a0:	e09d      	b.n	80048de <UART_SetConfig+0x2fe>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a4a      	ldr	r2, [pc, #296]	; (80048d0 <UART_SetConfig+0x2f0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d125      	bne.n	80047f8 <UART_SetConfig+0x218>
 80047ac:	4b45      	ldr	r3, [pc, #276]	; (80048c4 <UART_SetConfig+0x2e4>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047b6:	2bc0      	cmp	r3, #192	; 0xc0
 80047b8:	d016      	beq.n	80047e8 <UART_SetConfig+0x208>
 80047ba:	2bc0      	cmp	r3, #192	; 0xc0
 80047bc:	d818      	bhi.n	80047f0 <UART_SetConfig+0x210>
 80047be:	2b80      	cmp	r3, #128	; 0x80
 80047c0:	d00a      	beq.n	80047d8 <UART_SetConfig+0x1f8>
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d814      	bhi.n	80047f0 <UART_SetConfig+0x210>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <UART_SetConfig+0x1f0>
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d008      	beq.n	80047e0 <UART_SetConfig+0x200>
 80047ce:	e00f      	b.n	80047f0 <UART_SetConfig+0x210>
 80047d0:	2300      	movs	r3, #0
 80047d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047d6:	e082      	b.n	80048de <UART_SetConfig+0x2fe>
 80047d8:	2302      	movs	r3, #2
 80047da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047de:	e07e      	b.n	80048de <UART_SetConfig+0x2fe>
 80047e0:	2304      	movs	r3, #4
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047e6:	e07a      	b.n	80048de <UART_SetConfig+0x2fe>
 80047e8:	2308      	movs	r3, #8
 80047ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ee:	e076      	b.n	80048de <UART_SetConfig+0x2fe>
 80047f0:	2310      	movs	r3, #16
 80047f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f6:	e072      	b.n	80048de <UART_SetConfig+0x2fe>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a35      	ldr	r2, [pc, #212]	; (80048d4 <UART_SetConfig+0x2f4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d12a      	bne.n	8004858 <UART_SetConfig+0x278>
 8004802:	4b30      	ldr	r3, [pc, #192]	; (80048c4 <UART_SetConfig+0x2e4>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004810:	d01a      	beq.n	8004848 <UART_SetConfig+0x268>
 8004812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004816:	d81b      	bhi.n	8004850 <UART_SetConfig+0x270>
 8004818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481c:	d00c      	beq.n	8004838 <UART_SetConfig+0x258>
 800481e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004822:	d815      	bhi.n	8004850 <UART_SetConfig+0x270>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <UART_SetConfig+0x250>
 8004828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482c:	d008      	beq.n	8004840 <UART_SetConfig+0x260>
 800482e:	e00f      	b.n	8004850 <UART_SetConfig+0x270>
 8004830:	2300      	movs	r3, #0
 8004832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004836:	e052      	b.n	80048de <UART_SetConfig+0x2fe>
 8004838:	2302      	movs	r3, #2
 800483a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800483e:	e04e      	b.n	80048de <UART_SetConfig+0x2fe>
 8004840:	2304      	movs	r3, #4
 8004842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004846:	e04a      	b.n	80048de <UART_SetConfig+0x2fe>
 8004848:	2308      	movs	r3, #8
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484e:	e046      	b.n	80048de <UART_SetConfig+0x2fe>
 8004850:	2310      	movs	r3, #16
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004856:	e042      	b.n	80048de <UART_SetConfig+0x2fe>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a17      	ldr	r2, [pc, #92]	; (80048bc <UART_SetConfig+0x2dc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d13a      	bne.n	80048d8 <UART_SetConfig+0x2f8>
 8004862:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <UART_SetConfig+0x2e4>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800486c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004870:	d01a      	beq.n	80048a8 <UART_SetConfig+0x2c8>
 8004872:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004876:	d81b      	bhi.n	80048b0 <UART_SetConfig+0x2d0>
 8004878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487c:	d00c      	beq.n	8004898 <UART_SetConfig+0x2b8>
 800487e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004882:	d815      	bhi.n	80048b0 <UART_SetConfig+0x2d0>
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <UART_SetConfig+0x2b0>
 8004888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488c:	d008      	beq.n	80048a0 <UART_SetConfig+0x2c0>
 800488e:	e00f      	b.n	80048b0 <UART_SetConfig+0x2d0>
 8004890:	2300      	movs	r3, #0
 8004892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004896:	e022      	b.n	80048de <UART_SetConfig+0x2fe>
 8004898:	2302      	movs	r3, #2
 800489a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800489e:	e01e      	b.n	80048de <UART_SetConfig+0x2fe>
 80048a0:	2304      	movs	r3, #4
 80048a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a6:	e01a      	b.n	80048de <UART_SetConfig+0x2fe>
 80048a8:	2308      	movs	r3, #8
 80048aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ae:	e016      	b.n	80048de <UART_SetConfig+0x2fe>
 80048b0:	2310      	movs	r3, #16
 80048b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048b6:	e012      	b.n	80048de <UART_SetConfig+0x2fe>
 80048b8:	cfff69f3 	.word	0xcfff69f3
 80048bc:	40008000 	.word	0x40008000
 80048c0:	40013800 	.word	0x40013800
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40004400 	.word	0x40004400
 80048cc:	40004800 	.word	0x40004800
 80048d0:	40004c00 	.word	0x40004c00
 80048d4:	40005000 	.word	0x40005000
 80048d8:	2310      	movs	r3, #16
 80048da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4aae      	ldr	r2, [pc, #696]	; (8004b9c <UART_SetConfig+0x5bc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	f040 8097 	bne.w	8004a18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d823      	bhi.n	800493a <UART_SetConfig+0x35a>
 80048f2:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <UART_SetConfig+0x318>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	0800493b 	.word	0x0800493b
 8004900:	08004925 	.word	0x08004925
 8004904:	0800493b 	.word	0x0800493b
 8004908:	0800492b 	.word	0x0800492b
 800490c:	0800493b 	.word	0x0800493b
 8004910:	0800493b 	.word	0x0800493b
 8004914:	0800493b 	.word	0x0800493b
 8004918:	08004933 	.word	0x08004933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800491c:	f7fe fa1c 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8004920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004922:	e010      	b.n	8004946 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004924:	4b9e      	ldr	r3, [pc, #632]	; (8004ba0 <UART_SetConfig+0x5c0>)
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004928:	e00d      	b.n	8004946 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800492a:	f7fe f97d 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 800492e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004930:	e009      	b.n	8004946 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004938:	e005      	b.n	8004946 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004944:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8130 	beq.w	8004bae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	4a94      	ldr	r2, [pc, #592]	; (8004ba4 <UART_SetConfig+0x5c4>)
 8004954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004958:	461a      	mov	r2, r3
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004960:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4413      	add	r3, r2
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	429a      	cmp	r2, r3
 8004970:	d305      	bcc.n	800497e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	429a      	cmp	r2, r3
 800497c:	d903      	bls.n	8004986 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004984:	e113      	b.n	8004bae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	2200      	movs	r2, #0
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	60fa      	str	r2, [r7, #12]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	4a84      	ldr	r2, [pc, #528]	; (8004ba4 <UART_SetConfig+0x5c4>)
 8004994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004998:	b29b      	uxth	r3, r3
 800499a:	2200      	movs	r2, #0
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049a8:	f7fc f916 	bl	8000bd8 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	020b      	lsls	r3, r1, #8
 80049be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049c2:	0202      	lsls	r2, r0, #8
 80049c4:	6979      	ldr	r1, [r7, #20]
 80049c6:	6849      	ldr	r1, [r1, #4]
 80049c8:	0849      	lsrs	r1, r1, #1
 80049ca:	2000      	movs	r0, #0
 80049cc:	460c      	mov	r4, r1
 80049ce:	4605      	mov	r5, r0
 80049d0:	eb12 0804 	adds.w	r8, r2, r4
 80049d4:	eb43 0905 	adc.w	r9, r3, r5
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	469a      	mov	sl, r3
 80049e0:	4693      	mov	fp, r2
 80049e2:	4652      	mov	r2, sl
 80049e4:	465b      	mov	r3, fp
 80049e6:	4640      	mov	r0, r8
 80049e8:	4649      	mov	r1, r9
 80049ea:	f7fc f8f5 	bl	8000bd8 <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4613      	mov	r3, r2
 80049f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049fc:	d308      	bcc.n	8004a10 <UART_SetConfig+0x430>
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a04:	d204      	bcs.n	8004a10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a3a      	ldr	r2, [r7, #32]
 8004a0c:	60da      	str	r2, [r3, #12]
 8004a0e:	e0ce      	b.n	8004bae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a16:	e0ca      	b.n	8004bae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a20:	d166      	bne.n	8004af0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004a22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d827      	bhi.n	8004a7a <UART_SetConfig+0x49a>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <UART_SetConfig+0x450>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a55 	.word	0x08004a55
 8004a34:	08004a5d 	.word	0x08004a5d
 8004a38:	08004a65 	.word	0x08004a65
 8004a3c:	08004a7b 	.word	0x08004a7b
 8004a40:	08004a6b 	.word	0x08004a6b
 8004a44:	08004a7b 	.word	0x08004a7b
 8004a48:	08004a7b 	.word	0x08004a7b
 8004a4c:	08004a7b 	.word	0x08004a7b
 8004a50:	08004a73 	.word	0x08004a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a54:	f7fe f980 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8004a58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a5a:	e014      	b.n	8004a86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a5c:	f7fe f992 	bl	8002d84 <HAL_RCC_GetPCLK2Freq>
 8004a60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a62:	e010      	b.n	8004a86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a64:	4b4e      	ldr	r3, [pc, #312]	; (8004ba0 <UART_SetConfig+0x5c0>)
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a68:	e00d      	b.n	8004a86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a6a:	f7fe f8dd 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 8004a6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a70:	e009      	b.n	8004a86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a78:	e005      	b.n	8004a86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8090 	beq.w	8004bae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	4a44      	ldr	r2, [pc, #272]	; (8004ba4 <UART_SetConfig+0x5c4>)
 8004a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aa0:	005a      	lsls	r2, r3, #1
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	441a      	add	r2, r3
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	2b0f      	cmp	r3, #15
 8004ab8:	d916      	bls.n	8004ae8 <UART_SetConfig+0x508>
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac0:	d212      	bcs.n	8004ae8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f023 030f 	bic.w	r3, r3, #15
 8004aca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	8bfb      	ldrh	r3, [r7, #30]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	8bfa      	ldrh	r2, [r7, #30]
 8004ae4:	60da      	str	r2, [r3, #12]
 8004ae6:	e062      	b.n	8004bae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004aee:	e05e      	b.n	8004bae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004af0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d828      	bhi.n	8004b4a <UART_SetConfig+0x56a>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x520>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b35 	.word	0x08004b35
 8004b0c:	08004b4b 	.word	0x08004b4b
 8004b10:	08004b3b 	.word	0x08004b3b
 8004b14:	08004b4b 	.word	0x08004b4b
 8004b18:	08004b4b 	.word	0x08004b4b
 8004b1c:	08004b4b 	.word	0x08004b4b
 8004b20:	08004b43 	.word	0x08004b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b24:	f7fe f918 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8004b28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b2a:	e014      	b.n	8004b56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b2c:	f7fe f92a 	bl	8002d84 <HAL_RCC_GetPCLK2Freq>
 8004b30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b32:	e010      	b.n	8004b56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b34:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <UART_SetConfig+0x5c0>)
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b38:	e00d      	b.n	8004b56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7fe f875 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 8004b3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b40:	e009      	b.n	8004b56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b48:	e005      	b.n	8004b56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b54:	bf00      	nop
    }

    if (pclk != 0U)
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d028      	beq.n	8004bae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	4a10      	ldr	r2, [pc, #64]	; (8004ba4 <UART_SetConfig+0x5c4>)
 8004b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b66:	461a      	mov	r2, r3
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	441a      	add	r2, r3
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	2b0f      	cmp	r3, #15
 8004b84:	d910      	bls.n	8004ba8 <UART_SetConfig+0x5c8>
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8c:	d20c      	bcs.n	8004ba8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60da      	str	r2, [r3, #12]
 8004b98:	e009      	b.n	8004bae <UART_SetConfig+0x5ce>
 8004b9a:	bf00      	nop
 8004b9c:	40008000 	.word	0x40008000
 8004ba0:	00f42400 	.word	0x00f42400
 8004ba4:	08008ae4 	.word	0x08008ae4
      }
      else
      {
        ret = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004bca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3730      	adds	r7, #48	; 0x30
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01a      	beq.n	8004cee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd6:	d10a      	bne.n	8004cee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d2c:	f7fc fdee 	bl	800190c <HAL_GetTick>
 8004d30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d10e      	bne.n	8004d5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f82f 	bl	8004db2 <UART_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e025      	b.n	8004daa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d10e      	bne.n	8004d8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f819 	bl	8004db2 <UART_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e00f      	b.n	8004daa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b09c      	sub	sp, #112	; 0x70
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	603b      	str	r3, [r7, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc2:	e0a9      	b.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dca:	f000 80a5 	beq.w	8004f18 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dce:	f7fc fd9d 	bl	800190c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d302      	bcc.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d140      	bne.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004df8:	667b      	str	r3, [r7, #100]	; 0x64
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e6      	bne.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e36:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e5      	bne.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e069      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d051      	beq.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e82:	d149      	bne.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
 8004eae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3308      	adds	r3, #8
 8004ede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ee0:	623a      	str	r2, [r7, #32]
 8004ee2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	69f9      	ldr	r1, [r7, #28]
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e5      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e010      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69da      	ldr	r2, [r3, #28]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4013      	ands	r3, r2
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	f43f af46 	beq.w	8004dc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3770      	adds	r7, #112	; 0x70
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b0a3      	sub	sp, #140	; 0x8c
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	88fa      	ldrh	r2, [r7, #6]
 8004f64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f76:	d10e      	bne.n	8004f96 <UART_Start_Receive_IT+0x52>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d105      	bne.n	8004f8c <UART_Start_Receive_IT+0x48>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004f86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f8a:	e02d      	b.n	8004fe8 <UART_Start_Receive_IT+0xa4>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	22ff      	movs	r2, #255	; 0xff
 8004f90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f94:	e028      	b.n	8004fe8 <UART_Start_Receive_IT+0xa4>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10d      	bne.n	8004fba <UART_Start_Receive_IT+0x76>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d104      	bne.n	8004fb0 <UART_Start_Receive_IT+0x6c>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	22ff      	movs	r2, #255	; 0xff
 8004faa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fae:	e01b      	b.n	8004fe8 <UART_Start_Receive_IT+0xa4>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	227f      	movs	r2, #127	; 0x7f
 8004fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fb8:	e016      	b.n	8004fe8 <UART_Start_Receive_IT+0xa4>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc2:	d10d      	bne.n	8004fe0 <UART_Start_Receive_IT+0x9c>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <UART_Start_Receive_IT+0x92>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	227f      	movs	r2, #127	; 0x7f
 8004fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fd4:	e008      	b.n	8004fe8 <UART_Start_Receive_IT+0xa4>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	223f      	movs	r2, #63	; 0x3f
 8004fda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004fde:	e003      	b.n	8004fe8 <UART_Start_Receive_IT+0xa4>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2222      	movs	r2, #34	; 0x22
 8004ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3308      	adds	r3, #8
 8005018:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800501c:	673a      	str	r2, [r7, #112]	; 0x70
 800501e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005022:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800502a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e3      	bne.n	8004ff8 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005038:	d153      	bne.n	80050e2 <UART_Start_Receive_IT+0x19e>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005040:	88fa      	ldrh	r2, [r7, #6]
 8005042:	429a      	cmp	r2, r3
 8005044:	d34d      	bcc.n	80050e2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504e:	d107      	bne.n	8005060 <UART_Start_Receive_IT+0x11c>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d103      	bne.n	8005060 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4a4b      	ldr	r2, [pc, #300]	; (8005188 <UART_Start_Receive_IT+0x244>)
 800505c:	671a      	str	r2, [r3, #112]	; 0x70
 800505e:	e002      	b.n	8005066 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4a4a      	ldr	r2, [pc, #296]	; (800518c <UART_Start_Receive_IT+0x248>)
 8005064:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01a      	beq.n	80050ac <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800509a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800509e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e4      	bne.n	8005076 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3308      	adds	r3, #8
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3308      	adds	r3, #8
 80050ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80050cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80050ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e5      	bne.n	80050ac <UART_Start_Receive_IT+0x168>
 80050e0:	e04a      	b.n	8005178 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ea:	d107      	bne.n	80050fc <UART_Start_Receive_IT+0x1b8>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d103      	bne.n	80050fc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4a26      	ldr	r2, [pc, #152]	; (8005190 <UART_Start_Receive_IT+0x24c>)
 80050f8:	671a      	str	r2, [r3, #112]	; 0x70
 80050fa:	e002      	b.n	8005102 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a25      	ldr	r2, [pc, #148]	; (8005194 <UART_Start_Receive_IT+0x250>)
 8005100:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d019      	beq.n	8005146 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005126:	677b      	str	r3, [r7, #116]	; 0x74
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005130:	637b      	str	r3, [r7, #52]	; 0x34
 8005132:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e6      	bne.n	8005112 <UART_Start_Receive_IT+0x1ce>
 8005144:	e018      	b.n	8005178 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	613b      	str	r3, [r7, #16]
   return(result);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f043 0320 	orr.w	r3, r3, #32
 800515a:	67bb      	str	r3, [r7, #120]	; 0x78
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005164:	623b      	str	r3, [r7, #32]
 8005166:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	69f9      	ldr	r1, [r7, #28]
 800516a:	6a3a      	ldr	r2, [r7, #32]
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	61bb      	str	r3, [r7, #24]
   return(result);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e6      	bne.n	8005146 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	378c      	adds	r7, #140	; 0x8c
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	08005751 	.word	0x08005751
 800518c:	08005459 	.word	0x08005459
 8005190:	080052f9 	.word	0x080052f9
 8005194:	08005199 	.word	0x08005199

08005198 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b096      	sub	sp, #88	; 0x58
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80051a6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	2b22      	cmp	r3, #34	; 0x22
 80051b2:	f040 8095 	bne.w	80052e0 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051c0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80051c4:	b2d9      	uxtb	r1, r3
 80051c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	400a      	ands	r2, r1
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d178      	bne.n	80052f0 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800520c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005212:	653b      	str	r3, [r7, #80]	; 0x50
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800521c:	647b      	str	r3, [r7, #68]	; 0x44
 800521e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e6      	bne.n	80051fe <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	623b      	str	r3, [r7, #32]
   return(result);
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005250:	633a      	str	r2, [r7, #48]	; 0x30
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e5      	bne.n	8005230 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005276:	2b01      	cmp	r3, #1
 8005278:	d12e      	bne.n	80052d8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	60fb      	str	r3, [r7, #12]
   return(result);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f023 0310 	bic.w	r3, r3, #16
 8005294:	64bb      	str	r3, [r7, #72]	; 0x48
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	69b9      	ldr	r1, [r7, #24]
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	617b      	str	r3, [r7, #20]
   return(result);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e6      	bne.n	8005280 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d103      	bne.n	80052c8 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2210      	movs	r2, #16
 80052c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff f979 	bl	80045c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052d6:	e00b      	b.n	80052f0 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7fc f877 	bl	80013cc <HAL_UART_RxCpltCallback>
}
 80052de:	e007      	b.n	80052f0 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0208 	orr.w	r2, r2, #8
 80052ee:	619a      	str	r2, [r3, #24]
}
 80052f0:	bf00      	nop
 80052f2:	3758      	adds	r7, #88	; 0x58
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b096      	sub	sp, #88	; 0x58
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005306:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	2b22      	cmp	r3, #34	; 0x22
 8005312:	f040 8095 	bne.w	8005440 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005324:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005326:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800532a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800532e:	4013      	ands	r3, r2
 8005330:	b29a      	uxth	r2, r3
 8005332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005334:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	1c9a      	adds	r2, r3, #2
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d178      	bne.n	8005450 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537c:	643b      	str	r3, [r7, #64]	; 0x40
 800537e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d12e      	bne.n	8005438 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f023 0310 	bic.w	r3, r3, #16
 80053f4:	647b      	str	r3, [r7, #68]	; 0x44
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	6979      	ldr	r1, [r7, #20]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	613b      	str	r3, [r7, #16]
   return(result);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e6      	bne.n	80053e0 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b10      	cmp	r3, #16
 800541e:	d103      	bne.n	8005428 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2210      	movs	r2, #16
 8005426:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff f8c9 	bl	80045c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005436:	e00b      	b.n	8005450 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7fb ffc7 	bl	80013cc <HAL_UART_RxCpltCallback>
}
 800543e:	e007      	b.n	8005450 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0208 	orr.w	r2, r2, #8
 800544e:	619a      	str	r2, [r3, #24]
}
 8005450:	bf00      	nop
 8005452:	3758      	adds	r7, #88	; 0x58
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b0a6      	sub	sp, #152	; 0x98
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005466:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	2b22      	cmp	r3, #34	; 0x22
 8005490:	f040 814f 	bne.w	8005732 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800549a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800549e:	e0f6      	b.n	800568e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054aa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80054ae:	b2d9      	uxtb	r1, r3
 80054b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ba:	400a      	ands	r2, r1
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80054e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d053      	beq.n	800559a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d011      	beq.n	8005522 <UART_RxISR_8BIT_FIFOEN+0xca>
 80054fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2201      	movs	r2, #1
 8005510:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005518:	f043 0201 	orr.w	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005522:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d011      	beq.n	8005552 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800552e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2202      	movs	r2, #2
 8005540:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005548:	f043 0204 	orr.w	r2, r3, #4
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005552:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d011      	beq.n	8005582 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800555e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00b      	beq.n	8005582 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2204      	movs	r2, #4
 8005570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005578:	f043 0202 	orr.w	r2, r3, #2
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005588:	2b00      	cmp	r3, #0
 800558a:	d006      	beq.n	800559a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff f811 	bl	80045b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d173      	bne.n	800568e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80055b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80055ca:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80055ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80055d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e4      	bne.n	80055a6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3308      	adds	r3, #8
 80055e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80055ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055f2:	f023 0301 	bic.w	r3, r3, #1
 80055f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3308      	adds	r3, #8
 80055fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005600:	657a      	str	r2, [r7, #84]	; 0x54
 8005602:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005606:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800560e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e3      	bne.n	80055dc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005626:	2b01      	cmp	r3, #1
 8005628:	d12e      	bne.n	8005688 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	f023 0310 	bic.w	r3, r3, #16
 8005644:	67bb      	str	r3, [r7, #120]	; 0x78
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564e:	643b      	str	r3, [r7, #64]	; 0x40
 8005650:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e6      	bne.n	8005630 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b10      	cmp	r3, #16
 800566e:	d103      	bne.n	8005678 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2210      	movs	r2, #16
 8005676:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7fe ffa1 	bl	80045c8 <HAL_UARTEx_RxEventCallback>
 8005686:	e002      	b.n	800568e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7fb fe9f 	bl	80013cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800568e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005692:	2b00      	cmp	r3, #0
 8005694:	d006      	beq.n	80056a4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005696:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f47f aefe 	bne.w	80054a0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80056ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d045      	beq.n	8005742 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80056bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d23e      	bcs.n	8005742 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056da:	673b      	str	r3, [r7, #112]	; 0x70
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3308      	adds	r3, #8
 80056e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80056e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a14      	ldr	r2, [pc, #80]	; (800574c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80056fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	60bb      	str	r3, [r7, #8]
   return(result);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f043 0320 	orr.w	r3, r3, #32
 8005712:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6979      	ldr	r1, [r7, #20]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	613b      	str	r3, [r7, #16]
   return(result);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e6      	bne.n	80056fe <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005730:	e007      	b.n	8005742 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699a      	ldr	r2, [r3, #24]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0208 	orr.w	r2, r2, #8
 8005740:	619a      	str	r2, [r3, #24]
}
 8005742:	bf00      	nop
 8005744:	3798      	adds	r7, #152	; 0x98
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	08005199 	.word	0x08005199

08005750 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b0a8      	sub	sp, #160	; 0xa0
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800575e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005786:	2b22      	cmp	r3, #34	; 0x22
 8005788:	f040 8153 	bne.w	8005a32 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005792:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005796:	e0fa      	b.n	800598e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80057aa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80057ae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80057b2:	4013      	ands	r3, r2
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	1c9a      	adds	r2, r3, #2
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80057e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d053      	beq.n	8005896 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <UART_RxISR_16BIT_FIFOEN+0xce>
 80057fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2201      	movs	r2, #1
 800580c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005814:	f043 0201 	orr.w	r2, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800581e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d011      	beq.n	800584e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800582a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2202      	movs	r2, #2
 800583c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005844:	f043 0204 	orr.w	r2, r3, #4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800584e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d011      	beq.n	800587e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800585a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2204      	movs	r2, #4
 800586c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005874:	f043 0202 	orr.w	r2, r3, #2
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d006      	beq.n	8005896 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fe fe93 	bl	80045b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d175      	bne.n	800598e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058c6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e4      	bne.n	80058a2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005900:	65ba      	str	r2, [r7, #88]	; 0x58
 8005902:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005908:	e841 2300 	strex	r3, r2, [r1]
 800590c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800590e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1e1      	bne.n	80058d8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005926:	2b01      	cmp	r3, #1
 8005928:	d12e      	bne.n	8005988 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800593e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005940:	f023 0310 	bic.w	r3, r3, #16
 8005944:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800594e:	647b      	str	r3, [r7, #68]	; 0x44
 8005950:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800595c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e6      	bne.n	8005930 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b10      	cmp	r3, #16
 800596e:	d103      	bne.n	8005978 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2210      	movs	r2, #16
 8005976:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7fe fe21 	bl	80045c8 <HAL_UARTEx_RxEventCallback>
 8005986:	e002      	b.n	800598e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7fb fd1f 	bl	80013cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800598e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005992:	2b00      	cmp	r3, #0
 8005994:	d006      	beq.n	80059a4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005996:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f47f aefa 	bne.w	8005798 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d045      	beq.n	8005a42 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80059bc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d23e      	bcs.n	8005a42 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3308      	adds	r3, #8
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	623b      	str	r3, [r7, #32]
   return(result);
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059da:	677b      	str	r3, [r7, #116]	; 0x74
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80059e4:	633a      	str	r2, [r7, #48]	; 0x30
 80059e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e5      	bne.n	80059c4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a14      	ldr	r2, [pc, #80]	; (8005a4c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80059fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f043 0320 	orr.w	r3, r3, #32
 8005a12:	673b      	str	r3, [r7, #112]	; 0x70
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	69b9      	ldr	r1, [r7, #24]
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	617b      	str	r3, [r7, #20]
   return(result);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e6      	bne.n	80059fe <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a30:	e007      	b.n	8005a42 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699a      	ldr	r2, [r3, #24]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0208 	orr.w	r2, r2, #8
 8005a40:	619a      	str	r2, [r3, #24]
}
 8005a42:	bf00      	nop
 8005a44:	37a0      	adds	r7, #160	; 0xa0
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	080052f9 	.word	0x080052f9

08005a50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e027      	b.n	8005ab6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2224      	movs	r2, #36	; 0x24
 8005a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e02d      	b.n	8005b36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2224      	movs	r2, #36	; 0x24
 8005ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0201 	bic.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f850 	bl	8005bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e02d      	b.n	8005bb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2224      	movs	r2, #36	; 0x24
 8005b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0201 	bic.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f812 	bl	8005bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d108      	bne.n	8005bde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bdc:	e031      	b.n	8005c42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bde:	2308      	movs	r3, #8
 8005be0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005be2:	2308      	movs	r3, #8
 8005be4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	0e5b      	lsrs	r3, r3, #25
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	0f5b      	lsrs	r3, r3, #29
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	7b3a      	ldrb	r2, [r7, #12]
 8005c0a:	4911      	ldr	r1, [pc, #68]	; (8005c50 <UARTEx_SetNbDataToProcess+0x94>)
 8005c0c:	5c8a      	ldrb	r2, [r1, r2]
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c12:	7b3a      	ldrb	r2, [r7, #12]
 8005c14:	490f      	ldr	r1, [pc, #60]	; (8005c54 <UARTEx_SetNbDataToProcess+0x98>)
 8005c16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c18:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	7b7a      	ldrb	r2, [r7, #13]
 8005c28:	4909      	ldr	r1, [pc, #36]	; (8005c50 <UARTEx_SetNbDataToProcess+0x94>)
 8005c2a:	5c8a      	ldrb	r2, [r1, r2]
 8005c2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c30:	7b7a      	ldrb	r2, [r7, #13]
 8005c32:	4908      	ldr	r1, [pc, #32]	; (8005c54 <UARTEx_SetNbDataToProcess+0x98>)
 8005c34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c36:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	08008afc 	.word	0x08008afc
 8005c54:	08008b04 	.word	0x08008b04

08005c58 <read_keypad>:
//    HAL_GPIO_Init(col_ports[i], &GPIO_InitStruct);
//  }
//}

int read_keypad(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
  int key = -1; // 默认未按下按键
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c62:	60fb      	str	r3, [r7, #12]

  // 扫描行
  for (int i = 0; i < ROWS; i++) {
 8005c64:	2300      	movs	r3, #0
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	e04b      	b.n	8005d02 <read_keypad+0xaa>
    HAL_GPIO_WritePin(col_ports[i], col_pins[i], GPIO_PIN_RESET); // 将列引脚置低
 8005c6a:	4a2a      	ldr	r2, [pc, #168]	; (8005d14 <read_keypad+0xbc>)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005c72:	4a29      	ldr	r2, [pc, #164]	; (8005d18 <read_keypad+0xc0>)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	f7fc f931 	bl	8001ee4 <HAL_GPIO_WritePin>
    for (int j = 0; j < COLS; j++) {
 8005c82:	2300      	movs	r3, #0
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	e02a      	b.n	8005cde <read_keypad+0x86>
      if (HAL_GPIO_ReadPin(row_ports[j], row_pins[j]) == GPIO_PIN_RESET) { // 检测行引脚是否被拉低
 8005c88:	4a24      	ldr	r2, [pc, #144]	; (8005d1c <read_keypad+0xc4>)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c90:	4923      	ldr	r1, [pc, #140]	; (8005d20 <read_keypad+0xc8>)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f7fc f90a 	bl	8001eb4 <HAL_GPIO_ReadPin>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d118      	bne.n	8005cd8 <read_keypad+0x80>
    	HAL_Delay(10);
 8005ca6:	200a      	movs	r0, #10
 8005ca8:	f7fb fe3c 	bl	8001924 <HAL_Delay>
        while (HAL_GPIO_ReadPin(row_ports[j], row_pins[j]) == GPIO_PIN_RESET);
 8005cac:	bf00      	nop
 8005cae:	4a1b      	ldr	r2, [pc, #108]	; (8005d1c <read_keypad+0xc4>)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005cb6:	491a      	ldr	r1, [pc, #104]	; (8005d20 <read_keypad+0xc8>)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f7fc f8f7 	bl	8001eb4 <HAL_GPIO_ReadPin>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f0      	beq.n	8005cae <read_keypad+0x56>
        //key = i * COLS + j; // 计算按键的索引
        key = j * ROWS + i;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
        break;
 8005cd6:	e005      	b.n	8005ce4 <read_keypad+0x8c>
    for (int j = 0; j < COLS; j++) {
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	607b      	str	r3, [r7, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	ddd1      	ble.n	8005c88 <read_keypad+0x30>
      }
    }
    HAL_GPIO_WritePin(col_ports[i], col_pins[i], GPIO_PIN_SET); // 恢复列引脚高电平
 8005ce4:	4a0b      	ldr	r2, [pc, #44]	; (8005d14 <read_keypad+0xbc>)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005cec:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <read_keypad+0xc0>)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	f7fc f8f4 	bl	8001ee4 <HAL_GPIO_WritePin>
  for (int i = 0; i < ROWS; i++) {
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60bb      	str	r3, [r7, #8]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	ddb0      	ble.n	8005c6a <read_keypad+0x12>
  }

  return key;
 8005d08:	68fb      	ldr	r3, [r7, #12]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000024 	.word	0x20000024
 8005d18:	20000034 	.word	0x20000034
 8005d1c:	2000000c 	.word	0x2000000c
 8005d20:	2000001c 	.word	0x2000001c

08005d24 <StepMotor>:
// 定义电机的当前状态
volatile bool motor_running = false;

// 向步进电机发送下一个步进脉冲
void StepMotor(bool forward)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	71fb      	strb	r3, [r7, #7]
  static uint8_t sequence_index = 0;
  if (forward)
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <StepMotor+0x24>
  {
    sequence_index = (sequence_index + 1) & 0x07;
 8005d34:	4b26      	ldr	r3, [pc, #152]	; (8005dd0 <StepMotor+0xac>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	4b23      	ldr	r3, [pc, #140]	; (8005dd0 <StepMotor+0xac>)
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	e008      	b.n	8005d5a <StepMotor+0x36>
  }
  else
  {
    sequence_index = (sequence_index - 1) & 0x07;
 8005d48:	4b21      	ldr	r3, [pc, #132]	; (8005dd0 <StepMotor+0xac>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <StepMotor+0xac>)
 8005d58:	701a      	strb	r2, [r3, #0]
  }
  uint8_t sequence = StepSequence[sequence_index];
 8005d5a:	4b1d      	ldr	r3, [pc, #116]	; (8005dd0 <StepMotor+0xac>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <StepMotor+0xb0>)
 8005d62:	5c9b      	ldrb	r3, [r3, r2]
 8005d64:	73fb      	strb	r3, [r7, #15]

  // 控制ULN2003的引脚
  HAL_GPIO_WritePin(GPIOD, IN1_PIN, (sequence & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	2101      	movs	r1, #1
 8005d72:	4819      	ldr	r0, [pc, #100]	; (8005dd8 <StepMotor+0xb4>)
 8005d74:	f7fc f8b6 	bl	8001ee4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, IN2_PIN, (sequence & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	105b      	asrs	r3, r3, #1
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d8a:	4813      	ldr	r0, [pc, #76]	; (8005dd8 <StepMotor+0xb4>)
 8005d8c:	f7fc f8aa 	bl	8001ee4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, IN3_PIN, (sequence & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	109b      	asrs	r3, r3, #2
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005da2:	480d      	ldr	r0, [pc, #52]	; (8005dd8 <StepMotor+0xb4>)
 8005da4:	f7fc f89e 	bl	8001ee4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, IN4_PIN, (sequence & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	10db      	asrs	r3, r3, #3
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dba:	4807      	ldr	r0, [pc, #28]	; (8005dd8 <StepMotor+0xb4>)
 8005dbc:	f7fc f892 	bl	8001ee4 <HAL_GPIO_WritePin>

  // 延迟一段时间
  HAL_Delay(STEP_DELAY_MS);
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	f7fb fdaf 	bl	8001924 <HAL_Delay>
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000381 	.word	0x20000381
 8005dd4:	08008b0c 	.word	0x08008b0c
 8005dd8:	48000c00 	.word	0x48000c00

08005ddc <StopMotor>:
  }
}

// 停止电机
void StopMotor()
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  motor_running = false;
 8005de0:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <StopMotor+0x14>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	701a      	strb	r2, [r3, #0]
}
 8005de6:	bf00      	nop
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	20000380 	.word	0x20000380

08005df4 <Forward_turn_step>:
// 反转函数
void Reverse()
{
  StartMotor(false);
}
void Forward_turn_step(int step){
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  while (step--)
 8005dfc:	e002      	b.n	8005e04 <Forward_turn_step+0x10>
  {
    StepMotor(true);
 8005dfe:	2001      	movs	r0, #1
 8005e00:	f7ff ff90 	bl	8005d24 <StepMotor>
  while (step--)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	1e5a      	subs	r2, r3, #1
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f7      	bne.n	8005dfe <Forward_turn_step+0xa>
  }
}
 8005e0e:	bf00      	nop
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <Reverse_turn_step>:
void Reverse_turn_step(int step){
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  while (step--)
 8005e20:	e002      	b.n	8005e28 <Reverse_turn_step+0x10>
  {
    StepMotor(false);
 8005e22:	2000      	movs	r0, #0
 8005e24:	f7ff ff7e 	bl	8005d24 <StepMotor>
  while (step--)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	1e5a      	subs	r2, r3, #1
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f7      	bne.n	8005e22 <Reverse_turn_step+0xa>
  }
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <__errno>:
 8005e3c:	4b01      	ldr	r3, [pc, #4]	; (8005e44 <__errno+0x8>)
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	2000003c 	.word	0x2000003c

08005e48 <__libc_init_array>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4d0d      	ldr	r5, [pc, #52]	; (8005e80 <__libc_init_array+0x38>)
 8005e4c:	4c0d      	ldr	r4, [pc, #52]	; (8005e84 <__libc_init_array+0x3c>)
 8005e4e:	1b64      	subs	r4, r4, r5
 8005e50:	10a4      	asrs	r4, r4, #2
 8005e52:	2600      	movs	r6, #0
 8005e54:	42a6      	cmp	r6, r4
 8005e56:	d109      	bne.n	8005e6c <__libc_init_array+0x24>
 8005e58:	4d0b      	ldr	r5, [pc, #44]	; (8005e88 <__libc_init_array+0x40>)
 8005e5a:	4c0c      	ldr	r4, [pc, #48]	; (8005e8c <__libc_init_array+0x44>)
 8005e5c:	f002 fdc2 	bl	80089e4 <_init>
 8005e60:	1b64      	subs	r4, r4, r5
 8005e62:	10a4      	asrs	r4, r4, #2
 8005e64:	2600      	movs	r6, #0
 8005e66:	42a6      	cmp	r6, r4
 8005e68:	d105      	bne.n	8005e76 <__libc_init_array+0x2e>
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e70:	4798      	blx	r3
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7ee      	b.n	8005e54 <__libc_init_array+0xc>
 8005e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7a:	4798      	blx	r3
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	e7f2      	b.n	8005e66 <__libc_init_array+0x1e>
 8005e80:	08008ef4 	.word	0x08008ef4
 8005e84:	08008ef4 	.word	0x08008ef4
 8005e88:	08008ef4 	.word	0x08008ef4
 8005e8c:	08008ef8 	.word	0x08008ef8

08005e90 <memset>:
 8005e90:	4402      	add	r2, r0
 8005e92:	4603      	mov	r3, r0
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d100      	bne.n	8005e9a <memset+0xa>
 8005e98:	4770      	bx	lr
 8005e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9e:	e7f9      	b.n	8005e94 <memset+0x4>

08005ea0 <__cvt>:
 8005ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	ec55 4b10 	vmov	r4, r5, d0
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	460e      	mov	r6, r1
 8005eac:	4619      	mov	r1, r3
 8005eae:	462b      	mov	r3, r5
 8005eb0:	bfbb      	ittet	lt
 8005eb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005eb6:	461d      	movlt	r5, r3
 8005eb8:	2300      	movge	r3, #0
 8005eba:	232d      	movlt	r3, #45	; 0x2d
 8005ebc:	700b      	strb	r3, [r1, #0]
 8005ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ec0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ec4:	4691      	mov	r9, r2
 8005ec6:	f023 0820 	bic.w	r8, r3, #32
 8005eca:	bfbc      	itt	lt
 8005ecc:	4622      	movlt	r2, r4
 8005ece:	4614      	movlt	r4, r2
 8005ed0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ed4:	d005      	beq.n	8005ee2 <__cvt+0x42>
 8005ed6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005eda:	d100      	bne.n	8005ede <__cvt+0x3e>
 8005edc:	3601      	adds	r6, #1
 8005ede:	2102      	movs	r1, #2
 8005ee0:	e000      	b.n	8005ee4 <__cvt+0x44>
 8005ee2:	2103      	movs	r1, #3
 8005ee4:	ab03      	add	r3, sp, #12
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	ab02      	add	r3, sp, #8
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	ec45 4b10 	vmov	d0, r4, r5
 8005ef0:	4653      	mov	r3, sl
 8005ef2:	4632      	mov	r2, r6
 8005ef4:	f000 fe18 	bl	8006b28 <_dtoa_r>
 8005ef8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005efc:	4607      	mov	r7, r0
 8005efe:	d102      	bne.n	8005f06 <__cvt+0x66>
 8005f00:	f019 0f01 	tst.w	r9, #1
 8005f04:	d022      	beq.n	8005f4c <__cvt+0xac>
 8005f06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f0a:	eb07 0906 	add.w	r9, r7, r6
 8005f0e:	d110      	bne.n	8005f32 <__cvt+0x92>
 8005f10:	783b      	ldrb	r3, [r7, #0]
 8005f12:	2b30      	cmp	r3, #48	; 0x30
 8005f14:	d10a      	bne.n	8005f2c <__cvt+0x8c>
 8005f16:	2200      	movs	r2, #0
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	f7fa fdeb 	bl	8000af8 <__aeabi_dcmpeq>
 8005f22:	b918      	cbnz	r0, 8005f2c <__cvt+0x8c>
 8005f24:	f1c6 0601 	rsb	r6, r6, #1
 8005f28:	f8ca 6000 	str.w	r6, [sl]
 8005f2c:	f8da 3000 	ldr.w	r3, [sl]
 8005f30:	4499      	add	r9, r3
 8005f32:	2200      	movs	r2, #0
 8005f34:	2300      	movs	r3, #0
 8005f36:	4620      	mov	r0, r4
 8005f38:	4629      	mov	r1, r5
 8005f3a:	f7fa fddd 	bl	8000af8 <__aeabi_dcmpeq>
 8005f3e:	b108      	cbz	r0, 8005f44 <__cvt+0xa4>
 8005f40:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f44:	2230      	movs	r2, #48	; 0x30
 8005f46:	9b03      	ldr	r3, [sp, #12]
 8005f48:	454b      	cmp	r3, r9
 8005f4a:	d307      	bcc.n	8005f5c <__cvt+0xbc>
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f50:	1bdb      	subs	r3, r3, r7
 8005f52:	4638      	mov	r0, r7
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	b004      	add	sp, #16
 8005f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5c:	1c59      	adds	r1, r3, #1
 8005f5e:	9103      	str	r1, [sp, #12]
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	e7f0      	b.n	8005f46 <__cvt+0xa6>

08005f64 <__exponent>:
 8005f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f66:	4603      	mov	r3, r0
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	bfb8      	it	lt
 8005f6c:	4249      	neglt	r1, r1
 8005f6e:	f803 2b02 	strb.w	r2, [r3], #2
 8005f72:	bfb4      	ite	lt
 8005f74:	222d      	movlt	r2, #45	; 0x2d
 8005f76:	222b      	movge	r2, #43	; 0x2b
 8005f78:	2909      	cmp	r1, #9
 8005f7a:	7042      	strb	r2, [r0, #1]
 8005f7c:	dd2a      	ble.n	8005fd4 <__exponent+0x70>
 8005f7e:	f10d 0407 	add.w	r4, sp, #7
 8005f82:	46a4      	mov	ip, r4
 8005f84:	270a      	movs	r7, #10
 8005f86:	46a6      	mov	lr, r4
 8005f88:	460a      	mov	r2, r1
 8005f8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f8e:	fb07 1516 	mls	r5, r7, r6, r1
 8005f92:	3530      	adds	r5, #48	; 0x30
 8005f94:	2a63      	cmp	r2, #99	; 0x63
 8005f96:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005f9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	dcf1      	bgt.n	8005f86 <__exponent+0x22>
 8005fa2:	3130      	adds	r1, #48	; 0x30
 8005fa4:	f1ae 0502 	sub.w	r5, lr, #2
 8005fa8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005fac:	1c44      	adds	r4, r0, #1
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4561      	cmp	r1, ip
 8005fb2:	d30a      	bcc.n	8005fca <__exponent+0x66>
 8005fb4:	f10d 0209 	add.w	r2, sp, #9
 8005fb8:	eba2 020e 	sub.w	r2, r2, lr
 8005fbc:	4565      	cmp	r5, ip
 8005fbe:	bf88      	it	hi
 8005fc0:	2200      	movhi	r2, #0
 8005fc2:	4413      	add	r3, r2
 8005fc4:	1a18      	subs	r0, r3, r0
 8005fc6:	b003      	add	sp, #12
 8005fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fce:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005fd2:	e7ed      	b.n	8005fb0 <__exponent+0x4c>
 8005fd4:	2330      	movs	r3, #48	; 0x30
 8005fd6:	3130      	adds	r1, #48	; 0x30
 8005fd8:	7083      	strb	r3, [r0, #2]
 8005fda:	70c1      	strb	r1, [r0, #3]
 8005fdc:	1d03      	adds	r3, r0, #4
 8005fde:	e7f1      	b.n	8005fc4 <__exponent+0x60>

08005fe0 <_printf_float>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	ed2d 8b02 	vpush	{d8}
 8005fe8:	b08d      	sub	sp, #52	; 0x34
 8005fea:	460c      	mov	r4, r1
 8005fec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	461f      	mov	r7, r3
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	f001 fd3d 	bl	8007a74 <_localeconv_r>
 8005ffa:	f8d0 a000 	ldr.w	sl, [r0]
 8005ffe:	4650      	mov	r0, sl
 8006000:	f7fa f8fe 	bl	8000200 <strlen>
 8006004:	2300      	movs	r3, #0
 8006006:	930a      	str	r3, [sp, #40]	; 0x28
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	9305      	str	r3, [sp, #20]
 800600c:	f8d8 3000 	ldr.w	r3, [r8]
 8006010:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006014:	3307      	adds	r3, #7
 8006016:	f023 0307 	bic.w	r3, r3, #7
 800601a:	f103 0208 	add.w	r2, r3, #8
 800601e:	f8c8 2000 	str.w	r2, [r8]
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800602a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800602e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006032:	9307      	str	r3, [sp, #28]
 8006034:	f8cd 8018 	str.w	r8, [sp, #24]
 8006038:	ee08 0a10 	vmov	s16, r0
 800603c:	4b9f      	ldr	r3, [pc, #636]	; (80062bc <_printf_float+0x2dc>)
 800603e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006046:	f7fa fd89 	bl	8000b5c <__aeabi_dcmpun>
 800604a:	bb88      	cbnz	r0, 80060b0 <_printf_float+0xd0>
 800604c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006050:	4b9a      	ldr	r3, [pc, #616]	; (80062bc <_printf_float+0x2dc>)
 8006052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006056:	f7fa fd63 	bl	8000b20 <__aeabi_dcmple>
 800605a:	bb48      	cbnz	r0, 80060b0 <_printf_float+0xd0>
 800605c:	2200      	movs	r2, #0
 800605e:	2300      	movs	r3, #0
 8006060:	4640      	mov	r0, r8
 8006062:	4649      	mov	r1, r9
 8006064:	f7fa fd52 	bl	8000b0c <__aeabi_dcmplt>
 8006068:	b110      	cbz	r0, 8006070 <_printf_float+0x90>
 800606a:	232d      	movs	r3, #45	; 0x2d
 800606c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006070:	4b93      	ldr	r3, [pc, #588]	; (80062c0 <_printf_float+0x2e0>)
 8006072:	4894      	ldr	r0, [pc, #592]	; (80062c4 <_printf_float+0x2e4>)
 8006074:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006078:	bf94      	ite	ls
 800607a:	4698      	movls	r8, r3
 800607c:	4680      	movhi	r8, r0
 800607e:	2303      	movs	r3, #3
 8006080:	6123      	str	r3, [r4, #16]
 8006082:	9b05      	ldr	r3, [sp, #20]
 8006084:	f023 0204 	bic.w	r2, r3, #4
 8006088:	6022      	str	r2, [r4, #0]
 800608a:	f04f 0900 	mov.w	r9, #0
 800608e:	9700      	str	r7, [sp, #0]
 8006090:	4633      	mov	r3, r6
 8006092:	aa0b      	add	r2, sp, #44	; 0x2c
 8006094:	4621      	mov	r1, r4
 8006096:	4628      	mov	r0, r5
 8006098:	f000 f9d8 	bl	800644c <_printf_common>
 800609c:	3001      	adds	r0, #1
 800609e:	f040 8090 	bne.w	80061c2 <_printf_float+0x1e2>
 80060a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a6:	b00d      	add	sp, #52	; 0x34
 80060a8:	ecbd 8b02 	vpop	{d8}
 80060ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	4640      	mov	r0, r8
 80060b6:	4649      	mov	r1, r9
 80060b8:	f7fa fd50 	bl	8000b5c <__aeabi_dcmpun>
 80060bc:	b140      	cbz	r0, 80060d0 <_printf_float+0xf0>
 80060be:	464b      	mov	r3, r9
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bfbc      	itt	lt
 80060c4:	232d      	movlt	r3, #45	; 0x2d
 80060c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80060ca:	487f      	ldr	r0, [pc, #508]	; (80062c8 <_printf_float+0x2e8>)
 80060cc:	4b7f      	ldr	r3, [pc, #508]	; (80062cc <_printf_float+0x2ec>)
 80060ce:	e7d1      	b.n	8006074 <_printf_float+0x94>
 80060d0:	6863      	ldr	r3, [r4, #4]
 80060d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80060d6:	9206      	str	r2, [sp, #24]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	d13f      	bne.n	800615c <_printf_float+0x17c>
 80060dc:	2306      	movs	r3, #6
 80060de:	6063      	str	r3, [r4, #4]
 80060e0:	9b05      	ldr	r3, [sp, #20]
 80060e2:	6861      	ldr	r1, [r4, #4]
 80060e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80060e8:	2300      	movs	r3, #0
 80060ea:	9303      	str	r3, [sp, #12]
 80060ec:	ab0a      	add	r3, sp, #40	; 0x28
 80060ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80060f2:	ab09      	add	r3, sp, #36	; 0x24
 80060f4:	ec49 8b10 	vmov	d0, r8, r9
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	6022      	str	r2, [r4, #0]
 80060fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006100:	4628      	mov	r0, r5
 8006102:	f7ff fecd 	bl	8005ea0 <__cvt>
 8006106:	9b06      	ldr	r3, [sp, #24]
 8006108:	9909      	ldr	r1, [sp, #36]	; 0x24
 800610a:	2b47      	cmp	r3, #71	; 0x47
 800610c:	4680      	mov	r8, r0
 800610e:	d108      	bne.n	8006122 <_printf_float+0x142>
 8006110:	1cc8      	adds	r0, r1, #3
 8006112:	db02      	blt.n	800611a <_printf_float+0x13a>
 8006114:	6863      	ldr	r3, [r4, #4]
 8006116:	4299      	cmp	r1, r3
 8006118:	dd41      	ble.n	800619e <_printf_float+0x1be>
 800611a:	f1ab 0b02 	sub.w	fp, fp, #2
 800611e:	fa5f fb8b 	uxtb.w	fp, fp
 8006122:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006126:	d820      	bhi.n	800616a <_printf_float+0x18a>
 8006128:	3901      	subs	r1, #1
 800612a:	465a      	mov	r2, fp
 800612c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006130:	9109      	str	r1, [sp, #36]	; 0x24
 8006132:	f7ff ff17 	bl	8005f64 <__exponent>
 8006136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006138:	1813      	adds	r3, r2, r0
 800613a:	2a01      	cmp	r2, #1
 800613c:	4681      	mov	r9, r0
 800613e:	6123      	str	r3, [r4, #16]
 8006140:	dc02      	bgt.n	8006148 <_printf_float+0x168>
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	07d2      	lsls	r2, r2, #31
 8006146:	d501      	bpl.n	800614c <_printf_float+0x16c>
 8006148:	3301      	adds	r3, #1
 800614a:	6123      	str	r3, [r4, #16]
 800614c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006150:	2b00      	cmp	r3, #0
 8006152:	d09c      	beq.n	800608e <_printf_float+0xae>
 8006154:	232d      	movs	r3, #45	; 0x2d
 8006156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800615a:	e798      	b.n	800608e <_printf_float+0xae>
 800615c:	9a06      	ldr	r2, [sp, #24]
 800615e:	2a47      	cmp	r2, #71	; 0x47
 8006160:	d1be      	bne.n	80060e0 <_printf_float+0x100>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1bc      	bne.n	80060e0 <_printf_float+0x100>
 8006166:	2301      	movs	r3, #1
 8006168:	e7b9      	b.n	80060de <_printf_float+0xfe>
 800616a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800616e:	d118      	bne.n	80061a2 <_printf_float+0x1c2>
 8006170:	2900      	cmp	r1, #0
 8006172:	6863      	ldr	r3, [r4, #4]
 8006174:	dd0b      	ble.n	800618e <_printf_float+0x1ae>
 8006176:	6121      	str	r1, [r4, #16]
 8006178:	b913      	cbnz	r3, 8006180 <_printf_float+0x1a0>
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	07d0      	lsls	r0, r2, #31
 800617e:	d502      	bpl.n	8006186 <_printf_float+0x1a6>
 8006180:	3301      	adds	r3, #1
 8006182:	440b      	add	r3, r1
 8006184:	6123      	str	r3, [r4, #16]
 8006186:	65a1      	str	r1, [r4, #88]	; 0x58
 8006188:	f04f 0900 	mov.w	r9, #0
 800618c:	e7de      	b.n	800614c <_printf_float+0x16c>
 800618e:	b913      	cbnz	r3, 8006196 <_printf_float+0x1b6>
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	07d2      	lsls	r2, r2, #31
 8006194:	d501      	bpl.n	800619a <_printf_float+0x1ba>
 8006196:	3302      	adds	r3, #2
 8006198:	e7f4      	b.n	8006184 <_printf_float+0x1a4>
 800619a:	2301      	movs	r3, #1
 800619c:	e7f2      	b.n	8006184 <_printf_float+0x1a4>
 800619e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80061a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a4:	4299      	cmp	r1, r3
 80061a6:	db05      	blt.n	80061b4 <_printf_float+0x1d4>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	6121      	str	r1, [r4, #16]
 80061ac:	07d8      	lsls	r0, r3, #31
 80061ae:	d5ea      	bpl.n	8006186 <_printf_float+0x1a6>
 80061b0:	1c4b      	adds	r3, r1, #1
 80061b2:	e7e7      	b.n	8006184 <_printf_float+0x1a4>
 80061b4:	2900      	cmp	r1, #0
 80061b6:	bfd4      	ite	le
 80061b8:	f1c1 0202 	rsble	r2, r1, #2
 80061bc:	2201      	movgt	r2, #1
 80061be:	4413      	add	r3, r2
 80061c0:	e7e0      	b.n	8006184 <_printf_float+0x1a4>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	055a      	lsls	r2, r3, #21
 80061c6:	d407      	bmi.n	80061d8 <_printf_float+0x1f8>
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	4642      	mov	r2, r8
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	d12c      	bne.n	8006230 <_printf_float+0x250>
 80061d6:	e764      	b.n	80060a2 <_printf_float+0xc2>
 80061d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061dc:	f240 80e0 	bls.w	80063a0 <_printf_float+0x3c0>
 80061e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061e4:	2200      	movs	r2, #0
 80061e6:	2300      	movs	r3, #0
 80061e8:	f7fa fc86 	bl	8000af8 <__aeabi_dcmpeq>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d034      	beq.n	800625a <_printf_float+0x27a>
 80061f0:	4a37      	ldr	r2, [pc, #220]	; (80062d0 <_printf_float+0x2f0>)
 80061f2:	2301      	movs	r3, #1
 80061f4:	4631      	mov	r1, r6
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b8      	blx	r7
 80061fa:	3001      	adds	r0, #1
 80061fc:	f43f af51 	beq.w	80060a2 <_printf_float+0xc2>
 8006200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006204:	429a      	cmp	r2, r3
 8006206:	db02      	blt.n	800620e <_printf_float+0x22e>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	07d8      	lsls	r0, r3, #31
 800620c:	d510      	bpl.n	8006230 <_printf_float+0x250>
 800620e:	ee18 3a10 	vmov	r3, s16
 8006212:	4652      	mov	r2, sl
 8006214:	4631      	mov	r1, r6
 8006216:	4628      	mov	r0, r5
 8006218:	47b8      	blx	r7
 800621a:	3001      	adds	r0, #1
 800621c:	f43f af41 	beq.w	80060a2 <_printf_float+0xc2>
 8006220:	f04f 0800 	mov.w	r8, #0
 8006224:	f104 091a 	add.w	r9, r4, #26
 8006228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	4543      	cmp	r3, r8
 800622e:	dc09      	bgt.n	8006244 <_printf_float+0x264>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	079b      	lsls	r3, r3, #30
 8006234:	f100 8105 	bmi.w	8006442 <_printf_float+0x462>
 8006238:	68e0      	ldr	r0, [r4, #12]
 800623a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800623c:	4298      	cmp	r0, r3
 800623e:	bfb8      	it	lt
 8006240:	4618      	movlt	r0, r3
 8006242:	e730      	b.n	80060a6 <_printf_float+0xc6>
 8006244:	2301      	movs	r3, #1
 8006246:	464a      	mov	r2, r9
 8006248:	4631      	mov	r1, r6
 800624a:	4628      	mov	r0, r5
 800624c:	47b8      	blx	r7
 800624e:	3001      	adds	r0, #1
 8006250:	f43f af27 	beq.w	80060a2 <_printf_float+0xc2>
 8006254:	f108 0801 	add.w	r8, r8, #1
 8006258:	e7e6      	b.n	8006228 <_printf_float+0x248>
 800625a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	dc39      	bgt.n	80062d4 <_printf_float+0x2f4>
 8006260:	4a1b      	ldr	r2, [pc, #108]	; (80062d0 <_printf_float+0x2f0>)
 8006262:	2301      	movs	r3, #1
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	f43f af19 	beq.w	80060a2 <_printf_float+0xc2>
 8006270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006274:	4313      	orrs	r3, r2
 8006276:	d102      	bne.n	800627e <_printf_float+0x29e>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	07d9      	lsls	r1, r3, #31
 800627c:	d5d8      	bpl.n	8006230 <_printf_float+0x250>
 800627e:	ee18 3a10 	vmov	r3, s16
 8006282:	4652      	mov	r2, sl
 8006284:	4631      	mov	r1, r6
 8006286:	4628      	mov	r0, r5
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	f43f af09 	beq.w	80060a2 <_printf_float+0xc2>
 8006290:	f04f 0900 	mov.w	r9, #0
 8006294:	f104 0a1a 	add.w	sl, r4, #26
 8006298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629a:	425b      	negs	r3, r3
 800629c:	454b      	cmp	r3, r9
 800629e:	dc01      	bgt.n	80062a4 <_printf_float+0x2c4>
 80062a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a2:	e792      	b.n	80061ca <_printf_float+0x1ea>
 80062a4:	2301      	movs	r3, #1
 80062a6:	4652      	mov	r2, sl
 80062a8:	4631      	mov	r1, r6
 80062aa:	4628      	mov	r0, r5
 80062ac:	47b8      	blx	r7
 80062ae:	3001      	adds	r0, #1
 80062b0:	f43f aef7 	beq.w	80060a2 <_printf_float+0xc2>
 80062b4:	f109 0901 	add.w	r9, r9, #1
 80062b8:	e7ee      	b.n	8006298 <_printf_float+0x2b8>
 80062ba:	bf00      	nop
 80062bc:	7fefffff 	.word	0x7fefffff
 80062c0:	08008b18 	.word	0x08008b18
 80062c4:	08008b1c 	.word	0x08008b1c
 80062c8:	08008b24 	.word	0x08008b24
 80062cc:	08008b20 	.word	0x08008b20
 80062d0:	08008b28 	.word	0x08008b28
 80062d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062d8:	429a      	cmp	r2, r3
 80062da:	bfa8      	it	ge
 80062dc:	461a      	movge	r2, r3
 80062de:	2a00      	cmp	r2, #0
 80062e0:	4691      	mov	r9, r2
 80062e2:	dc37      	bgt.n	8006354 <_printf_float+0x374>
 80062e4:	f04f 0b00 	mov.w	fp, #0
 80062e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ec:	f104 021a 	add.w	r2, r4, #26
 80062f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	eba3 0309 	sub.w	r3, r3, r9
 80062f8:	455b      	cmp	r3, fp
 80062fa:	dc33      	bgt.n	8006364 <_printf_float+0x384>
 80062fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006300:	429a      	cmp	r2, r3
 8006302:	db3b      	blt.n	800637c <_printf_float+0x39c>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	07da      	lsls	r2, r3, #31
 8006308:	d438      	bmi.n	800637c <_printf_float+0x39c>
 800630a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630c:	9a05      	ldr	r2, [sp, #20]
 800630e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006310:	1a9a      	subs	r2, r3, r2
 8006312:	eba3 0901 	sub.w	r9, r3, r1
 8006316:	4591      	cmp	r9, r2
 8006318:	bfa8      	it	ge
 800631a:	4691      	movge	r9, r2
 800631c:	f1b9 0f00 	cmp.w	r9, #0
 8006320:	dc35      	bgt.n	800638e <_printf_float+0x3ae>
 8006322:	f04f 0800 	mov.w	r8, #0
 8006326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800632a:	f104 0a1a 	add.w	sl, r4, #26
 800632e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	eba3 0309 	sub.w	r3, r3, r9
 8006338:	4543      	cmp	r3, r8
 800633a:	f77f af79 	ble.w	8006230 <_printf_float+0x250>
 800633e:	2301      	movs	r3, #1
 8006340:	4652      	mov	r2, sl
 8006342:	4631      	mov	r1, r6
 8006344:	4628      	mov	r0, r5
 8006346:	47b8      	blx	r7
 8006348:	3001      	adds	r0, #1
 800634a:	f43f aeaa 	beq.w	80060a2 <_printf_float+0xc2>
 800634e:	f108 0801 	add.w	r8, r8, #1
 8006352:	e7ec      	b.n	800632e <_printf_float+0x34e>
 8006354:	4613      	mov	r3, r2
 8006356:	4631      	mov	r1, r6
 8006358:	4642      	mov	r2, r8
 800635a:	4628      	mov	r0, r5
 800635c:	47b8      	blx	r7
 800635e:	3001      	adds	r0, #1
 8006360:	d1c0      	bne.n	80062e4 <_printf_float+0x304>
 8006362:	e69e      	b.n	80060a2 <_printf_float+0xc2>
 8006364:	2301      	movs	r3, #1
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	9205      	str	r2, [sp, #20]
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	f43f ae97 	beq.w	80060a2 <_printf_float+0xc2>
 8006374:	9a05      	ldr	r2, [sp, #20]
 8006376:	f10b 0b01 	add.w	fp, fp, #1
 800637a:	e7b9      	b.n	80062f0 <_printf_float+0x310>
 800637c:	ee18 3a10 	vmov	r3, s16
 8006380:	4652      	mov	r2, sl
 8006382:	4631      	mov	r1, r6
 8006384:	4628      	mov	r0, r5
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	d1be      	bne.n	800630a <_printf_float+0x32a>
 800638c:	e689      	b.n	80060a2 <_printf_float+0xc2>
 800638e:	9a05      	ldr	r2, [sp, #20]
 8006390:	464b      	mov	r3, r9
 8006392:	4442      	add	r2, r8
 8006394:	4631      	mov	r1, r6
 8006396:	4628      	mov	r0, r5
 8006398:	47b8      	blx	r7
 800639a:	3001      	adds	r0, #1
 800639c:	d1c1      	bne.n	8006322 <_printf_float+0x342>
 800639e:	e680      	b.n	80060a2 <_printf_float+0xc2>
 80063a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063a2:	2a01      	cmp	r2, #1
 80063a4:	dc01      	bgt.n	80063aa <_printf_float+0x3ca>
 80063a6:	07db      	lsls	r3, r3, #31
 80063a8:	d538      	bpl.n	800641c <_printf_float+0x43c>
 80063aa:	2301      	movs	r3, #1
 80063ac:	4642      	mov	r2, r8
 80063ae:	4631      	mov	r1, r6
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b8      	blx	r7
 80063b4:	3001      	adds	r0, #1
 80063b6:	f43f ae74 	beq.w	80060a2 <_printf_float+0xc2>
 80063ba:	ee18 3a10 	vmov	r3, s16
 80063be:	4652      	mov	r2, sl
 80063c0:	4631      	mov	r1, r6
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b8      	blx	r7
 80063c6:	3001      	adds	r0, #1
 80063c8:	f43f ae6b 	beq.w	80060a2 <_printf_float+0xc2>
 80063cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063d0:	2200      	movs	r2, #0
 80063d2:	2300      	movs	r3, #0
 80063d4:	f7fa fb90 	bl	8000af8 <__aeabi_dcmpeq>
 80063d8:	b9d8      	cbnz	r0, 8006412 <_printf_float+0x432>
 80063da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063dc:	f108 0201 	add.w	r2, r8, #1
 80063e0:	3b01      	subs	r3, #1
 80063e2:	4631      	mov	r1, r6
 80063e4:	4628      	mov	r0, r5
 80063e6:	47b8      	blx	r7
 80063e8:	3001      	adds	r0, #1
 80063ea:	d10e      	bne.n	800640a <_printf_float+0x42a>
 80063ec:	e659      	b.n	80060a2 <_printf_float+0xc2>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4652      	mov	r2, sl
 80063f2:	4631      	mov	r1, r6
 80063f4:	4628      	mov	r0, r5
 80063f6:	47b8      	blx	r7
 80063f8:	3001      	adds	r0, #1
 80063fa:	f43f ae52 	beq.w	80060a2 <_printf_float+0xc2>
 80063fe:	f108 0801 	add.w	r8, r8, #1
 8006402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006404:	3b01      	subs	r3, #1
 8006406:	4543      	cmp	r3, r8
 8006408:	dcf1      	bgt.n	80063ee <_printf_float+0x40e>
 800640a:	464b      	mov	r3, r9
 800640c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006410:	e6dc      	b.n	80061cc <_printf_float+0x1ec>
 8006412:	f04f 0800 	mov.w	r8, #0
 8006416:	f104 0a1a 	add.w	sl, r4, #26
 800641a:	e7f2      	b.n	8006402 <_printf_float+0x422>
 800641c:	2301      	movs	r3, #1
 800641e:	4642      	mov	r2, r8
 8006420:	e7df      	b.n	80063e2 <_printf_float+0x402>
 8006422:	2301      	movs	r3, #1
 8006424:	464a      	mov	r2, r9
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	47b8      	blx	r7
 800642c:	3001      	adds	r0, #1
 800642e:	f43f ae38 	beq.w	80060a2 <_printf_float+0xc2>
 8006432:	f108 0801 	add.w	r8, r8, #1
 8006436:	68e3      	ldr	r3, [r4, #12]
 8006438:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800643a:	1a5b      	subs	r3, r3, r1
 800643c:	4543      	cmp	r3, r8
 800643e:	dcf0      	bgt.n	8006422 <_printf_float+0x442>
 8006440:	e6fa      	b.n	8006238 <_printf_float+0x258>
 8006442:	f04f 0800 	mov.w	r8, #0
 8006446:	f104 0919 	add.w	r9, r4, #25
 800644a:	e7f4      	b.n	8006436 <_printf_float+0x456>

0800644c <_printf_common>:
 800644c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	4616      	mov	r6, r2
 8006452:	4699      	mov	r9, r3
 8006454:	688a      	ldr	r2, [r1, #8]
 8006456:	690b      	ldr	r3, [r1, #16]
 8006458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800645c:	4293      	cmp	r3, r2
 800645e:	bfb8      	it	lt
 8006460:	4613      	movlt	r3, r2
 8006462:	6033      	str	r3, [r6, #0]
 8006464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006468:	4607      	mov	r7, r0
 800646a:	460c      	mov	r4, r1
 800646c:	b10a      	cbz	r2, 8006472 <_printf_common+0x26>
 800646e:	3301      	adds	r3, #1
 8006470:	6033      	str	r3, [r6, #0]
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	0699      	lsls	r1, r3, #26
 8006476:	bf42      	ittt	mi
 8006478:	6833      	ldrmi	r3, [r6, #0]
 800647a:	3302      	addmi	r3, #2
 800647c:	6033      	strmi	r3, [r6, #0]
 800647e:	6825      	ldr	r5, [r4, #0]
 8006480:	f015 0506 	ands.w	r5, r5, #6
 8006484:	d106      	bne.n	8006494 <_printf_common+0x48>
 8006486:	f104 0a19 	add.w	sl, r4, #25
 800648a:	68e3      	ldr	r3, [r4, #12]
 800648c:	6832      	ldr	r2, [r6, #0]
 800648e:	1a9b      	subs	r3, r3, r2
 8006490:	42ab      	cmp	r3, r5
 8006492:	dc26      	bgt.n	80064e2 <_printf_common+0x96>
 8006494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006498:	1e13      	subs	r3, r2, #0
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	bf18      	it	ne
 800649e:	2301      	movne	r3, #1
 80064a0:	0692      	lsls	r2, r2, #26
 80064a2:	d42b      	bmi.n	80064fc <_printf_common+0xb0>
 80064a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064a8:	4649      	mov	r1, r9
 80064aa:	4638      	mov	r0, r7
 80064ac:	47c0      	blx	r8
 80064ae:	3001      	adds	r0, #1
 80064b0:	d01e      	beq.n	80064f0 <_printf_common+0xa4>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	68e5      	ldr	r5, [r4, #12]
 80064b6:	6832      	ldr	r2, [r6, #0]
 80064b8:	f003 0306 	and.w	r3, r3, #6
 80064bc:	2b04      	cmp	r3, #4
 80064be:	bf08      	it	eq
 80064c0:	1aad      	subeq	r5, r5, r2
 80064c2:	68a3      	ldr	r3, [r4, #8]
 80064c4:	6922      	ldr	r2, [r4, #16]
 80064c6:	bf0c      	ite	eq
 80064c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064cc:	2500      	movne	r5, #0
 80064ce:	4293      	cmp	r3, r2
 80064d0:	bfc4      	itt	gt
 80064d2:	1a9b      	subgt	r3, r3, r2
 80064d4:	18ed      	addgt	r5, r5, r3
 80064d6:	2600      	movs	r6, #0
 80064d8:	341a      	adds	r4, #26
 80064da:	42b5      	cmp	r5, r6
 80064dc:	d11a      	bne.n	8006514 <_printf_common+0xc8>
 80064de:	2000      	movs	r0, #0
 80064e0:	e008      	b.n	80064f4 <_printf_common+0xa8>
 80064e2:	2301      	movs	r3, #1
 80064e4:	4652      	mov	r2, sl
 80064e6:	4649      	mov	r1, r9
 80064e8:	4638      	mov	r0, r7
 80064ea:	47c0      	blx	r8
 80064ec:	3001      	adds	r0, #1
 80064ee:	d103      	bne.n	80064f8 <_printf_common+0xac>
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f8:	3501      	adds	r5, #1
 80064fa:	e7c6      	b.n	800648a <_printf_common+0x3e>
 80064fc:	18e1      	adds	r1, r4, r3
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	2030      	movs	r0, #48	; 0x30
 8006502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006506:	4422      	add	r2, r4
 8006508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800650c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006510:	3302      	adds	r3, #2
 8006512:	e7c7      	b.n	80064a4 <_printf_common+0x58>
 8006514:	2301      	movs	r3, #1
 8006516:	4622      	mov	r2, r4
 8006518:	4649      	mov	r1, r9
 800651a:	4638      	mov	r0, r7
 800651c:	47c0      	blx	r8
 800651e:	3001      	adds	r0, #1
 8006520:	d0e6      	beq.n	80064f0 <_printf_common+0xa4>
 8006522:	3601      	adds	r6, #1
 8006524:	e7d9      	b.n	80064da <_printf_common+0x8e>
	...

08006528 <_printf_i>:
 8006528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	7e0f      	ldrb	r7, [r1, #24]
 800652e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006530:	2f78      	cmp	r7, #120	; 0x78
 8006532:	4691      	mov	r9, r2
 8006534:	4680      	mov	r8, r0
 8006536:	460c      	mov	r4, r1
 8006538:	469a      	mov	sl, r3
 800653a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800653e:	d807      	bhi.n	8006550 <_printf_i+0x28>
 8006540:	2f62      	cmp	r7, #98	; 0x62
 8006542:	d80a      	bhi.n	800655a <_printf_i+0x32>
 8006544:	2f00      	cmp	r7, #0
 8006546:	f000 80d8 	beq.w	80066fa <_printf_i+0x1d2>
 800654a:	2f58      	cmp	r7, #88	; 0x58
 800654c:	f000 80a3 	beq.w	8006696 <_printf_i+0x16e>
 8006550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006558:	e03a      	b.n	80065d0 <_printf_i+0xa8>
 800655a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800655e:	2b15      	cmp	r3, #21
 8006560:	d8f6      	bhi.n	8006550 <_printf_i+0x28>
 8006562:	a101      	add	r1, pc, #4	; (adr r1, 8006568 <_printf_i+0x40>)
 8006564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006568:	080065c1 	.word	0x080065c1
 800656c:	080065d5 	.word	0x080065d5
 8006570:	08006551 	.word	0x08006551
 8006574:	08006551 	.word	0x08006551
 8006578:	08006551 	.word	0x08006551
 800657c:	08006551 	.word	0x08006551
 8006580:	080065d5 	.word	0x080065d5
 8006584:	08006551 	.word	0x08006551
 8006588:	08006551 	.word	0x08006551
 800658c:	08006551 	.word	0x08006551
 8006590:	08006551 	.word	0x08006551
 8006594:	080066e1 	.word	0x080066e1
 8006598:	08006605 	.word	0x08006605
 800659c:	080066c3 	.word	0x080066c3
 80065a0:	08006551 	.word	0x08006551
 80065a4:	08006551 	.word	0x08006551
 80065a8:	08006703 	.word	0x08006703
 80065ac:	08006551 	.word	0x08006551
 80065b0:	08006605 	.word	0x08006605
 80065b4:	08006551 	.word	0x08006551
 80065b8:	08006551 	.word	0x08006551
 80065bc:	080066cb 	.word	0x080066cb
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	1d1a      	adds	r2, r3, #4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	602a      	str	r2, [r5, #0]
 80065c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0a3      	b.n	800671c <_printf_i+0x1f4>
 80065d4:	6820      	ldr	r0, [r4, #0]
 80065d6:	6829      	ldr	r1, [r5, #0]
 80065d8:	0606      	lsls	r6, r0, #24
 80065da:	f101 0304 	add.w	r3, r1, #4
 80065de:	d50a      	bpl.n	80065f6 <_printf_i+0xce>
 80065e0:	680e      	ldr	r6, [r1, #0]
 80065e2:	602b      	str	r3, [r5, #0]
 80065e4:	2e00      	cmp	r6, #0
 80065e6:	da03      	bge.n	80065f0 <_printf_i+0xc8>
 80065e8:	232d      	movs	r3, #45	; 0x2d
 80065ea:	4276      	negs	r6, r6
 80065ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f0:	485e      	ldr	r0, [pc, #376]	; (800676c <_printf_i+0x244>)
 80065f2:	230a      	movs	r3, #10
 80065f4:	e019      	b.n	800662a <_printf_i+0x102>
 80065f6:	680e      	ldr	r6, [r1, #0]
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065fe:	bf18      	it	ne
 8006600:	b236      	sxthne	r6, r6
 8006602:	e7ef      	b.n	80065e4 <_printf_i+0xbc>
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	6820      	ldr	r0, [r4, #0]
 8006608:	1d19      	adds	r1, r3, #4
 800660a:	6029      	str	r1, [r5, #0]
 800660c:	0601      	lsls	r1, r0, #24
 800660e:	d501      	bpl.n	8006614 <_printf_i+0xec>
 8006610:	681e      	ldr	r6, [r3, #0]
 8006612:	e002      	b.n	800661a <_printf_i+0xf2>
 8006614:	0646      	lsls	r6, r0, #25
 8006616:	d5fb      	bpl.n	8006610 <_printf_i+0xe8>
 8006618:	881e      	ldrh	r6, [r3, #0]
 800661a:	4854      	ldr	r0, [pc, #336]	; (800676c <_printf_i+0x244>)
 800661c:	2f6f      	cmp	r7, #111	; 0x6f
 800661e:	bf0c      	ite	eq
 8006620:	2308      	moveq	r3, #8
 8006622:	230a      	movne	r3, #10
 8006624:	2100      	movs	r1, #0
 8006626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800662a:	6865      	ldr	r5, [r4, #4]
 800662c:	60a5      	str	r5, [r4, #8]
 800662e:	2d00      	cmp	r5, #0
 8006630:	bfa2      	ittt	ge
 8006632:	6821      	ldrge	r1, [r4, #0]
 8006634:	f021 0104 	bicge.w	r1, r1, #4
 8006638:	6021      	strge	r1, [r4, #0]
 800663a:	b90e      	cbnz	r6, 8006640 <_printf_i+0x118>
 800663c:	2d00      	cmp	r5, #0
 800663e:	d04d      	beq.n	80066dc <_printf_i+0x1b4>
 8006640:	4615      	mov	r5, r2
 8006642:	fbb6 f1f3 	udiv	r1, r6, r3
 8006646:	fb03 6711 	mls	r7, r3, r1, r6
 800664a:	5dc7      	ldrb	r7, [r0, r7]
 800664c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006650:	4637      	mov	r7, r6
 8006652:	42bb      	cmp	r3, r7
 8006654:	460e      	mov	r6, r1
 8006656:	d9f4      	bls.n	8006642 <_printf_i+0x11a>
 8006658:	2b08      	cmp	r3, #8
 800665a:	d10b      	bne.n	8006674 <_printf_i+0x14c>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	07de      	lsls	r6, r3, #31
 8006660:	d508      	bpl.n	8006674 <_printf_i+0x14c>
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	6861      	ldr	r1, [r4, #4]
 8006666:	4299      	cmp	r1, r3
 8006668:	bfde      	ittt	le
 800666a:	2330      	movle	r3, #48	; 0x30
 800666c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006670:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006674:	1b52      	subs	r2, r2, r5
 8006676:	6122      	str	r2, [r4, #16]
 8006678:	f8cd a000 	str.w	sl, [sp]
 800667c:	464b      	mov	r3, r9
 800667e:	aa03      	add	r2, sp, #12
 8006680:	4621      	mov	r1, r4
 8006682:	4640      	mov	r0, r8
 8006684:	f7ff fee2 	bl	800644c <_printf_common>
 8006688:	3001      	adds	r0, #1
 800668a:	d14c      	bne.n	8006726 <_printf_i+0x1fe>
 800668c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006690:	b004      	add	sp, #16
 8006692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006696:	4835      	ldr	r0, [pc, #212]	; (800676c <_printf_i+0x244>)
 8006698:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800669c:	6829      	ldr	r1, [r5, #0]
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80066a4:	6029      	str	r1, [r5, #0]
 80066a6:	061d      	lsls	r5, r3, #24
 80066a8:	d514      	bpl.n	80066d4 <_printf_i+0x1ac>
 80066aa:	07df      	lsls	r7, r3, #31
 80066ac:	bf44      	itt	mi
 80066ae:	f043 0320 	orrmi.w	r3, r3, #32
 80066b2:	6023      	strmi	r3, [r4, #0]
 80066b4:	b91e      	cbnz	r6, 80066be <_printf_i+0x196>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	f023 0320 	bic.w	r3, r3, #32
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	2310      	movs	r3, #16
 80066c0:	e7b0      	b.n	8006624 <_printf_i+0xfc>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	f043 0320 	orr.w	r3, r3, #32
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	2378      	movs	r3, #120	; 0x78
 80066cc:	4828      	ldr	r0, [pc, #160]	; (8006770 <_printf_i+0x248>)
 80066ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066d2:	e7e3      	b.n	800669c <_printf_i+0x174>
 80066d4:	0659      	lsls	r1, r3, #25
 80066d6:	bf48      	it	mi
 80066d8:	b2b6      	uxthmi	r6, r6
 80066da:	e7e6      	b.n	80066aa <_printf_i+0x182>
 80066dc:	4615      	mov	r5, r2
 80066de:	e7bb      	b.n	8006658 <_printf_i+0x130>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	6826      	ldr	r6, [r4, #0]
 80066e4:	6961      	ldr	r1, [r4, #20]
 80066e6:	1d18      	adds	r0, r3, #4
 80066e8:	6028      	str	r0, [r5, #0]
 80066ea:	0635      	lsls	r5, r6, #24
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	d501      	bpl.n	80066f4 <_printf_i+0x1cc>
 80066f0:	6019      	str	r1, [r3, #0]
 80066f2:	e002      	b.n	80066fa <_printf_i+0x1d2>
 80066f4:	0670      	lsls	r0, r6, #25
 80066f6:	d5fb      	bpl.n	80066f0 <_printf_i+0x1c8>
 80066f8:	8019      	strh	r1, [r3, #0]
 80066fa:	2300      	movs	r3, #0
 80066fc:	6123      	str	r3, [r4, #16]
 80066fe:	4615      	mov	r5, r2
 8006700:	e7ba      	b.n	8006678 <_printf_i+0x150>
 8006702:	682b      	ldr	r3, [r5, #0]
 8006704:	1d1a      	adds	r2, r3, #4
 8006706:	602a      	str	r2, [r5, #0]
 8006708:	681d      	ldr	r5, [r3, #0]
 800670a:	6862      	ldr	r2, [r4, #4]
 800670c:	2100      	movs	r1, #0
 800670e:	4628      	mov	r0, r5
 8006710:	f7f9 fd7e 	bl	8000210 <memchr>
 8006714:	b108      	cbz	r0, 800671a <_printf_i+0x1f2>
 8006716:	1b40      	subs	r0, r0, r5
 8006718:	6060      	str	r0, [r4, #4]
 800671a:	6863      	ldr	r3, [r4, #4]
 800671c:	6123      	str	r3, [r4, #16]
 800671e:	2300      	movs	r3, #0
 8006720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006724:	e7a8      	b.n	8006678 <_printf_i+0x150>
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	462a      	mov	r2, r5
 800672a:	4649      	mov	r1, r9
 800672c:	4640      	mov	r0, r8
 800672e:	47d0      	blx	sl
 8006730:	3001      	adds	r0, #1
 8006732:	d0ab      	beq.n	800668c <_printf_i+0x164>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	079b      	lsls	r3, r3, #30
 8006738:	d413      	bmi.n	8006762 <_printf_i+0x23a>
 800673a:	68e0      	ldr	r0, [r4, #12]
 800673c:	9b03      	ldr	r3, [sp, #12]
 800673e:	4298      	cmp	r0, r3
 8006740:	bfb8      	it	lt
 8006742:	4618      	movlt	r0, r3
 8006744:	e7a4      	b.n	8006690 <_printf_i+0x168>
 8006746:	2301      	movs	r3, #1
 8006748:	4632      	mov	r2, r6
 800674a:	4649      	mov	r1, r9
 800674c:	4640      	mov	r0, r8
 800674e:	47d0      	blx	sl
 8006750:	3001      	adds	r0, #1
 8006752:	d09b      	beq.n	800668c <_printf_i+0x164>
 8006754:	3501      	adds	r5, #1
 8006756:	68e3      	ldr	r3, [r4, #12]
 8006758:	9903      	ldr	r1, [sp, #12]
 800675a:	1a5b      	subs	r3, r3, r1
 800675c:	42ab      	cmp	r3, r5
 800675e:	dcf2      	bgt.n	8006746 <_printf_i+0x21e>
 8006760:	e7eb      	b.n	800673a <_printf_i+0x212>
 8006762:	2500      	movs	r5, #0
 8006764:	f104 0619 	add.w	r6, r4, #25
 8006768:	e7f5      	b.n	8006756 <_printf_i+0x22e>
 800676a:	bf00      	nop
 800676c:	08008b2a 	.word	0x08008b2a
 8006770:	08008b3b 	.word	0x08008b3b

08006774 <iprintf>:
 8006774:	b40f      	push	{r0, r1, r2, r3}
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <iprintf+0x2c>)
 8006778:	b513      	push	{r0, r1, r4, lr}
 800677a:	681c      	ldr	r4, [r3, #0]
 800677c:	b124      	cbz	r4, 8006788 <iprintf+0x14>
 800677e:	69a3      	ldr	r3, [r4, #24]
 8006780:	b913      	cbnz	r3, 8006788 <iprintf+0x14>
 8006782:	4620      	mov	r0, r4
 8006784:	f001 f8d8 	bl	8007938 <__sinit>
 8006788:	ab05      	add	r3, sp, #20
 800678a:	9a04      	ldr	r2, [sp, #16]
 800678c:	68a1      	ldr	r1, [r4, #8]
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	4620      	mov	r0, r4
 8006792:	f001 fe95 	bl	80084c0 <_vfiprintf_r>
 8006796:	b002      	add	sp, #8
 8006798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800679c:	b004      	add	sp, #16
 800679e:	4770      	bx	lr
 80067a0:	2000003c 	.word	0x2000003c

080067a4 <_puts_r>:
 80067a4:	b570      	push	{r4, r5, r6, lr}
 80067a6:	460e      	mov	r6, r1
 80067a8:	4605      	mov	r5, r0
 80067aa:	b118      	cbz	r0, 80067b4 <_puts_r+0x10>
 80067ac:	6983      	ldr	r3, [r0, #24]
 80067ae:	b90b      	cbnz	r3, 80067b4 <_puts_r+0x10>
 80067b0:	f001 f8c2 	bl	8007938 <__sinit>
 80067b4:	69ab      	ldr	r3, [r5, #24]
 80067b6:	68ac      	ldr	r4, [r5, #8]
 80067b8:	b913      	cbnz	r3, 80067c0 <_puts_r+0x1c>
 80067ba:	4628      	mov	r0, r5
 80067bc:	f001 f8bc 	bl	8007938 <__sinit>
 80067c0:	4b2c      	ldr	r3, [pc, #176]	; (8006874 <_puts_r+0xd0>)
 80067c2:	429c      	cmp	r4, r3
 80067c4:	d120      	bne.n	8006808 <_puts_r+0x64>
 80067c6:	686c      	ldr	r4, [r5, #4]
 80067c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067ca:	07db      	lsls	r3, r3, #31
 80067cc:	d405      	bmi.n	80067da <_puts_r+0x36>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	0598      	lsls	r0, r3, #22
 80067d2:	d402      	bmi.n	80067da <_puts_r+0x36>
 80067d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d6:	f001 f952 	bl	8007a7e <__retarget_lock_acquire_recursive>
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	0719      	lsls	r1, r3, #28
 80067de:	d51d      	bpl.n	800681c <_puts_r+0x78>
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	b1db      	cbz	r3, 800681c <_puts_r+0x78>
 80067e4:	3e01      	subs	r6, #1
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067ec:	3b01      	subs	r3, #1
 80067ee:	60a3      	str	r3, [r4, #8]
 80067f0:	bb39      	cbnz	r1, 8006842 <_puts_r+0x9e>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da38      	bge.n	8006868 <_puts_r+0xc4>
 80067f6:	4622      	mov	r2, r4
 80067f8:	210a      	movs	r1, #10
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 f848 	bl	8006890 <__swbuf_r>
 8006800:	3001      	adds	r0, #1
 8006802:	d011      	beq.n	8006828 <_puts_r+0x84>
 8006804:	250a      	movs	r5, #10
 8006806:	e011      	b.n	800682c <_puts_r+0x88>
 8006808:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <_puts_r+0xd4>)
 800680a:	429c      	cmp	r4, r3
 800680c:	d101      	bne.n	8006812 <_puts_r+0x6e>
 800680e:	68ac      	ldr	r4, [r5, #8]
 8006810:	e7da      	b.n	80067c8 <_puts_r+0x24>
 8006812:	4b1a      	ldr	r3, [pc, #104]	; (800687c <_puts_r+0xd8>)
 8006814:	429c      	cmp	r4, r3
 8006816:	bf08      	it	eq
 8006818:	68ec      	ldreq	r4, [r5, #12]
 800681a:	e7d5      	b.n	80067c8 <_puts_r+0x24>
 800681c:	4621      	mov	r1, r4
 800681e:	4628      	mov	r0, r5
 8006820:	f000 f888 	bl	8006934 <__swsetup_r>
 8006824:	2800      	cmp	r0, #0
 8006826:	d0dd      	beq.n	80067e4 <_puts_r+0x40>
 8006828:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800682c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800682e:	07da      	lsls	r2, r3, #31
 8006830:	d405      	bmi.n	800683e <_puts_r+0x9a>
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	059b      	lsls	r3, r3, #22
 8006836:	d402      	bmi.n	800683e <_puts_r+0x9a>
 8006838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800683a:	f001 f921 	bl	8007a80 <__retarget_lock_release_recursive>
 800683e:	4628      	mov	r0, r5
 8006840:	bd70      	pop	{r4, r5, r6, pc}
 8006842:	2b00      	cmp	r3, #0
 8006844:	da04      	bge.n	8006850 <_puts_r+0xac>
 8006846:	69a2      	ldr	r2, [r4, #24]
 8006848:	429a      	cmp	r2, r3
 800684a:	dc06      	bgt.n	800685a <_puts_r+0xb6>
 800684c:	290a      	cmp	r1, #10
 800684e:	d004      	beq.n	800685a <_puts_r+0xb6>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	6022      	str	r2, [r4, #0]
 8006856:	7019      	strb	r1, [r3, #0]
 8006858:	e7c5      	b.n	80067e6 <_puts_r+0x42>
 800685a:	4622      	mov	r2, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f000 f817 	bl	8006890 <__swbuf_r>
 8006862:	3001      	adds	r0, #1
 8006864:	d1bf      	bne.n	80067e6 <_puts_r+0x42>
 8006866:	e7df      	b.n	8006828 <_puts_r+0x84>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	250a      	movs	r5, #10
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	6022      	str	r2, [r4, #0]
 8006870:	701d      	strb	r5, [r3, #0]
 8006872:	e7db      	b.n	800682c <_puts_r+0x88>
 8006874:	08008bfc 	.word	0x08008bfc
 8006878:	08008c1c 	.word	0x08008c1c
 800687c:	08008bdc 	.word	0x08008bdc

08006880 <puts>:
 8006880:	4b02      	ldr	r3, [pc, #8]	; (800688c <puts+0xc>)
 8006882:	4601      	mov	r1, r0
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	f7ff bf8d 	b.w	80067a4 <_puts_r>
 800688a:	bf00      	nop
 800688c:	2000003c 	.word	0x2000003c

08006890 <__swbuf_r>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	460e      	mov	r6, r1
 8006894:	4614      	mov	r4, r2
 8006896:	4605      	mov	r5, r0
 8006898:	b118      	cbz	r0, 80068a2 <__swbuf_r+0x12>
 800689a:	6983      	ldr	r3, [r0, #24]
 800689c:	b90b      	cbnz	r3, 80068a2 <__swbuf_r+0x12>
 800689e:	f001 f84b 	bl	8007938 <__sinit>
 80068a2:	4b21      	ldr	r3, [pc, #132]	; (8006928 <__swbuf_r+0x98>)
 80068a4:	429c      	cmp	r4, r3
 80068a6:	d12b      	bne.n	8006900 <__swbuf_r+0x70>
 80068a8:	686c      	ldr	r4, [r5, #4]
 80068aa:	69a3      	ldr	r3, [r4, #24]
 80068ac:	60a3      	str	r3, [r4, #8]
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	071a      	lsls	r2, r3, #28
 80068b2:	d52f      	bpl.n	8006914 <__swbuf_r+0x84>
 80068b4:	6923      	ldr	r3, [r4, #16]
 80068b6:	b36b      	cbz	r3, 8006914 <__swbuf_r+0x84>
 80068b8:	6923      	ldr	r3, [r4, #16]
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	1ac0      	subs	r0, r0, r3
 80068be:	6963      	ldr	r3, [r4, #20]
 80068c0:	b2f6      	uxtb	r6, r6
 80068c2:	4283      	cmp	r3, r0
 80068c4:	4637      	mov	r7, r6
 80068c6:	dc04      	bgt.n	80068d2 <__swbuf_r+0x42>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 ffa0 	bl	8007810 <_fflush_r>
 80068d0:	bb30      	cbnz	r0, 8006920 <__swbuf_r+0x90>
 80068d2:	68a3      	ldr	r3, [r4, #8]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	60a3      	str	r3, [r4, #8]
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	6022      	str	r2, [r4, #0]
 80068de:	701e      	strb	r6, [r3, #0]
 80068e0:	6963      	ldr	r3, [r4, #20]
 80068e2:	3001      	adds	r0, #1
 80068e4:	4283      	cmp	r3, r0
 80068e6:	d004      	beq.n	80068f2 <__swbuf_r+0x62>
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	07db      	lsls	r3, r3, #31
 80068ec:	d506      	bpl.n	80068fc <__swbuf_r+0x6c>
 80068ee:	2e0a      	cmp	r6, #10
 80068f0:	d104      	bne.n	80068fc <__swbuf_r+0x6c>
 80068f2:	4621      	mov	r1, r4
 80068f4:	4628      	mov	r0, r5
 80068f6:	f000 ff8b 	bl	8007810 <_fflush_r>
 80068fa:	b988      	cbnz	r0, 8006920 <__swbuf_r+0x90>
 80068fc:	4638      	mov	r0, r7
 80068fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <__swbuf_r+0x9c>)
 8006902:	429c      	cmp	r4, r3
 8006904:	d101      	bne.n	800690a <__swbuf_r+0x7a>
 8006906:	68ac      	ldr	r4, [r5, #8]
 8006908:	e7cf      	b.n	80068aa <__swbuf_r+0x1a>
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <__swbuf_r+0xa0>)
 800690c:	429c      	cmp	r4, r3
 800690e:	bf08      	it	eq
 8006910:	68ec      	ldreq	r4, [r5, #12]
 8006912:	e7ca      	b.n	80068aa <__swbuf_r+0x1a>
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f80c 	bl	8006934 <__swsetup_r>
 800691c:	2800      	cmp	r0, #0
 800691e:	d0cb      	beq.n	80068b8 <__swbuf_r+0x28>
 8006920:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006924:	e7ea      	b.n	80068fc <__swbuf_r+0x6c>
 8006926:	bf00      	nop
 8006928:	08008bfc 	.word	0x08008bfc
 800692c:	08008c1c 	.word	0x08008c1c
 8006930:	08008bdc 	.word	0x08008bdc

08006934 <__swsetup_r>:
 8006934:	4b32      	ldr	r3, [pc, #200]	; (8006a00 <__swsetup_r+0xcc>)
 8006936:	b570      	push	{r4, r5, r6, lr}
 8006938:	681d      	ldr	r5, [r3, #0]
 800693a:	4606      	mov	r6, r0
 800693c:	460c      	mov	r4, r1
 800693e:	b125      	cbz	r5, 800694a <__swsetup_r+0x16>
 8006940:	69ab      	ldr	r3, [r5, #24]
 8006942:	b913      	cbnz	r3, 800694a <__swsetup_r+0x16>
 8006944:	4628      	mov	r0, r5
 8006946:	f000 fff7 	bl	8007938 <__sinit>
 800694a:	4b2e      	ldr	r3, [pc, #184]	; (8006a04 <__swsetup_r+0xd0>)
 800694c:	429c      	cmp	r4, r3
 800694e:	d10f      	bne.n	8006970 <__swsetup_r+0x3c>
 8006950:	686c      	ldr	r4, [r5, #4]
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006958:	0719      	lsls	r1, r3, #28
 800695a:	d42c      	bmi.n	80069b6 <__swsetup_r+0x82>
 800695c:	06dd      	lsls	r5, r3, #27
 800695e:	d411      	bmi.n	8006984 <__swsetup_r+0x50>
 8006960:	2309      	movs	r3, #9
 8006962:	6033      	str	r3, [r6, #0]
 8006964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800696e:	e03e      	b.n	80069ee <__swsetup_r+0xba>
 8006970:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <__swsetup_r+0xd4>)
 8006972:	429c      	cmp	r4, r3
 8006974:	d101      	bne.n	800697a <__swsetup_r+0x46>
 8006976:	68ac      	ldr	r4, [r5, #8]
 8006978:	e7eb      	b.n	8006952 <__swsetup_r+0x1e>
 800697a:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <__swsetup_r+0xd8>)
 800697c:	429c      	cmp	r4, r3
 800697e:	bf08      	it	eq
 8006980:	68ec      	ldreq	r4, [r5, #12]
 8006982:	e7e6      	b.n	8006952 <__swsetup_r+0x1e>
 8006984:	0758      	lsls	r0, r3, #29
 8006986:	d512      	bpl.n	80069ae <__swsetup_r+0x7a>
 8006988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800698a:	b141      	cbz	r1, 800699e <__swsetup_r+0x6a>
 800698c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006990:	4299      	cmp	r1, r3
 8006992:	d002      	beq.n	800699a <__swsetup_r+0x66>
 8006994:	4630      	mov	r0, r6
 8006996:	f001 fc89 	bl	80082ac <_free_r>
 800699a:	2300      	movs	r3, #0
 800699c:	6363      	str	r3, [r4, #52]	; 0x34
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	2300      	movs	r3, #0
 80069a8:	6063      	str	r3, [r4, #4]
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	f043 0308 	orr.w	r3, r3, #8
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	b94b      	cbnz	r3, 80069ce <__swsetup_r+0x9a>
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c4:	d003      	beq.n	80069ce <__swsetup_r+0x9a>
 80069c6:	4621      	mov	r1, r4
 80069c8:	4630      	mov	r0, r6
 80069ca:	f001 f87f 	bl	8007acc <__smakebuf_r>
 80069ce:	89a0      	ldrh	r0, [r4, #12]
 80069d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069d4:	f010 0301 	ands.w	r3, r0, #1
 80069d8:	d00a      	beq.n	80069f0 <__swsetup_r+0xbc>
 80069da:	2300      	movs	r3, #0
 80069dc:	60a3      	str	r3, [r4, #8]
 80069de:	6963      	ldr	r3, [r4, #20]
 80069e0:	425b      	negs	r3, r3
 80069e2:	61a3      	str	r3, [r4, #24]
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	b943      	cbnz	r3, 80069fa <__swsetup_r+0xc6>
 80069e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069ec:	d1ba      	bne.n	8006964 <__swsetup_r+0x30>
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	0781      	lsls	r1, r0, #30
 80069f2:	bf58      	it	pl
 80069f4:	6963      	ldrpl	r3, [r4, #20]
 80069f6:	60a3      	str	r3, [r4, #8]
 80069f8:	e7f4      	b.n	80069e4 <__swsetup_r+0xb0>
 80069fa:	2000      	movs	r0, #0
 80069fc:	e7f7      	b.n	80069ee <__swsetup_r+0xba>
 80069fe:	bf00      	nop
 8006a00:	2000003c 	.word	0x2000003c
 8006a04:	08008bfc 	.word	0x08008bfc
 8006a08:	08008c1c 	.word	0x08008c1c
 8006a0c:	08008bdc 	.word	0x08008bdc

08006a10 <quorem>:
 8006a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	6903      	ldr	r3, [r0, #16]
 8006a16:	690c      	ldr	r4, [r1, #16]
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	4607      	mov	r7, r0
 8006a1c:	f2c0 8081 	blt.w	8006b22 <quorem+0x112>
 8006a20:	3c01      	subs	r4, #1
 8006a22:	f101 0814 	add.w	r8, r1, #20
 8006a26:	f100 0514 	add.w	r5, r0, #20
 8006a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a44:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a48:	d331      	bcc.n	8006aae <quorem+0x9e>
 8006a4a:	f04f 0e00 	mov.w	lr, #0
 8006a4e:	4640      	mov	r0, r8
 8006a50:	46ac      	mov	ip, r5
 8006a52:	46f2      	mov	sl, lr
 8006a54:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a58:	b293      	uxth	r3, r2
 8006a5a:	fb06 e303 	mla	r3, r6, r3, lr
 8006a5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	ebaa 0303 	sub.w	r3, sl, r3
 8006a68:	f8dc a000 	ldr.w	sl, [ip]
 8006a6c:	0c12      	lsrs	r2, r2, #16
 8006a6e:	fa13 f38a 	uxtah	r3, r3, sl
 8006a72:	fb06 e202 	mla	r2, r6, r2, lr
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	9b00      	ldr	r3, [sp, #0]
 8006a7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a7e:	b292      	uxth	r2, r2
 8006a80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a88:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a8c:	4581      	cmp	r9, r0
 8006a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a92:	f84c 3b04 	str.w	r3, [ip], #4
 8006a96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a9a:	d2db      	bcs.n	8006a54 <quorem+0x44>
 8006a9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006aa0:	b92b      	cbnz	r3, 8006aae <quorem+0x9e>
 8006aa2:	9b01      	ldr	r3, [sp, #4]
 8006aa4:	3b04      	subs	r3, #4
 8006aa6:	429d      	cmp	r5, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	d32e      	bcc.n	8006b0a <quorem+0xfa>
 8006aac:	613c      	str	r4, [r7, #16]
 8006aae:	4638      	mov	r0, r7
 8006ab0:	f001 fae4 	bl	800807c <__mcmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	db24      	blt.n	8006b02 <quorem+0xf2>
 8006ab8:	3601      	adds	r6, #1
 8006aba:	4628      	mov	r0, r5
 8006abc:	f04f 0c00 	mov.w	ip, #0
 8006ac0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ac4:	f8d0 e000 	ldr.w	lr, [r0]
 8006ac8:	b293      	uxth	r3, r2
 8006aca:	ebac 0303 	sub.w	r3, ip, r3
 8006ace:	0c12      	lsrs	r2, r2, #16
 8006ad0:	fa13 f38e 	uxtah	r3, r3, lr
 8006ad4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ae2:	45c1      	cmp	r9, r8
 8006ae4:	f840 3b04 	str.w	r3, [r0], #4
 8006ae8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006aec:	d2e8      	bcs.n	8006ac0 <quorem+0xb0>
 8006aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006af6:	b922      	cbnz	r2, 8006b02 <quorem+0xf2>
 8006af8:	3b04      	subs	r3, #4
 8006afa:	429d      	cmp	r5, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	d30a      	bcc.n	8006b16 <quorem+0x106>
 8006b00:	613c      	str	r4, [r7, #16]
 8006b02:	4630      	mov	r0, r6
 8006b04:	b003      	add	sp, #12
 8006b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	3b04      	subs	r3, #4
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	d1cc      	bne.n	8006aac <quorem+0x9c>
 8006b12:	3c01      	subs	r4, #1
 8006b14:	e7c7      	b.n	8006aa6 <quorem+0x96>
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	3b04      	subs	r3, #4
 8006b1a:	2a00      	cmp	r2, #0
 8006b1c:	d1f0      	bne.n	8006b00 <quorem+0xf0>
 8006b1e:	3c01      	subs	r4, #1
 8006b20:	e7eb      	b.n	8006afa <quorem+0xea>
 8006b22:	2000      	movs	r0, #0
 8006b24:	e7ee      	b.n	8006b04 <quorem+0xf4>
	...

08006b28 <_dtoa_r>:
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	ed2d 8b04 	vpush	{d8-d9}
 8006b30:	ec57 6b10 	vmov	r6, r7, d0
 8006b34:	b093      	sub	sp, #76	; 0x4c
 8006b36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b3c:	9106      	str	r1, [sp, #24]
 8006b3e:	ee10 aa10 	vmov	sl, s0
 8006b42:	4604      	mov	r4, r0
 8006b44:	9209      	str	r2, [sp, #36]	; 0x24
 8006b46:	930c      	str	r3, [sp, #48]	; 0x30
 8006b48:	46bb      	mov	fp, r7
 8006b4a:	b975      	cbnz	r5, 8006b6a <_dtoa_r+0x42>
 8006b4c:	2010      	movs	r0, #16
 8006b4e:	f000 fffd 	bl	8007b4c <malloc>
 8006b52:	4602      	mov	r2, r0
 8006b54:	6260      	str	r0, [r4, #36]	; 0x24
 8006b56:	b920      	cbnz	r0, 8006b62 <_dtoa_r+0x3a>
 8006b58:	4ba7      	ldr	r3, [pc, #668]	; (8006df8 <_dtoa_r+0x2d0>)
 8006b5a:	21ea      	movs	r1, #234	; 0xea
 8006b5c:	48a7      	ldr	r0, [pc, #668]	; (8006dfc <_dtoa_r+0x2d4>)
 8006b5e:	f001 fe45 	bl	80087ec <__assert_func>
 8006b62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b66:	6005      	str	r5, [r0, #0]
 8006b68:	60c5      	str	r5, [r0, #12]
 8006b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b6c:	6819      	ldr	r1, [r3, #0]
 8006b6e:	b151      	cbz	r1, 8006b86 <_dtoa_r+0x5e>
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	604a      	str	r2, [r1, #4]
 8006b74:	2301      	movs	r3, #1
 8006b76:	4093      	lsls	r3, r2
 8006b78:	608b      	str	r3, [r1, #8]
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f001 f83c 	bl	8007bf8 <_Bfree>
 8006b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	1e3b      	subs	r3, r7, #0
 8006b88:	bfaa      	itet	ge
 8006b8a:	2300      	movge	r3, #0
 8006b8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006b90:	f8c8 3000 	strge.w	r3, [r8]
 8006b94:	4b9a      	ldr	r3, [pc, #616]	; (8006e00 <_dtoa_r+0x2d8>)
 8006b96:	bfbc      	itt	lt
 8006b98:	2201      	movlt	r2, #1
 8006b9a:	f8c8 2000 	strlt.w	r2, [r8]
 8006b9e:	ea33 030b 	bics.w	r3, r3, fp
 8006ba2:	d11b      	bne.n	8006bdc <_dtoa_r+0xb4>
 8006ba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ba6:	f242 730f 	movw	r3, #9999	; 0x270f
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bb0:	4333      	orrs	r3, r6
 8006bb2:	f000 8592 	beq.w	80076da <_dtoa_r+0xbb2>
 8006bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bb8:	b963      	cbnz	r3, 8006bd4 <_dtoa_r+0xac>
 8006bba:	4b92      	ldr	r3, [pc, #584]	; (8006e04 <_dtoa_r+0x2dc>)
 8006bbc:	e022      	b.n	8006c04 <_dtoa_r+0xdc>
 8006bbe:	4b92      	ldr	r3, [pc, #584]	; (8006e08 <_dtoa_r+0x2e0>)
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	9801      	ldr	r0, [sp, #4]
 8006bca:	b013      	add	sp, #76	; 0x4c
 8006bcc:	ecbd 8b04 	vpop	{d8-d9}
 8006bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd4:	4b8b      	ldr	r3, [pc, #556]	; (8006e04 <_dtoa_r+0x2dc>)
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	3303      	adds	r3, #3
 8006bda:	e7f3      	b.n	8006bc4 <_dtoa_r+0x9c>
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2300      	movs	r3, #0
 8006be0:	4650      	mov	r0, sl
 8006be2:	4659      	mov	r1, fp
 8006be4:	f7f9 ff88 	bl	8000af8 <__aeabi_dcmpeq>
 8006be8:	ec4b ab19 	vmov	d9, sl, fp
 8006bec:	4680      	mov	r8, r0
 8006bee:	b158      	cbz	r0, 8006c08 <_dtoa_r+0xe0>
 8006bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 856b 	beq.w	80076d4 <_dtoa_r+0xbac>
 8006bfe:	4883      	ldr	r0, [pc, #524]	; (8006e0c <_dtoa_r+0x2e4>)
 8006c00:	6018      	str	r0, [r3, #0]
 8006c02:	1e43      	subs	r3, r0, #1
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	e7df      	b.n	8006bc8 <_dtoa_r+0xa0>
 8006c08:	ec4b ab10 	vmov	d0, sl, fp
 8006c0c:	aa10      	add	r2, sp, #64	; 0x40
 8006c0e:	a911      	add	r1, sp, #68	; 0x44
 8006c10:	4620      	mov	r0, r4
 8006c12:	f001 fad9 	bl	80081c8 <__d2b>
 8006c16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c1a:	ee08 0a10 	vmov	s16, r0
 8006c1e:	2d00      	cmp	r5, #0
 8006c20:	f000 8084 	beq.w	8006d2c <_dtoa_r+0x204>
 8006c24:	ee19 3a90 	vmov	r3, s19
 8006c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c30:	4656      	mov	r6, sl
 8006c32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c3e:	4b74      	ldr	r3, [pc, #464]	; (8006e10 <_dtoa_r+0x2e8>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	4630      	mov	r0, r6
 8006c44:	4639      	mov	r1, r7
 8006c46:	f7f9 fb37 	bl	80002b8 <__aeabi_dsub>
 8006c4a:	a365      	add	r3, pc, #404	; (adr r3, 8006de0 <_dtoa_r+0x2b8>)
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f7f9 fcea 	bl	8000628 <__aeabi_dmul>
 8006c54:	a364      	add	r3, pc, #400	; (adr r3, 8006de8 <_dtoa_r+0x2c0>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f7f9 fb2f 	bl	80002bc <__adddf3>
 8006c5e:	4606      	mov	r6, r0
 8006c60:	4628      	mov	r0, r5
 8006c62:	460f      	mov	r7, r1
 8006c64:	f7f9 fc76 	bl	8000554 <__aeabi_i2d>
 8006c68:	a361      	add	r3, pc, #388	; (adr r3, 8006df0 <_dtoa_r+0x2c8>)
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f7f9 fcdb 	bl	8000628 <__aeabi_dmul>
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	4630      	mov	r0, r6
 8006c78:	4639      	mov	r1, r7
 8006c7a:	f7f9 fb1f 	bl	80002bc <__adddf3>
 8006c7e:	4606      	mov	r6, r0
 8006c80:	460f      	mov	r7, r1
 8006c82:	f7f9 ff81 	bl	8000b88 <__aeabi_d2iz>
 8006c86:	2200      	movs	r2, #0
 8006c88:	9000      	str	r0, [sp, #0]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	4639      	mov	r1, r7
 8006c90:	f7f9 ff3c 	bl	8000b0c <__aeabi_dcmplt>
 8006c94:	b150      	cbz	r0, 8006cac <_dtoa_r+0x184>
 8006c96:	9800      	ldr	r0, [sp, #0]
 8006c98:	f7f9 fc5c 	bl	8000554 <__aeabi_i2d>
 8006c9c:	4632      	mov	r2, r6
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	f7f9 ff2a 	bl	8000af8 <__aeabi_dcmpeq>
 8006ca4:	b910      	cbnz	r0, 8006cac <_dtoa_r+0x184>
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	9b00      	ldr	r3, [sp, #0]
 8006cae:	2b16      	cmp	r3, #22
 8006cb0:	d85a      	bhi.n	8006d68 <_dtoa_r+0x240>
 8006cb2:	9a00      	ldr	r2, [sp, #0]
 8006cb4:	4b57      	ldr	r3, [pc, #348]	; (8006e14 <_dtoa_r+0x2ec>)
 8006cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	ec51 0b19 	vmov	r0, r1, d9
 8006cc2:	f7f9 ff23 	bl	8000b0c <__aeabi_dcmplt>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d050      	beq.n	8006d6c <_dtoa_r+0x244>
 8006cca:	9b00      	ldr	r3, [sp, #0]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cd6:	1b5d      	subs	r5, r3, r5
 8006cd8:	1e6b      	subs	r3, r5, #1
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	bf45      	ittet	mi
 8006cde:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ce2:	9304      	strmi	r3, [sp, #16]
 8006ce4:	2300      	movpl	r3, #0
 8006ce6:	2300      	movmi	r3, #0
 8006ce8:	bf4c      	ite	mi
 8006cea:	9305      	strmi	r3, [sp, #20]
 8006cec:	9304      	strpl	r3, [sp, #16]
 8006cee:	9b00      	ldr	r3, [sp, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	db3d      	blt.n	8006d70 <_dtoa_r+0x248>
 8006cf4:	9b05      	ldr	r3, [sp, #20]
 8006cf6:	9a00      	ldr	r2, [sp, #0]
 8006cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8006cfa:	4413      	add	r3, r2
 8006cfc:	9305      	str	r3, [sp, #20]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9307      	str	r3, [sp, #28]
 8006d02:	9b06      	ldr	r3, [sp, #24]
 8006d04:	2b09      	cmp	r3, #9
 8006d06:	f200 8089 	bhi.w	8006e1c <_dtoa_r+0x2f4>
 8006d0a:	2b05      	cmp	r3, #5
 8006d0c:	bfc4      	itt	gt
 8006d0e:	3b04      	subgt	r3, #4
 8006d10:	9306      	strgt	r3, [sp, #24]
 8006d12:	9b06      	ldr	r3, [sp, #24]
 8006d14:	f1a3 0302 	sub.w	r3, r3, #2
 8006d18:	bfcc      	ite	gt
 8006d1a:	2500      	movgt	r5, #0
 8006d1c:	2501      	movle	r5, #1
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	f200 8087 	bhi.w	8006e32 <_dtoa_r+0x30a>
 8006d24:	e8df f003 	tbb	[pc, r3]
 8006d28:	59383a2d 	.word	0x59383a2d
 8006d2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d30:	441d      	add	r5, r3
 8006d32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	bfc1      	itttt	gt
 8006d3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d42:	fa0b f303 	lslgt.w	r3, fp, r3
 8006d46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d4a:	bfda      	itte	le
 8006d4c:	f1c3 0320 	rsble	r3, r3, #32
 8006d50:	fa06 f003 	lslle.w	r0, r6, r3
 8006d54:	4318      	orrgt	r0, r3
 8006d56:	f7f9 fbed 	bl	8000534 <__aeabi_ui2d>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d62:	3d01      	subs	r5, #1
 8006d64:	930e      	str	r3, [sp, #56]	; 0x38
 8006d66:	e76a      	b.n	8006c3e <_dtoa_r+0x116>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e7b2      	b.n	8006cd2 <_dtoa_r+0x1aa>
 8006d6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d6e:	e7b1      	b.n	8006cd4 <_dtoa_r+0x1ac>
 8006d70:	9b04      	ldr	r3, [sp, #16]
 8006d72:	9a00      	ldr	r2, [sp, #0]
 8006d74:	1a9b      	subs	r3, r3, r2
 8006d76:	9304      	str	r3, [sp, #16]
 8006d78:	4253      	negs	r3, r2
 8006d7a:	9307      	str	r3, [sp, #28]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d80:	e7bf      	b.n	8006d02 <_dtoa_r+0x1da>
 8006d82:	2300      	movs	r3, #0
 8006d84:	9308      	str	r3, [sp, #32]
 8006d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	dc55      	bgt.n	8006e38 <_dtoa_r+0x310>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d92:	461a      	mov	r2, r3
 8006d94:	9209      	str	r2, [sp, #36]	; 0x24
 8006d96:	e00c      	b.n	8006db2 <_dtoa_r+0x28a>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e7f3      	b.n	8006d84 <_dtoa_r+0x25c>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da0:	9308      	str	r3, [sp, #32]
 8006da2:	9b00      	ldr	r3, [sp, #0]
 8006da4:	4413      	add	r3, r2
 8006da6:	9302      	str	r3, [sp, #8]
 8006da8:	3301      	adds	r3, #1
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	9303      	str	r3, [sp, #12]
 8006dae:	bfb8      	it	lt
 8006db0:	2301      	movlt	r3, #1
 8006db2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006db4:	2200      	movs	r2, #0
 8006db6:	6042      	str	r2, [r0, #4]
 8006db8:	2204      	movs	r2, #4
 8006dba:	f102 0614 	add.w	r6, r2, #20
 8006dbe:	429e      	cmp	r6, r3
 8006dc0:	6841      	ldr	r1, [r0, #4]
 8006dc2:	d93d      	bls.n	8006e40 <_dtoa_r+0x318>
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 fed7 	bl	8007b78 <_Balloc>
 8006dca:	9001      	str	r0, [sp, #4]
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d13b      	bne.n	8006e48 <_dtoa_r+0x320>
 8006dd0:	4b11      	ldr	r3, [pc, #68]	; (8006e18 <_dtoa_r+0x2f0>)
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006dd8:	e6c0      	b.n	8006b5c <_dtoa_r+0x34>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e7df      	b.n	8006d9e <_dtoa_r+0x276>
 8006dde:	bf00      	nop
 8006de0:	636f4361 	.word	0x636f4361
 8006de4:	3fd287a7 	.word	0x3fd287a7
 8006de8:	8b60c8b3 	.word	0x8b60c8b3
 8006dec:	3fc68a28 	.word	0x3fc68a28
 8006df0:	509f79fb 	.word	0x509f79fb
 8006df4:	3fd34413 	.word	0x3fd34413
 8006df8:	08008b59 	.word	0x08008b59
 8006dfc:	08008b70 	.word	0x08008b70
 8006e00:	7ff00000 	.word	0x7ff00000
 8006e04:	08008b55 	.word	0x08008b55
 8006e08:	08008b4c 	.word	0x08008b4c
 8006e0c:	08008b29 	.word	0x08008b29
 8006e10:	3ff80000 	.word	0x3ff80000
 8006e14:	08008cc0 	.word	0x08008cc0
 8006e18:	08008bcb 	.word	0x08008bcb
 8006e1c:	2501      	movs	r5, #1
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9306      	str	r3, [sp, #24]
 8006e22:	9508      	str	r5, [sp, #32]
 8006e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2312      	movs	r3, #18
 8006e30:	e7b0      	b.n	8006d94 <_dtoa_r+0x26c>
 8006e32:	2301      	movs	r3, #1
 8006e34:	9308      	str	r3, [sp, #32]
 8006e36:	e7f5      	b.n	8006e24 <_dtoa_r+0x2fc>
 8006e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e3e:	e7b8      	b.n	8006db2 <_dtoa_r+0x28a>
 8006e40:	3101      	adds	r1, #1
 8006e42:	6041      	str	r1, [r0, #4]
 8006e44:	0052      	lsls	r2, r2, #1
 8006e46:	e7b8      	b.n	8006dba <_dtoa_r+0x292>
 8006e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e4a:	9a01      	ldr	r2, [sp, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	9b03      	ldr	r3, [sp, #12]
 8006e50:	2b0e      	cmp	r3, #14
 8006e52:	f200 809d 	bhi.w	8006f90 <_dtoa_r+0x468>
 8006e56:	2d00      	cmp	r5, #0
 8006e58:	f000 809a 	beq.w	8006f90 <_dtoa_r+0x468>
 8006e5c:	9b00      	ldr	r3, [sp, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	dd32      	ble.n	8006ec8 <_dtoa_r+0x3a0>
 8006e62:	4ab7      	ldr	r2, [pc, #732]	; (8007140 <_dtoa_r+0x618>)
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e70:	9b00      	ldr	r3, [sp, #0]
 8006e72:	05d8      	lsls	r0, r3, #23
 8006e74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006e78:	d516      	bpl.n	8006ea8 <_dtoa_r+0x380>
 8006e7a:	4bb2      	ldr	r3, [pc, #712]	; (8007144 <_dtoa_r+0x61c>)
 8006e7c:	ec51 0b19 	vmov	r0, r1, d9
 8006e80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e84:	f7f9 fcfa 	bl	800087c <__aeabi_ddiv>
 8006e88:	f007 070f 	and.w	r7, r7, #15
 8006e8c:	4682      	mov	sl, r0
 8006e8e:	468b      	mov	fp, r1
 8006e90:	2503      	movs	r5, #3
 8006e92:	4eac      	ldr	r6, [pc, #688]	; (8007144 <_dtoa_r+0x61c>)
 8006e94:	b957      	cbnz	r7, 8006eac <_dtoa_r+0x384>
 8006e96:	4642      	mov	r2, r8
 8006e98:	464b      	mov	r3, r9
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	4659      	mov	r1, fp
 8006e9e:	f7f9 fced 	bl	800087c <__aeabi_ddiv>
 8006ea2:	4682      	mov	sl, r0
 8006ea4:	468b      	mov	fp, r1
 8006ea6:	e028      	b.n	8006efa <_dtoa_r+0x3d2>
 8006ea8:	2502      	movs	r5, #2
 8006eaa:	e7f2      	b.n	8006e92 <_dtoa_r+0x36a>
 8006eac:	07f9      	lsls	r1, r7, #31
 8006eae:	d508      	bpl.n	8006ec2 <_dtoa_r+0x39a>
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006eb8:	f7f9 fbb6 	bl	8000628 <__aeabi_dmul>
 8006ebc:	3501      	adds	r5, #1
 8006ebe:	4680      	mov	r8, r0
 8006ec0:	4689      	mov	r9, r1
 8006ec2:	107f      	asrs	r7, r7, #1
 8006ec4:	3608      	adds	r6, #8
 8006ec6:	e7e5      	b.n	8006e94 <_dtoa_r+0x36c>
 8006ec8:	f000 809b 	beq.w	8007002 <_dtoa_r+0x4da>
 8006ecc:	9b00      	ldr	r3, [sp, #0]
 8006ece:	4f9d      	ldr	r7, [pc, #628]	; (8007144 <_dtoa_r+0x61c>)
 8006ed0:	425e      	negs	r6, r3
 8006ed2:	4b9b      	ldr	r3, [pc, #620]	; (8007140 <_dtoa_r+0x618>)
 8006ed4:	f006 020f 	and.w	r2, r6, #15
 8006ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	ec51 0b19 	vmov	r0, r1, d9
 8006ee4:	f7f9 fba0 	bl	8000628 <__aeabi_dmul>
 8006ee8:	1136      	asrs	r6, r6, #4
 8006eea:	4682      	mov	sl, r0
 8006eec:	468b      	mov	fp, r1
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2502      	movs	r5, #2
 8006ef2:	2e00      	cmp	r6, #0
 8006ef4:	d17a      	bne.n	8006fec <_dtoa_r+0x4c4>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1d3      	bne.n	8006ea2 <_dtoa_r+0x37a>
 8006efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8082 	beq.w	8007006 <_dtoa_r+0x4de>
 8006f02:	4b91      	ldr	r3, [pc, #580]	; (8007148 <_dtoa_r+0x620>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	4650      	mov	r0, sl
 8006f08:	4659      	mov	r1, fp
 8006f0a:	f7f9 fdff 	bl	8000b0c <__aeabi_dcmplt>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d079      	beq.n	8007006 <_dtoa_r+0x4de>
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d076      	beq.n	8007006 <_dtoa_r+0x4de>
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dd36      	ble.n	8006f8c <_dtoa_r+0x464>
 8006f1e:	9b00      	ldr	r3, [sp, #0]
 8006f20:	4650      	mov	r0, sl
 8006f22:	4659      	mov	r1, fp
 8006f24:	1e5f      	subs	r7, r3, #1
 8006f26:	2200      	movs	r2, #0
 8006f28:	4b88      	ldr	r3, [pc, #544]	; (800714c <_dtoa_r+0x624>)
 8006f2a:	f7f9 fb7d 	bl	8000628 <__aeabi_dmul>
 8006f2e:	9e02      	ldr	r6, [sp, #8]
 8006f30:	4682      	mov	sl, r0
 8006f32:	468b      	mov	fp, r1
 8006f34:	3501      	adds	r5, #1
 8006f36:	4628      	mov	r0, r5
 8006f38:	f7f9 fb0c 	bl	8000554 <__aeabi_i2d>
 8006f3c:	4652      	mov	r2, sl
 8006f3e:	465b      	mov	r3, fp
 8006f40:	f7f9 fb72 	bl	8000628 <__aeabi_dmul>
 8006f44:	4b82      	ldr	r3, [pc, #520]	; (8007150 <_dtoa_r+0x628>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	f7f9 f9b8 	bl	80002bc <__adddf3>
 8006f4c:	46d0      	mov	r8, sl
 8006f4e:	46d9      	mov	r9, fp
 8006f50:	4682      	mov	sl, r0
 8006f52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006f56:	2e00      	cmp	r6, #0
 8006f58:	d158      	bne.n	800700c <_dtoa_r+0x4e4>
 8006f5a:	4b7e      	ldr	r3, [pc, #504]	; (8007154 <_dtoa_r+0x62c>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	4640      	mov	r0, r8
 8006f60:	4649      	mov	r1, r9
 8006f62:	f7f9 f9a9 	bl	80002b8 <__aeabi_dsub>
 8006f66:	4652      	mov	r2, sl
 8006f68:	465b      	mov	r3, fp
 8006f6a:	4680      	mov	r8, r0
 8006f6c:	4689      	mov	r9, r1
 8006f6e:	f7f9 fdeb 	bl	8000b48 <__aeabi_dcmpgt>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f040 8295 	bne.w	80074a2 <_dtoa_r+0x97a>
 8006f78:	4652      	mov	r2, sl
 8006f7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4649      	mov	r1, r9
 8006f82:	f7f9 fdc3 	bl	8000b0c <__aeabi_dcmplt>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	f040 8289 	bne.w	800749e <_dtoa_r+0x976>
 8006f8c:	ec5b ab19 	vmov	sl, fp, d9
 8006f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f2c0 8148 	blt.w	8007228 <_dtoa_r+0x700>
 8006f98:	9a00      	ldr	r2, [sp, #0]
 8006f9a:	2a0e      	cmp	r2, #14
 8006f9c:	f300 8144 	bgt.w	8007228 <_dtoa_r+0x700>
 8006fa0:	4b67      	ldr	r3, [pc, #412]	; (8007140 <_dtoa_r+0x618>)
 8006fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f280 80d5 	bge.w	800715c <_dtoa_r+0x634>
 8006fb2:	9b03      	ldr	r3, [sp, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f300 80d1 	bgt.w	800715c <_dtoa_r+0x634>
 8006fba:	f040 826f 	bne.w	800749c <_dtoa_r+0x974>
 8006fbe:	4b65      	ldr	r3, [pc, #404]	; (8007154 <_dtoa_r+0x62c>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	f7f9 fb2f 	bl	8000628 <__aeabi_dmul>
 8006fca:	4652      	mov	r2, sl
 8006fcc:	465b      	mov	r3, fp
 8006fce:	f7f9 fdb1 	bl	8000b34 <__aeabi_dcmpge>
 8006fd2:	9e03      	ldr	r6, [sp, #12]
 8006fd4:	4637      	mov	r7, r6
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f040 8245 	bne.w	8007466 <_dtoa_r+0x93e>
 8006fdc:	9d01      	ldr	r5, [sp, #4]
 8006fde:	2331      	movs	r3, #49	; 0x31
 8006fe0:	f805 3b01 	strb.w	r3, [r5], #1
 8006fe4:	9b00      	ldr	r3, [sp, #0]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	e240      	b.n	800746e <_dtoa_r+0x946>
 8006fec:	07f2      	lsls	r2, r6, #31
 8006fee:	d505      	bpl.n	8006ffc <_dtoa_r+0x4d4>
 8006ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ff4:	f7f9 fb18 	bl	8000628 <__aeabi_dmul>
 8006ff8:	3501      	adds	r5, #1
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	1076      	asrs	r6, r6, #1
 8006ffe:	3708      	adds	r7, #8
 8007000:	e777      	b.n	8006ef2 <_dtoa_r+0x3ca>
 8007002:	2502      	movs	r5, #2
 8007004:	e779      	b.n	8006efa <_dtoa_r+0x3d2>
 8007006:	9f00      	ldr	r7, [sp, #0]
 8007008:	9e03      	ldr	r6, [sp, #12]
 800700a:	e794      	b.n	8006f36 <_dtoa_r+0x40e>
 800700c:	9901      	ldr	r1, [sp, #4]
 800700e:	4b4c      	ldr	r3, [pc, #304]	; (8007140 <_dtoa_r+0x618>)
 8007010:	4431      	add	r1, r6
 8007012:	910d      	str	r1, [sp, #52]	; 0x34
 8007014:	9908      	ldr	r1, [sp, #32]
 8007016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800701a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800701e:	2900      	cmp	r1, #0
 8007020:	d043      	beq.n	80070aa <_dtoa_r+0x582>
 8007022:	494d      	ldr	r1, [pc, #308]	; (8007158 <_dtoa_r+0x630>)
 8007024:	2000      	movs	r0, #0
 8007026:	f7f9 fc29 	bl	800087c <__aeabi_ddiv>
 800702a:	4652      	mov	r2, sl
 800702c:	465b      	mov	r3, fp
 800702e:	f7f9 f943 	bl	80002b8 <__aeabi_dsub>
 8007032:	9d01      	ldr	r5, [sp, #4]
 8007034:	4682      	mov	sl, r0
 8007036:	468b      	mov	fp, r1
 8007038:	4649      	mov	r1, r9
 800703a:	4640      	mov	r0, r8
 800703c:	f7f9 fda4 	bl	8000b88 <__aeabi_d2iz>
 8007040:	4606      	mov	r6, r0
 8007042:	f7f9 fa87 	bl	8000554 <__aeabi_i2d>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4640      	mov	r0, r8
 800704c:	4649      	mov	r1, r9
 800704e:	f7f9 f933 	bl	80002b8 <__aeabi_dsub>
 8007052:	3630      	adds	r6, #48	; 0x30
 8007054:	f805 6b01 	strb.w	r6, [r5], #1
 8007058:	4652      	mov	r2, sl
 800705a:	465b      	mov	r3, fp
 800705c:	4680      	mov	r8, r0
 800705e:	4689      	mov	r9, r1
 8007060:	f7f9 fd54 	bl	8000b0c <__aeabi_dcmplt>
 8007064:	2800      	cmp	r0, #0
 8007066:	d163      	bne.n	8007130 <_dtoa_r+0x608>
 8007068:	4642      	mov	r2, r8
 800706a:	464b      	mov	r3, r9
 800706c:	4936      	ldr	r1, [pc, #216]	; (8007148 <_dtoa_r+0x620>)
 800706e:	2000      	movs	r0, #0
 8007070:	f7f9 f922 	bl	80002b8 <__aeabi_dsub>
 8007074:	4652      	mov	r2, sl
 8007076:	465b      	mov	r3, fp
 8007078:	f7f9 fd48 	bl	8000b0c <__aeabi_dcmplt>
 800707c:	2800      	cmp	r0, #0
 800707e:	f040 80b5 	bne.w	80071ec <_dtoa_r+0x6c4>
 8007082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007084:	429d      	cmp	r5, r3
 8007086:	d081      	beq.n	8006f8c <_dtoa_r+0x464>
 8007088:	4b30      	ldr	r3, [pc, #192]	; (800714c <_dtoa_r+0x624>)
 800708a:	2200      	movs	r2, #0
 800708c:	4650      	mov	r0, sl
 800708e:	4659      	mov	r1, fp
 8007090:	f7f9 faca 	bl	8000628 <__aeabi_dmul>
 8007094:	4b2d      	ldr	r3, [pc, #180]	; (800714c <_dtoa_r+0x624>)
 8007096:	4682      	mov	sl, r0
 8007098:	468b      	mov	fp, r1
 800709a:	4640      	mov	r0, r8
 800709c:	4649      	mov	r1, r9
 800709e:	2200      	movs	r2, #0
 80070a0:	f7f9 fac2 	bl	8000628 <__aeabi_dmul>
 80070a4:	4680      	mov	r8, r0
 80070a6:	4689      	mov	r9, r1
 80070a8:	e7c6      	b.n	8007038 <_dtoa_r+0x510>
 80070aa:	4650      	mov	r0, sl
 80070ac:	4659      	mov	r1, fp
 80070ae:	f7f9 fabb 	bl	8000628 <__aeabi_dmul>
 80070b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070b4:	9d01      	ldr	r5, [sp, #4]
 80070b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070b8:	4682      	mov	sl, r0
 80070ba:	468b      	mov	fp, r1
 80070bc:	4649      	mov	r1, r9
 80070be:	4640      	mov	r0, r8
 80070c0:	f7f9 fd62 	bl	8000b88 <__aeabi_d2iz>
 80070c4:	4606      	mov	r6, r0
 80070c6:	f7f9 fa45 	bl	8000554 <__aeabi_i2d>
 80070ca:	3630      	adds	r6, #48	; 0x30
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4640      	mov	r0, r8
 80070d2:	4649      	mov	r1, r9
 80070d4:	f7f9 f8f0 	bl	80002b8 <__aeabi_dsub>
 80070d8:	f805 6b01 	strb.w	r6, [r5], #1
 80070dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070de:	429d      	cmp	r5, r3
 80070e0:	4680      	mov	r8, r0
 80070e2:	4689      	mov	r9, r1
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	d124      	bne.n	8007134 <_dtoa_r+0x60c>
 80070ea:	4b1b      	ldr	r3, [pc, #108]	; (8007158 <_dtoa_r+0x630>)
 80070ec:	4650      	mov	r0, sl
 80070ee:	4659      	mov	r1, fp
 80070f0:	f7f9 f8e4 	bl	80002bc <__adddf3>
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4640      	mov	r0, r8
 80070fa:	4649      	mov	r1, r9
 80070fc:	f7f9 fd24 	bl	8000b48 <__aeabi_dcmpgt>
 8007100:	2800      	cmp	r0, #0
 8007102:	d173      	bne.n	80071ec <_dtoa_r+0x6c4>
 8007104:	4652      	mov	r2, sl
 8007106:	465b      	mov	r3, fp
 8007108:	4913      	ldr	r1, [pc, #76]	; (8007158 <_dtoa_r+0x630>)
 800710a:	2000      	movs	r0, #0
 800710c:	f7f9 f8d4 	bl	80002b8 <__aeabi_dsub>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4640      	mov	r0, r8
 8007116:	4649      	mov	r1, r9
 8007118:	f7f9 fcf8 	bl	8000b0c <__aeabi_dcmplt>
 800711c:	2800      	cmp	r0, #0
 800711e:	f43f af35 	beq.w	8006f8c <_dtoa_r+0x464>
 8007122:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007124:	1e6b      	subs	r3, r5, #1
 8007126:	930f      	str	r3, [sp, #60]	; 0x3c
 8007128:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800712c:	2b30      	cmp	r3, #48	; 0x30
 800712e:	d0f8      	beq.n	8007122 <_dtoa_r+0x5fa>
 8007130:	9700      	str	r7, [sp, #0]
 8007132:	e049      	b.n	80071c8 <_dtoa_r+0x6a0>
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <_dtoa_r+0x624>)
 8007136:	f7f9 fa77 	bl	8000628 <__aeabi_dmul>
 800713a:	4680      	mov	r8, r0
 800713c:	4689      	mov	r9, r1
 800713e:	e7bd      	b.n	80070bc <_dtoa_r+0x594>
 8007140:	08008cc0 	.word	0x08008cc0
 8007144:	08008c98 	.word	0x08008c98
 8007148:	3ff00000 	.word	0x3ff00000
 800714c:	40240000 	.word	0x40240000
 8007150:	401c0000 	.word	0x401c0000
 8007154:	40140000 	.word	0x40140000
 8007158:	3fe00000 	.word	0x3fe00000
 800715c:	9d01      	ldr	r5, [sp, #4]
 800715e:	4656      	mov	r6, sl
 8007160:	465f      	mov	r7, fp
 8007162:	4642      	mov	r2, r8
 8007164:	464b      	mov	r3, r9
 8007166:	4630      	mov	r0, r6
 8007168:	4639      	mov	r1, r7
 800716a:	f7f9 fb87 	bl	800087c <__aeabi_ddiv>
 800716e:	f7f9 fd0b 	bl	8000b88 <__aeabi_d2iz>
 8007172:	4682      	mov	sl, r0
 8007174:	f7f9 f9ee 	bl	8000554 <__aeabi_i2d>
 8007178:	4642      	mov	r2, r8
 800717a:	464b      	mov	r3, r9
 800717c:	f7f9 fa54 	bl	8000628 <__aeabi_dmul>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4630      	mov	r0, r6
 8007186:	4639      	mov	r1, r7
 8007188:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800718c:	f7f9 f894 	bl	80002b8 <__aeabi_dsub>
 8007190:	f805 6b01 	strb.w	r6, [r5], #1
 8007194:	9e01      	ldr	r6, [sp, #4]
 8007196:	9f03      	ldr	r7, [sp, #12]
 8007198:	1bae      	subs	r6, r5, r6
 800719a:	42b7      	cmp	r7, r6
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	d135      	bne.n	800720e <_dtoa_r+0x6e6>
 80071a2:	f7f9 f88b 	bl	80002bc <__adddf3>
 80071a6:	4642      	mov	r2, r8
 80071a8:	464b      	mov	r3, r9
 80071aa:	4606      	mov	r6, r0
 80071ac:	460f      	mov	r7, r1
 80071ae:	f7f9 fccb 	bl	8000b48 <__aeabi_dcmpgt>
 80071b2:	b9d0      	cbnz	r0, 80071ea <_dtoa_r+0x6c2>
 80071b4:	4642      	mov	r2, r8
 80071b6:	464b      	mov	r3, r9
 80071b8:	4630      	mov	r0, r6
 80071ba:	4639      	mov	r1, r7
 80071bc:	f7f9 fc9c 	bl	8000af8 <__aeabi_dcmpeq>
 80071c0:	b110      	cbz	r0, 80071c8 <_dtoa_r+0x6a0>
 80071c2:	f01a 0f01 	tst.w	sl, #1
 80071c6:	d110      	bne.n	80071ea <_dtoa_r+0x6c2>
 80071c8:	4620      	mov	r0, r4
 80071ca:	ee18 1a10 	vmov	r1, s16
 80071ce:	f000 fd13 	bl	8007bf8 <_Bfree>
 80071d2:	2300      	movs	r3, #0
 80071d4:	9800      	ldr	r0, [sp, #0]
 80071d6:	702b      	strb	r3, [r5, #0]
 80071d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071da:	3001      	adds	r0, #1
 80071dc:	6018      	str	r0, [r3, #0]
 80071de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f43f acf1 	beq.w	8006bc8 <_dtoa_r+0xa0>
 80071e6:	601d      	str	r5, [r3, #0]
 80071e8:	e4ee      	b.n	8006bc8 <_dtoa_r+0xa0>
 80071ea:	9f00      	ldr	r7, [sp, #0]
 80071ec:	462b      	mov	r3, r5
 80071ee:	461d      	mov	r5, r3
 80071f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071f4:	2a39      	cmp	r2, #57	; 0x39
 80071f6:	d106      	bne.n	8007206 <_dtoa_r+0x6de>
 80071f8:	9a01      	ldr	r2, [sp, #4]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d1f7      	bne.n	80071ee <_dtoa_r+0x6c6>
 80071fe:	9901      	ldr	r1, [sp, #4]
 8007200:	2230      	movs	r2, #48	; 0x30
 8007202:	3701      	adds	r7, #1
 8007204:	700a      	strb	r2, [r1, #0]
 8007206:	781a      	ldrb	r2, [r3, #0]
 8007208:	3201      	adds	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e790      	b.n	8007130 <_dtoa_r+0x608>
 800720e:	4ba6      	ldr	r3, [pc, #664]	; (80074a8 <_dtoa_r+0x980>)
 8007210:	2200      	movs	r2, #0
 8007212:	f7f9 fa09 	bl	8000628 <__aeabi_dmul>
 8007216:	2200      	movs	r2, #0
 8007218:	2300      	movs	r3, #0
 800721a:	4606      	mov	r6, r0
 800721c:	460f      	mov	r7, r1
 800721e:	f7f9 fc6b 	bl	8000af8 <__aeabi_dcmpeq>
 8007222:	2800      	cmp	r0, #0
 8007224:	d09d      	beq.n	8007162 <_dtoa_r+0x63a>
 8007226:	e7cf      	b.n	80071c8 <_dtoa_r+0x6a0>
 8007228:	9a08      	ldr	r2, [sp, #32]
 800722a:	2a00      	cmp	r2, #0
 800722c:	f000 80d7 	beq.w	80073de <_dtoa_r+0x8b6>
 8007230:	9a06      	ldr	r2, [sp, #24]
 8007232:	2a01      	cmp	r2, #1
 8007234:	f300 80ba 	bgt.w	80073ac <_dtoa_r+0x884>
 8007238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800723a:	2a00      	cmp	r2, #0
 800723c:	f000 80b2 	beq.w	80073a4 <_dtoa_r+0x87c>
 8007240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007244:	9e07      	ldr	r6, [sp, #28]
 8007246:	9d04      	ldr	r5, [sp, #16]
 8007248:	9a04      	ldr	r2, [sp, #16]
 800724a:	441a      	add	r2, r3
 800724c:	9204      	str	r2, [sp, #16]
 800724e:	9a05      	ldr	r2, [sp, #20]
 8007250:	2101      	movs	r1, #1
 8007252:	441a      	add	r2, r3
 8007254:	4620      	mov	r0, r4
 8007256:	9205      	str	r2, [sp, #20]
 8007258:	f000 fd86 	bl	8007d68 <__i2b>
 800725c:	4607      	mov	r7, r0
 800725e:	2d00      	cmp	r5, #0
 8007260:	dd0c      	ble.n	800727c <_dtoa_r+0x754>
 8007262:	9b05      	ldr	r3, [sp, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	dd09      	ble.n	800727c <_dtoa_r+0x754>
 8007268:	42ab      	cmp	r3, r5
 800726a:	9a04      	ldr	r2, [sp, #16]
 800726c:	bfa8      	it	ge
 800726e:	462b      	movge	r3, r5
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	9204      	str	r2, [sp, #16]
 8007274:	9a05      	ldr	r2, [sp, #20]
 8007276:	1aed      	subs	r5, r5, r3
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	9305      	str	r3, [sp, #20]
 800727c:	9b07      	ldr	r3, [sp, #28]
 800727e:	b31b      	cbz	r3, 80072c8 <_dtoa_r+0x7a0>
 8007280:	9b08      	ldr	r3, [sp, #32]
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80af 	beq.w	80073e6 <_dtoa_r+0x8be>
 8007288:	2e00      	cmp	r6, #0
 800728a:	dd13      	ble.n	80072b4 <_dtoa_r+0x78c>
 800728c:	4639      	mov	r1, r7
 800728e:	4632      	mov	r2, r6
 8007290:	4620      	mov	r0, r4
 8007292:	f000 fe29 	bl	8007ee8 <__pow5mult>
 8007296:	ee18 2a10 	vmov	r2, s16
 800729a:	4601      	mov	r1, r0
 800729c:	4607      	mov	r7, r0
 800729e:	4620      	mov	r0, r4
 80072a0:	f000 fd78 	bl	8007d94 <__multiply>
 80072a4:	ee18 1a10 	vmov	r1, s16
 80072a8:	4680      	mov	r8, r0
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 fca4 	bl	8007bf8 <_Bfree>
 80072b0:	ee08 8a10 	vmov	s16, r8
 80072b4:	9b07      	ldr	r3, [sp, #28]
 80072b6:	1b9a      	subs	r2, r3, r6
 80072b8:	d006      	beq.n	80072c8 <_dtoa_r+0x7a0>
 80072ba:	ee18 1a10 	vmov	r1, s16
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 fe12 	bl	8007ee8 <__pow5mult>
 80072c4:	ee08 0a10 	vmov	s16, r0
 80072c8:	2101      	movs	r1, #1
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 fd4c 	bl	8007d68 <__i2b>
 80072d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	4606      	mov	r6, r0
 80072d6:	f340 8088 	ble.w	80073ea <_dtoa_r+0x8c2>
 80072da:	461a      	mov	r2, r3
 80072dc:	4601      	mov	r1, r0
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 fe02 	bl	8007ee8 <__pow5mult>
 80072e4:	9b06      	ldr	r3, [sp, #24]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	4606      	mov	r6, r0
 80072ea:	f340 8081 	ble.w	80073f0 <_dtoa_r+0x8c8>
 80072ee:	f04f 0800 	mov.w	r8, #0
 80072f2:	6933      	ldr	r3, [r6, #16]
 80072f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072f8:	6918      	ldr	r0, [r3, #16]
 80072fa:	f000 fce5 	bl	8007cc8 <__hi0bits>
 80072fe:	f1c0 0020 	rsb	r0, r0, #32
 8007302:	9b05      	ldr	r3, [sp, #20]
 8007304:	4418      	add	r0, r3
 8007306:	f010 001f 	ands.w	r0, r0, #31
 800730a:	f000 8092 	beq.w	8007432 <_dtoa_r+0x90a>
 800730e:	f1c0 0320 	rsb	r3, r0, #32
 8007312:	2b04      	cmp	r3, #4
 8007314:	f340 808a 	ble.w	800742c <_dtoa_r+0x904>
 8007318:	f1c0 001c 	rsb	r0, r0, #28
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	4403      	add	r3, r0
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	9b05      	ldr	r3, [sp, #20]
 8007324:	4403      	add	r3, r0
 8007326:	4405      	add	r5, r0
 8007328:	9305      	str	r3, [sp, #20]
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	dd07      	ble.n	8007340 <_dtoa_r+0x818>
 8007330:	ee18 1a10 	vmov	r1, s16
 8007334:	461a      	mov	r2, r3
 8007336:	4620      	mov	r0, r4
 8007338:	f000 fe30 	bl	8007f9c <__lshift>
 800733c:	ee08 0a10 	vmov	s16, r0
 8007340:	9b05      	ldr	r3, [sp, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	dd05      	ble.n	8007352 <_dtoa_r+0x82a>
 8007346:	4631      	mov	r1, r6
 8007348:	461a      	mov	r2, r3
 800734a:	4620      	mov	r0, r4
 800734c:	f000 fe26 	bl	8007f9c <__lshift>
 8007350:	4606      	mov	r6, r0
 8007352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d06e      	beq.n	8007436 <_dtoa_r+0x90e>
 8007358:	ee18 0a10 	vmov	r0, s16
 800735c:	4631      	mov	r1, r6
 800735e:	f000 fe8d 	bl	800807c <__mcmp>
 8007362:	2800      	cmp	r0, #0
 8007364:	da67      	bge.n	8007436 <_dtoa_r+0x90e>
 8007366:	9b00      	ldr	r3, [sp, #0]
 8007368:	3b01      	subs	r3, #1
 800736a:	ee18 1a10 	vmov	r1, s16
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	220a      	movs	r2, #10
 8007372:	2300      	movs	r3, #0
 8007374:	4620      	mov	r0, r4
 8007376:	f000 fc61 	bl	8007c3c <__multadd>
 800737a:	9b08      	ldr	r3, [sp, #32]
 800737c:	ee08 0a10 	vmov	s16, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 81b1 	beq.w	80076e8 <_dtoa_r+0xbc0>
 8007386:	2300      	movs	r3, #0
 8007388:	4639      	mov	r1, r7
 800738a:	220a      	movs	r2, #10
 800738c:	4620      	mov	r0, r4
 800738e:	f000 fc55 	bl	8007c3c <__multadd>
 8007392:	9b02      	ldr	r3, [sp, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	4607      	mov	r7, r0
 8007398:	f300 808e 	bgt.w	80074b8 <_dtoa_r+0x990>
 800739c:	9b06      	ldr	r3, [sp, #24]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	dc51      	bgt.n	8007446 <_dtoa_r+0x91e>
 80073a2:	e089      	b.n	80074b8 <_dtoa_r+0x990>
 80073a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073aa:	e74b      	b.n	8007244 <_dtoa_r+0x71c>
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	1e5e      	subs	r6, r3, #1
 80073b0:	9b07      	ldr	r3, [sp, #28]
 80073b2:	42b3      	cmp	r3, r6
 80073b4:	bfbf      	itttt	lt
 80073b6:	9b07      	ldrlt	r3, [sp, #28]
 80073b8:	9607      	strlt	r6, [sp, #28]
 80073ba:	1af2      	sublt	r2, r6, r3
 80073bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80073be:	bfb6      	itet	lt
 80073c0:	189b      	addlt	r3, r3, r2
 80073c2:	1b9e      	subge	r6, r3, r6
 80073c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	bfb8      	it	lt
 80073ca:	2600      	movlt	r6, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bfb7      	itett	lt
 80073d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80073d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80073d8:	1a9d      	sublt	r5, r3, r2
 80073da:	2300      	movlt	r3, #0
 80073dc:	e734      	b.n	8007248 <_dtoa_r+0x720>
 80073de:	9e07      	ldr	r6, [sp, #28]
 80073e0:	9d04      	ldr	r5, [sp, #16]
 80073e2:	9f08      	ldr	r7, [sp, #32]
 80073e4:	e73b      	b.n	800725e <_dtoa_r+0x736>
 80073e6:	9a07      	ldr	r2, [sp, #28]
 80073e8:	e767      	b.n	80072ba <_dtoa_r+0x792>
 80073ea:	9b06      	ldr	r3, [sp, #24]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	dc18      	bgt.n	8007422 <_dtoa_r+0x8fa>
 80073f0:	f1ba 0f00 	cmp.w	sl, #0
 80073f4:	d115      	bne.n	8007422 <_dtoa_r+0x8fa>
 80073f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073fa:	b993      	cbnz	r3, 8007422 <_dtoa_r+0x8fa>
 80073fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007400:	0d1b      	lsrs	r3, r3, #20
 8007402:	051b      	lsls	r3, r3, #20
 8007404:	b183      	cbz	r3, 8007428 <_dtoa_r+0x900>
 8007406:	9b04      	ldr	r3, [sp, #16]
 8007408:	3301      	adds	r3, #1
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	3301      	adds	r3, #1
 8007410:	9305      	str	r3, [sp, #20]
 8007412:	f04f 0801 	mov.w	r8, #1
 8007416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007418:	2b00      	cmp	r3, #0
 800741a:	f47f af6a 	bne.w	80072f2 <_dtoa_r+0x7ca>
 800741e:	2001      	movs	r0, #1
 8007420:	e76f      	b.n	8007302 <_dtoa_r+0x7da>
 8007422:	f04f 0800 	mov.w	r8, #0
 8007426:	e7f6      	b.n	8007416 <_dtoa_r+0x8ee>
 8007428:	4698      	mov	r8, r3
 800742a:	e7f4      	b.n	8007416 <_dtoa_r+0x8ee>
 800742c:	f43f af7d 	beq.w	800732a <_dtoa_r+0x802>
 8007430:	4618      	mov	r0, r3
 8007432:	301c      	adds	r0, #28
 8007434:	e772      	b.n	800731c <_dtoa_r+0x7f4>
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	dc37      	bgt.n	80074ac <_dtoa_r+0x984>
 800743c:	9b06      	ldr	r3, [sp, #24]
 800743e:	2b02      	cmp	r3, #2
 8007440:	dd34      	ble.n	80074ac <_dtoa_r+0x984>
 8007442:	9b03      	ldr	r3, [sp, #12]
 8007444:	9302      	str	r3, [sp, #8]
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	b96b      	cbnz	r3, 8007466 <_dtoa_r+0x93e>
 800744a:	4631      	mov	r1, r6
 800744c:	2205      	movs	r2, #5
 800744e:	4620      	mov	r0, r4
 8007450:	f000 fbf4 	bl	8007c3c <__multadd>
 8007454:	4601      	mov	r1, r0
 8007456:	4606      	mov	r6, r0
 8007458:	ee18 0a10 	vmov	r0, s16
 800745c:	f000 fe0e 	bl	800807c <__mcmp>
 8007460:	2800      	cmp	r0, #0
 8007462:	f73f adbb 	bgt.w	8006fdc <_dtoa_r+0x4b4>
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	9d01      	ldr	r5, [sp, #4]
 800746a:	43db      	mvns	r3, r3
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	f04f 0800 	mov.w	r8, #0
 8007472:	4631      	mov	r1, r6
 8007474:	4620      	mov	r0, r4
 8007476:	f000 fbbf 	bl	8007bf8 <_Bfree>
 800747a:	2f00      	cmp	r7, #0
 800747c:	f43f aea4 	beq.w	80071c8 <_dtoa_r+0x6a0>
 8007480:	f1b8 0f00 	cmp.w	r8, #0
 8007484:	d005      	beq.n	8007492 <_dtoa_r+0x96a>
 8007486:	45b8      	cmp	r8, r7
 8007488:	d003      	beq.n	8007492 <_dtoa_r+0x96a>
 800748a:	4641      	mov	r1, r8
 800748c:	4620      	mov	r0, r4
 800748e:	f000 fbb3 	bl	8007bf8 <_Bfree>
 8007492:	4639      	mov	r1, r7
 8007494:	4620      	mov	r0, r4
 8007496:	f000 fbaf 	bl	8007bf8 <_Bfree>
 800749a:	e695      	b.n	80071c8 <_dtoa_r+0x6a0>
 800749c:	2600      	movs	r6, #0
 800749e:	4637      	mov	r7, r6
 80074a0:	e7e1      	b.n	8007466 <_dtoa_r+0x93e>
 80074a2:	9700      	str	r7, [sp, #0]
 80074a4:	4637      	mov	r7, r6
 80074a6:	e599      	b.n	8006fdc <_dtoa_r+0x4b4>
 80074a8:	40240000 	.word	0x40240000
 80074ac:	9b08      	ldr	r3, [sp, #32]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 80ca 	beq.w	8007648 <_dtoa_r+0xb20>
 80074b4:	9b03      	ldr	r3, [sp, #12]
 80074b6:	9302      	str	r3, [sp, #8]
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	dd05      	ble.n	80074c8 <_dtoa_r+0x9a0>
 80074bc:	4639      	mov	r1, r7
 80074be:	462a      	mov	r2, r5
 80074c0:	4620      	mov	r0, r4
 80074c2:	f000 fd6b 	bl	8007f9c <__lshift>
 80074c6:	4607      	mov	r7, r0
 80074c8:	f1b8 0f00 	cmp.w	r8, #0
 80074cc:	d05b      	beq.n	8007586 <_dtoa_r+0xa5e>
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	4620      	mov	r0, r4
 80074d2:	f000 fb51 	bl	8007b78 <_Balloc>
 80074d6:	4605      	mov	r5, r0
 80074d8:	b928      	cbnz	r0, 80074e6 <_dtoa_r+0x9be>
 80074da:	4b87      	ldr	r3, [pc, #540]	; (80076f8 <_dtoa_r+0xbd0>)
 80074dc:	4602      	mov	r2, r0
 80074de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80074e2:	f7ff bb3b 	b.w	8006b5c <_dtoa_r+0x34>
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	3202      	adds	r2, #2
 80074ea:	0092      	lsls	r2, r2, #2
 80074ec:	f107 010c 	add.w	r1, r7, #12
 80074f0:	300c      	adds	r0, #12
 80074f2:	f000 fb33 	bl	8007b5c <memcpy>
 80074f6:	2201      	movs	r2, #1
 80074f8:	4629      	mov	r1, r5
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 fd4e 	bl	8007f9c <__lshift>
 8007500:	9b01      	ldr	r3, [sp, #4]
 8007502:	f103 0901 	add.w	r9, r3, #1
 8007506:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800750a:	4413      	add	r3, r2
 800750c:	9305      	str	r3, [sp, #20]
 800750e:	f00a 0301 	and.w	r3, sl, #1
 8007512:	46b8      	mov	r8, r7
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	4607      	mov	r7, r0
 8007518:	4631      	mov	r1, r6
 800751a:	ee18 0a10 	vmov	r0, s16
 800751e:	f7ff fa77 	bl	8006a10 <quorem>
 8007522:	4641      	mov	r1, r8
 8007524:	9002      	str	r0, [sp, #8]
 8007526:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800752a:	ee18 0a10 	vmov	r0, s16
 800752e:	f000 fda5 	bl	800807c <__mcmp>
 8007532:	463a      	mov	r2, r7
 8007534:	9003      	str	r0, [sp, #12]
 8007536:	4631      	mov	r1, r6
 8007538:	4620      	mov	r0, r4
 800753a:	f000 fdbb 	bl	80080b4 <__mdiff>
 800753e:	68c2      	ldr	r2, [r0, #12]
 8007540:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007544:	4605      	mov	r5, r0
 8007546:	bb02      	cbnz	r2, 800758a <_dtoa_r+0xa62>
 8007548:	4601      	mov	r1, r0
 800754a:	ee18 0a10 	vmov	r0, s16
 800754e:	f000 fd95 	bl	800807c <__mcmp>
 8007552:	4602      	mov	r2, r0
 8007554:	4629      	mov	r1, r5
 8007556:	4620      	mov	r0, r4
 8007558:	9207      	str	r2, [sp, #28]
 800755a:	f000 fb4d 	bl	8007bf8 <_Bfree>
 800755e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007562:	ea43 0102 	orr.w	r1, r3, r2
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	430b      	orrs	r3, r1
 800756a:	464d      	mov	r5, r9
 800756c:	d10f      	bne.n	800758e <_dtoa_r+0xa66>
 800756e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007572:	d02a      	beq.n	80075ca <_dtoa_r+0xaa2>
 8007574:	9b03      	ldr	r3, [sp, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	dd02      	ble.n	8007580 <_dtoa_r+0xa58>
 800757a:	9b02      	ldr	r3, [sp, #8]
 800757c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007580:	f88b a000 	strb.w	sl, [fp]
 8007584:	e775      	b.n	8007472 <_dtoa_r+0x94a>
 8007586:	4638      	mov	r0, r7
 8007588:	e7ba      	b.n	8007500 <_dtoa_r+0x9d8>
 800758a:	2201      	movs	r2, #1
 800758c:	e7e2      	b.n	8007554 <_dtoa_r+0xa2c>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	db04      	blt.n	800759e <_dtoa_r+0xa76>
 8007594:	9906      	ldr	r1, [sp, #24]
 8007596:	430b      	orrs	r3, r1
 8007598:	9904      	ldr	r1, [sp, #16]
 800759a:	430b      	orrs	r3, r1
 800759c:	d122      	bne.n	80075e4 <_dtoa_r+0xabc>
 800759e:	2a00      	cmp	r2, #0
 80075a0:	ddee      	ble.n	8007580 <_dtoa_r+0xa58>
 80075a2:	ee18 1a10 	vmov	r1, s16
 80075a6:	2201      	movs	r2, #1
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 fcf7 	bl	8007f9c <__lshift>
 80075ae:	4631      	mov	r1, r6
 80075b0:	ee08 0a10 	vmov	s16, r0
 80075b4:	f000 fd62 	bl	800807c <__mcmp>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	dc03      	bgt.n	80075c4 <_dtoa_r+0xa9c>
 80075bc:	d1e0      	bne.n	8007580 <_dtoa_r+0xa58>
 80075be:	f01a 0f01 	tst.w	sl, #1
 80075c2:	d0dd      	beq.n	8007580 <_dtoa_r+0xa58>
 80075c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075c8:	d1d7      	bne.n	800757a <_dtoa_r+0xa52>
 80075ca:	2339      	movs	r3, #57	; 0x39
 80075cc:	f88b 3000 	strb.w	r3, [fp]
 80075d0:	462b      	mov	r3, r5
 80075d2:	461d      	mov	r5, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075da:	2a39      	cmp	r2, #57	; 0x39
 80075dc:	d071      	beq.n	80076c2 <_dtoa_r+0xb9a>
 80075de:	3201      	adds	r2, #1
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	e746      	b.n	8007472 <_dtoa_r+0x94a>
 80075e4:	2a00      	cmp	r2, #0
 80075e6:	dd07      	ble.n	80075f8 <_dtoa_r+0xad0>
 80075e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075ec:	d0ed      	beq.n	80075ca <_dtoa_r+0xaa2>
 80075ee:	f10a 0301 	add.w	r3, sl, #1
 80075f2:	f88b 3000 	strb.w	r3, [fp]
 80075f6:	e73c      	b.n	8007472 <_dtoa_r+0x94a>
 80075f8:	9b05      	ldr	r3, [sp, #20]
 80075fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80075fe:	4599      	cmp	r9, r3
 8007600:	d047      	beq.n	8007692 <_dtoa_r+0xb6a>
 8007602:	ee18 1a10 	vmov	r1, s16
 8007606:	2300      	movs	r3, #0
 8007608:	220a      	movs	r2, #10
 800760a:	4620      	mov	r0, r4
 800760c:	f000 fb16 	bl	8007c3c <__multadd>
 8007610:	45b8      	cmp	r8, r7
 8007612:	ee08 0a10 	vmov	s16, r0
 8007616:	f04f 0300 	mov.w	r3, #0
 800761a:	f04f 020a 	mov.w	r2, #10
 800761e:	4641      	mov	r1, r8
 8007620:	4620      	mov	r0, r4
 8007622:	d106      	bne.n	8007632 <_dtoa_r+0xb0a>
 8007624:	f000 fb0a 	bl	8007c3c <__multadd>
 8007628:	4680      	mov	r8, r0
 800762a:	4607      	mov	r7, r0
 800762c:	f109 0901 	add.w	r9, r9, #1
 8007630:	e772      	b.n	8007518 <_dtoa_r+0x9f0>
 8007632:	f000 fb03 	bl	8007c3c <__multadd>
 8007636:	4639      	mov	r1, r7
 8007638:	4680      	mov	r8, r0
 800763a:	2300      	movs	r3, #0
 800763c:	220a      	movs	r2, #10
 800763e:	4620      	mov	r0, r4
 8007640:	f000 fafc 	bl	8007c3c <__multadd>
 8007644:	4607      	mov	r7, r0
 8007646:	e7f1      	b.n	800762c <_dtoa_r+0xb04>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	9302      	str	r3, [sp, #8]
 800764c:	9d01      	ldr	r5, [sp, #4]
 800764e:	ee18 0a10 	vmov	r0, s16
 8007652:	4631      	mov	r1, r6
 8007654:	f7ff f9dc 	bl	8006a10 <quorem>
 8007658:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800765c:	9b01      	ldr	r3, [sp, #4]
 800765e:	f805 ab01 	strb.w	sl, [r5], #1
 8007662:	1aea      	subs	r2, r5, r3
 8007664:	9b02      	ldr	r3, [sp, #8]
 8007666:	4293      	cmp	r3, r2
 8007668:	dd09      	ble.n	800767e <_dtoa_r+0xb56>
 800766a:	ee18 1a10 	vmov	r1, s16
 800766e:	2300      	movs	r3, #0
 8007670:	220a      	movs	r2, #10
 8007672:	4620      	mov	r0, r4
 8007674:	f000 fae2 	bl	8007c3c <__multadd>
 8007678:	ee08 0a10 	vmov	s16, r0
 800767c:	e7e7      	b.n	800764e <_dtoa_r+0xb26>
 800767e:	9b02      	ldr	r3, [sp, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	bfc8      	it	gt
 8007684:	461d      	movgt	r5, r3
 8007686:	9b01      	ldr	r3, [sp, #4]
 8007688:	bfd8      	it	le
 800768a:	2501      	movle	r5, #1
 800768c:	441d      	add	r5, r3
 800768e:	f04f 0800 	mov.w	r8, #0
 8007692:	ee18 1a10 	vmov	r1, s16
 8007696:	2201      	movs	r2, #1
 8007698:	4620      	mov	r0, r4
 800769a:	f000 fc7f 	bl	8007f9c <__lshift>
 800769e:	4631      	mov	r1, r6
 80076a0:	ee08 0a10 	vmov	s16, r0
 80076a4:	f000 fcea 	bl	800807c <__mcmp>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	dc91      	bgt.n	80075d0 <_dtoa_r+0xaa8>
 80076ac:	d102      	bne.n	80076b4 <_dtoa_r+0xb8c>
 80076ae:	f01a 0f01 	tst.w	sl, #1
 80076b2:	d18d      	bne.n	80075d0 <_dtoa_r+0xaa8>
 80076b4:	462b      	mov	r3, r5
 80076b6:	461d      	mov	r5, r3
 80076b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076bc:	2a30      	cmp	r2, #48	; 0x30
 80076be:	d0fa      	beq.n	80076b6 <_dtoa_r+0xb8e>
 80076c0:	e6d7      	b.n	8007472 <_dtoa_r+0x94a>
 80076c2:	9a01      	ldr	r2, [sp, #4]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d184      	bne.n	80075d2 <_dtoa_r+0xaaa>
 80076c8:	9b00      	ldr	r3, [sp, #0]
 80076ca:	3301      	adds	r3, #1
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	2331      	movs	r3, #49	; 0x31
 80076d0:	7013      	strb	r3, [r2, #0]
 80076d2:	e6ce      	b.n	8007472 <_dtoa_r+0x94a>
 80076d4:	4b09      	ldr	r3, [pc, #36]	; (80076fc <_dtoa_r+0xbd4>)
 80076d6:	f7ff ba95 	b.w	8006c04 <_dtoa_r+0xdc>
 80076da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f47f aa6e 	bne.w	8006bbe <_dtoa_r+0x96>
 80076e2:	4b07      	ldr	r3, [pc, #28]	; (8007700 <_dtoa_r+0xbd8>)
 80076e4:	f7ff ba8e 	b.w	8006c04 <_dtoa_r+0xdc>
 80076e8:	9b02      	ldr	r3, [sp, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dcae      	bgt.n	800764c <_dtoa_r+0xb24>
 80076ee:	9b06      	ldr	r3, [sp, #24]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	f73f aea8 	bgt.w	8007446 <_dtoa_r+0x91e>
 80076f6:	e7a9      	b.n	800764c <_dtoa_r+0xb24>
 80076f8:	08008bcb 	.word	0x08008bcb
 80076fc:	08008b28 	.word	0x08008b28
 8007700:	08008b4c 	.word	0x08008b4c

08007704 <__sflush_r>:
 8007704:	898a      	ldrh	r2, [r1, #12]
 8007706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770a:	4605      	mov	r5, r0
 800770c:	0710      	lsls	r0, r2, #28
 800770e:	460c      	mov	r4, r1
 8007710:	d458      	bmi.n	80077c4 <__sflush_r+0xc0>
 8007712:	684b      	ldr	r3, [r1, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	dc05      	bgt.n	8007724 <__sflush_r+0x20>
 8007718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800771a:	2b00      	cmp	r3, #0
 800771c:	dc02      	bgt.n	8007724 <__sflush_r+0x20>
 800771e:	2000      	movs	r0, #0
 8007720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007726:	2e00      	cmp	r6, #0
 8007728:	d0f9      	beq.n	800771e <__sflush_r+0x1a>
 800772a:	2300      	movs	r3, #0
 800772c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007730:	682f      	ldr	r7, [r5, #0]
 8007732:	602b      	str	r3, [r5, #0]
 8007734:	d032      	beq.n	800779c <__sflush_r+0x98>
 8007736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	075a      	lsls	r2, r3, #29
 800773c:	d505      	bpl.n	800774a <__sflush_r+0x46>
 800773e:	6863      	ldr	r3, [r4, #4]
 8007740:	1ac0      	subs	r0, r0, r3
 8007742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007744:	b10b      	cbz	r3, 800774a <__sflush_r+0x46>
 8007746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007748:	1ac0      	subs	r0, r0, r3
 800774a:	2300      	movs	r3, #0
 800774c:	4602      	mov	r2, r0
 800774e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007750:	6a21      	ldr	r1, [r4, #32]
 8007752:	4628      	mov	r0, r5
 8007754:	47b0      	blx	r6
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	d106      	bne.n	800776a <__sflush_r+0x66>
 800775c:	6829      	ldr	r1, [r5, #0]
 800775e:	291d      	cmp	r1, #29
 8007760:	d82c      	bhi.n	80077bc <__sflush_r+0xb8>
 8007762:	4a2a      	ldr	r2, [pc, #168]	; (800780c <__sflush_r+0x108>)
 8007764:	40ca      	lsrs	r2, r1
 8007766:	07d6      	lsls	r6, r2, #31
 8007768:	d528      	bpl.n	80077bc <__sflush_r+0xb8>
 800776a:	2200      	movs	r2, #0
 800776c:	6062      	str	r2, [r4, #4]
 800776e:	04d9      	lsls	r1, r3, #19
 8007770:	6922      	ldr	r2, [r4, #16]
 8007772:	6022      	str	r2, [r4, #0]
 8007774:	d504      	bpl.n	8007780 <__sflush_r+0x7c>
 8007776:	1c42      	adds	r2, r0, #1
 8007778:	d101      	bne.n	800777e <__sflush_r+0x7a>
 800777a:	682b      	ldr	r3, [r5, #0]
 800777c:	b903      	cbnz	r3, 8007780 <__sflush_r+0x7c>
 800777e:	6560      	str	r0, [r4, #84]	; 0x54
 8007780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007782:	602f      	str	r7, [r5, #0]
 8007784:	2900      	cmp	r1, #0
 8007786:	d0ca      	beq.n	800771e <__sflush_r+0x1a>
 8007788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800778c:	4299      	cmp	r1, r3
 800778e:	d002      	beq.n	8007796 <__sflush_r+0x92>
 8007790:	4628      	mov	r0, r5
 8007792:	f000 fd8b 	bl	80082ac <_free_r>
 8007796:	2000      	movs	r0, #0
 8007798:	6360      	str	r0, [r4, #52]	; 0x34
 800779a:	e7c1      	b.n	8007720 <__sflush_r+0x1c>
 800779c:	6a21      	ldr	r1, [r4, #32]
 800779e:	2301      	movs	r3, #1
 80077a0:	4628      	mov	r0, r5
 80077a2:	47b0      	blx	r6
 80077a4:	1c41      	adds	r1, r0, #1
 80077a6:	d1c7      	bne.n	8007738 <__sflush_r+0x34>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0c4      	beq.n	8007738 <__sflush_r+0x34>
 80077ae:	2b1d      	cmp	r3, #29
 80077b0:	d001      	beq.n	80077b6 <__sflush_r+0xb2>
 80077b2:	2b16      	cmp	r3, #22
 80077b4:	d101      	bne.n	80077ba <__sflush_r+0xb6>
 80077b6:	602f      	str	r7, [r5, #0]
 80077b8:	e7b1      	b.n	800771e <__sflush_r+0x1a>
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c0:	81a3      	strh	r3, [r4, #12]
 80077c2:	e7ad      	b.n	8007720 <__sflush_r+0x1c>
 80077c4:	690f      	ldr	r7, [r1, #16]
 80077c6:	2f00      	cmp	r7, #0
 80077c8:	d0a9      	beq.n	800771e <__sflush_r+0x1a>
 80077ca:	0793      	lsls	r3, r2, #30
 80077cc:	680e      	ldr	r6, [r1, #0]
 80077ce:	bf08      	it	eq
 80077d0:	694b      	ldreq	r3, [r1, #20]
 80077d2:	600f      	str	r7, [r1, #0]
 80077d4:	bf18      	it	ne
 80077d6:	2300      	movne	r3, #0
 80077d8:	eba6 0807 	sub.w	r8, r6, r7
 80077dc:	608b      	str	r3, [r1, #8]
 80077de:	f1b8 0f00 	cmp.w	r8, #0
 80077e2:	dd9c      	ble.n	800771e <__sflush_r+0x1a>
 80077e4:	6a21      	ldr	r1, [r4, #32]
 80077e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077e8:	4643      	mov	r3, r8
 80077ea:	463a      	mov	r2, r7
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b0      	blx	r6
 80077f0:	2800      	cmp	r0, #0
 80077f2:	dc06      	bgt.n	8007802 <__sflush_r+0xfe>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077fa:	81a3      	strh	r3, [r4, #12]
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007800:	e78e      	b.n	8007720 <__sflush_r+0x1c>
 8007802:	4407      	add	r7, r0
 8007804:	eba8 0800 	sub.w	r8, r8, r0
 8007808:	e7e9      	b.n	80077de <__sflush_r+0xda>
 800780a:	bf00      	nop
 800780c:	20400001 	.word	0x20400001

08007810 <_fflush_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	690b      	ldr	r3, [r1, #16]
 8007814:	4605      	mov	r5, r0
 8007816:	460c      	mov	r4, r1
 8007818:	b913      	cbnz	r3, 8007820 <_fflush_r+0x10>
 800781a:	2500      	movs	r5, #0
 800781c:	4628      	mov	r0, r5
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	b118      	cbz	r0, 800782a <_fflush_r+0x1a>
 8007822:	6983      	ldr	r3, [r0, #24]
 8007824:	b90b      	cbnz	r3, 800782a <_fflush_r+0x1a>
 8007826:	f000 f887 	bl	8007938 <__sinit>
 800782a:	4b14      	ldr	r3, [pc, #80]	; (800787c <_fflush_r+0x6c>)
 800782c:	429c      	cmp	r4, r3
 800782e:	d11b      	bne.n	8007868 <_fflush_r+0x58>
 8007830:	686c      	ldr	r4, [r5, #4]
 8007832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0ef      	beq.n	800781a <_fflush_r+0xa>
 800783a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800783c:	07d0      	lsls	r0, r2, #31
 800783e:	d404      	bmi.n	800784a <_fflush_r+0x3a>
 8007840:	0599      	lsls	r1, r3, #22
 8007842:	d402      	bmi.n	800784a <_fflush_r+0x3a>
 8007844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007846:	f000 f91a 	bl	8007a7e <__retarget_lock_acquire_recursive>
 800784a:	4628      	mov	r0, r5
 800784c:	4621      	mov	r1, r4
 800784e:	f7ff ff59 	bl	8007704 <__sflush_r>
 8007852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007854:	07da      	lsls	r2, r3, #31
 8007856:	4605      	mov	r5, r0
 8007858:	d4e0      	bmi.n	800781c <_fflush_r+0xc>
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	059b      	lsls	r3, r3, #22
 800785e:	d4dd      	bmi.n	800781c <_fflush_r+0xc>
 8007860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007862:	f000 f90d 	bl	8007a80 <__retarget_lock_release_recursive>
 8007866:	e7d9      	b.n	800781c <_fflush_r+0xc>
 8007868:	4b05      	ldr	r3, [pc, #20]	; (8007880 <_fflush_r+0x70>)
 800786a:	429c      	cmp	r4, r3
 800786c:	d101      	bne.n	8007872 <_fflush_r+0x62>
 800786e:	68ac      	ldr	r4, [r5, #8]
 8007870:	e7df      	b.n	8007832 <_fflush_r+0x22>
 8007872:	4b04      	ldr	r3, [pc, #16]	; (8007884 <_fflush_r+0x74>)
 8007874:	429c      	cmp	r4, r3
 8007876:	bf08      	it	eq
 8007878:	68ec      	ldreq	r4, [r5, #12]
 800787a:	e7da      	b.n	8007832 <_fflush_r+0x22>
 800787c:	08008bfc 	.word	0x08008bfc
 8007880:	08008c1c 	.word	0x08008c1c
 8007884:	08008bdc 	.word	0x08008bdc

08007888 <std>:
 8007888:	2300      	movs	r3, #0
 800788a:	b510      	push	{r4, lr}
 800788c:	4604      	mov	r4, r0
 800788e:	e9c0 3300 	strd	r3, r3, [r0]
 8007892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007896:	6083      	str	r3, [r0, #8]
 8007898:	8181      	strh	r1, [r0, #12]
 800789a:	6643      	str	r3, [r0, #100]	; 0x64
 800789c:	81c2      	strh	r2, [r0, #14]
 800789e:	6183      	str	r3, [r0, #24]
 80078a0:	4619      	mov	r1, r3
 80078a2:	2208      	movs	r2, #8
 80078a4:	305c      	adds	r0, #92	; 0x5c
 80078a6:	f7fe faf3 	bl	8005e90 <memset>
 80078aa:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <std+0x38>)
 80078ac:	6263      	str	r3, [r4, #36]	; 0x24
 80078ae:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <std+0x3c>)
 80078b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80078b2:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <std+0x40>)
 80078b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078b6:	4b05      	ldr	r3, [pc, #20]	; (80078cc <std+0x44>)
 80078b8:	6224      	str	r4, [r4, #32]
 80078ba:	6323      	str	r3, [r4, #48]	; 0x30
 80078bc:	bd10      	pop	{r4, pc}
 80078be:	bf00      	nop
 80078c0:	08008741 	.word	0x08008741
 80078c4:	08008763 	.word	0x08008763
 80078c8:	0800879b 	.word	0x0800879b
 80078cc:	080087bf 	.word	0x080087bf

080078d0 <_cleanup_r>:
 80078d0:	4901      	ldr	r1, [pc, #4]	; (80078d8 <_cleanup_r+0x8>)
 80078d2:	f000 b8af 	b.w	8007a34 <_fwalk_reent>
 80078d6:	bf00      	nop
 80078d8:	08007811 	.word	0x08007811

080078dc <__sfmoreglue>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	2268      	movs	r2, #104	; 0x68
 80078e0:	1e4d      	subs	r5, r1, #1
 80078e2:	4355      	muls	r5, r2
 80078e4:	460e      	mov	r6, r1
 80078e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078ea:	f000 fd4b 	bl	8008384 <_malloc_r>
 80078ee:	4604      	mov	r4, r0
 80078f0:	b140      	cbz	r0, 8007904 <__sfmoreglue+0x28>
 80078f2:	2100      	movs	r1, #0
 80078f4:	e9c0 1600 	strd	r1, r6, [r0]
 80078f8:	300c      	adds	r0, #12
 80078fa:	60a0      	str	r0, [r4, #8]
 80078fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007900:	f7fe fac6 	bl	8005e90 <memset>
 8007904:	4620      	mov	r0, r4
 8007906:	bd70      	pop	{r4, r5, r6, pc}

08007908 <__sfp_lock_acquire>:
 8007908:	4801      	ldr	r0, [pc, #4]	; (8007910 <__sfp_lock_acquire+0x8>)
 800790a:	f000 b8b8 	b.w	8007a7e <__retarget_lock_acquire_recursive>
 800790e:	bf00      	nop
 8007910:	20000383 	.word	0x20000383

08007914 <__sfp_lock_release>:
 8007914:	4801      	ldr	r0, [pc, #4]	; (800791c <__sfp_lock_release+0x8>)
 8007916:	f000 b8b3 	b.w	8007a80 <__retarget_lock_release_recursive>
 800791a:	bf00      	nop
 800791c:	20000383 	.word	0x20000383

08007920 <__sinit_lock_acquire>:
 8007920:	4801      	ldr	r0, [pc, #4]	; (8007928 <__sinit_lock_acquire+0x8>)
 8007922:	f000 b8ac 	b.w	8007a7e <__retarget_lock_acquire_recursive>
 8007926:	bf00      	nop
 8007928:	20000384 	.word	0x20000384

0800792c <__sinit_lock_release>:
 800792c:	4801      	ldr	r0, [pc, #4]	; (8007934 <__sinit_lock_release+0x8>)
 800792e:	f000 b8a7 	b.w	8007a80 <__retarget_lock_release_recursive>
 8007932:	bf00      	nop
 8007934:	20000384 	.word	0x20000384

08007938 <__sinit>:
 8007938:	b510      	push	{r4, lr}
 800793a:	4604      	mov	r4, r0
 800793c:	f7ff fff0 	bl	8007920 <__sinit_lock_acquire>
 8007940:	69a3      	ldr	r3, [r4, #24]
 8007942:	b11b      	cbz	r3, 800794c <__sinit+0x14>
 8007944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007948:	f7ff bff0 	b.w	800792c <__sinit_lock_release>
 800794c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007950:	6523      	str	r3, [r4, #80]	; 0x50
 8007952:	4b13      	ldr	r3, [pc, #76]	; (80079a0 <__sinit+0x68>)
 8007954:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <__sinit+0x6c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	62a2      	str	r2, [r4, #40]	; 0x28
 800795a:	42a3      	cmp	r3, r4
 800795c:	bf04      	itt	eq
 800795e:	2301      	moveq	r3, #1
 8007960:	61a3      	streq	r3, [r4, #24]
 8007962:	4620      	mov	r0, r4
 8007964:	f000 f820 	bl	80079a8 <__sfp>
 8007968:	6060      	str	r0, [r4, #4]
 800796a:	4620      	mov	r0, r4
 800796c:	f000 f81c 	bl	80079a8 <__sfp>
 8007970:	60a0      	str	r0, [r4, #8]
 8007972:	4620      	mov	r0, r4
 8007974:	f000 f818 	bl	80079a8 <__sfp>
 8007978:	2200      	movs	r2, #0
 800797a:	60e0      	str	r0, [r4, #12]
 800797c:	2104      	movs	r1, #4
 800797e:	6860      	ldr	r0, [r4, #4]
 8007980:	f7ff ff82 	bl	8007888 <std>
 8007984:	68a0      	ldr	r0, [r4, #8]
 8007986:	2201      	movs	r2, #1
 8007988:	2109      	movs	r1, #9
 800798a:	f7ff ff7d 	bl	8007888 <std>
 800798e:	68e0      	ldr	r0, [r4, #12]
 8007990:	2202      	movs	r2, #2
 8007992:	2112      	movs	r1, #18
 8007994:	f7ff ff78 	bl	8007888 <std>
 8007998:	2301      	movs	r3, #1
 800799a:	61a3      	str	r3, [r4, #24]
 800799c:	e7d2      	b.n	8007944 <__sinit+0xc>
 800799e:	bf00      	nop
 80079a0:	08008b14 	.word	0x08008b14
 80079a4:	080078d1 	.word	0x080078d1

080079a8 <__sfp>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	4607      	mov	r7, r0
 80079ac:	f7ff ffac 	bl	8007908 <__sfp_lock_acquire>
 80079b0:	4b1e      	ldr	r3, [pc, #120]	; (8007a2c <__sfp+0x84>)
 80079b2:	681e      	ldr	r6, [r3, #0]
 80079b4:	69b3      	ldr	r3, [r6, #24]
 80079b6:	b913      	cbnz	r3, 80079be <__sfp+0x16>
 80079b8:	4630      	mov	r0, r6
 80079ba:	f7ff ffbd 	bl	8007938 <__sinit>
 80079be:	3648      	adds	r6, #72	; 0x48
 80079c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	d503      	bpl.n	80079d0 <__sfp+0x28>
 80079c8:	6833      	ldr	r3, [r6, #0]
 80079ca:	b30b      	cbz	r3, 8007a10 <__sfp+0x68>
 80079cc:	6836      	ldr	r6, [r6, #0]
 80079ce:	e7f7      	b.n	80079c0 <__sfp+0x18>
 80079d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079d4:	b9d5      	cbnz	r5, 8007a0c <__sfp+0x64>
 80079d6:	4b16      	ldr	r3, [pc, #88]	; (8007a30 <__sfp+0x88>)
 80079d8:	60e3      	str	r3, [r4, #12]
 80079da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079de:	6665      	str	r5, [r4, #100]	; 0x64
 80079e0:	f000 f84c 	bl	8007a7c <__retarget_lock_init_recursive>
 80079e4:	f7ff ff96 	bl	8007914 <__sfp_lock_release>
 80079e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079f0:	6025      	str	r5, [r4, #0]
 80079f2:	61a5      	str	r5, [r4, #24]
 80079f4:	2208      	movs	r2, #8
 80079f6:	4629      	mov	r1, r5
 80079f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079fc:	f7fe fa48 	bl	8005e90 <memset>
 8007a00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a08:	4620      	mov	r0, r4
 8007a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a0c:	3468      	adds	r4, #104	; 0x68
 8007a0e:	e7d9      	b.n	80079c4 <__sfp+0x1c>
 8007a10:	2104      	movs	r1, #4
 8007a12:	4638      	mov	r0, r7
 8007a14:	f7ff ff62 	bl	80078dc <__sfmoreglue>
 8007a18:	4604      	mov	r4, r0
 8007a1a:	6030      	str	r0, [r6, #0]
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d1d5      	bne.n	80079cc <__sfp+0x24>
 8007a20:	f7ff ff78 	bl	8007914 <__sfp_lock_release>
 8007a24:	230c      	movs	r3, #12
 8007a26:	603b      	str	r3, [r7, #0]
 8007a28:	e7ee      	b.n	8007a08 <__sfp+0x60>
 8007a2a:	bf00      	nop
 8007a2c:	08008b14 	.word	0x08008b14
 8007a30:	ffff0001 	.word	0xffff0001

08007a34 <_fwalk_reent>:
 8007a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a38:	4606      	mov	r6, r0
 8007a3a:	4688      	mov	r8, r1
 8007a3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a40:	2700      	movs	r7, #0
 8007a42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a46:	f1b9 0901 	subs.w	r9, r9, #1
 8007a4a:	d505      	bpl.n	8007a58 <_fwalk_reent+0x24>
 8007a4c:	6824      	ldr	r4, [r4, #0]
 8007a4e:	2c00      	cmp	r4, #0
 8007a50:	d1f7      	bne.n	8007a42 <_fwalk_reent+0xe>
 8007a52:	4638      	mov	r0, r7
 8007a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a58:	89ab      	ldrh	r3, [r5, #12]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d907      	bls.n	8007a6e <_fwalk_reent+0x3a>
 8007a5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a62:	3301      	adds	r3, #1
 8007a64:	d003      	beq.n	8007a6e <_fwalk_reent+0x3a>
 8007a66:	4629      	mov	r1, r5
 8007a68:	4630      	mov	r0, r6
 8007a6a:	47c0      	blx	r8
 8007a6c:	4307      	orrs	r7, r0
 8007a6e:	3568      	adds	r5, #104	; 0x68
 8007a70:	e7e9      	b.n	8007a46 <_fwalk_reent+0x12>
	...

08007a74 <_localeconv_r>:
 8007a74:	4800      	ldr	r0, [pc, #0]	; (8007a78 <_localeconv_r+0x4>)
 8007a76:	4770      	bx	lr
 8007a78:	20000190 	.word	0x20000190

08007a7c <__retarget_lock_init_recursive>:
 8007a7c:	4770      	bx	lr

08007a7e <__retarget_lock_acquire_recursive>:
 8007a7e:	4770      	bx	lr

08007a80 <__retarget_lock_release_recursive>:
 8007a80:	4770      	bx	lr

08007a82 <__swhatbuf_r>:
 8007a82:	b570      	push	{r4, r5, r6, lr}
 8007a84:	460e      	mov	r6, r1
 8007a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8a:	2900      	cmp	r1, #0
 8007a8c:	b096      	sub	sp, #88	; 0x58
 8007a8e:	4614      	mov	r4, r2
 8007a90:	461d      	mov	r5, r3
 8007a92:	da08      	bge.n	8007aa6 <__swhatbuf_r+0x24>
 8007a94:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	602a      	str	r2, [r5, #0]
 8007a9c:	061a      	lsls	r2, r3, #24
 8007a9e:	d410      	bmi.n	8007ac2 <__swhatbuf_r+0x40>
 8007aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa4:	e00e      	b.n	8007ac4 <__swhatbuf_r+0x42>
 8007aa6:	466a      	mov	r2, sp
 8007aa8:	f000 fee0 	bl	800886c <_fstat_r>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	dbf1      	blt.n	8007a94 <__swhatbuf_r+0x12>
 8007ab0:	9a01      	ldr	r2, [sp, #4]
 8007ab2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ab6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007aba:	425a      	negs	r2, r3
 8007abc:	415a      	adcs	r2, r3
 8007abe:	602a      	str	r2, [r5, #0]
 8007ac0:	e7ee      	b.n	8007aa0 <__swhatbuf_r+0x1e>
 8007ac2:	2340      	movs	r3, #64	; 0x40
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	b016      	add	sp, #88	; 0x58
 8007aca:	bd70      	pop	{r4, r5, r6, pc}

08007acc <__smakebuf_r>:
 8007acc:	898b      	ldrh	r3, [r1, #12]
 8007ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ad0:	079d      	lsls	r5, r3, #30
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	d507      	bpl.n	8007ae8 <__smakebuf_r+0x1c>
 8007ad8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	6123      	str	r3, [r4, #16]
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	6163      	str	r3, [r4, #20]
 8007ae4:	b002      	add	sp, #8
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}
 8007ae8:	ab01      	add	r3, sp, #4
 8007aea:	466a      	mov	r2, sp
 8007aec:	f7ff ffc9 	bl	8007a82 <__swhatbuf_r>
 8007af0:	9900      	ldr	r1, [sp, #0]
 8007af2:	4605      	mov	r5, r0
 8007af4:	4630      	mov	r0, r6
 8007af6:	f000 fc45 	bl	8008384 <_malloc_r>
 8007afa:	b948      	cbnz	r0, 8007b10 <__smakebuf_r+0x44>
 8007afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b00:	059a      	lsls	r2, r3, #22
 8007b02:	d4ef      	bmi.n	8007ae4 <__smakebuf_r+0x18>
 8007b04:	f023 0303 	bic.w	r3, r3, #3
 8007b08:	f043 0302 	orr.w	r3, r3, #2
 8007b0c:	81a3      	strh	r3, [r4, #12]
 8007b0e:	e7e3      	b.n	8007ad8 <__smakebuf_r+0xc>
 8007b10:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <__smakebuf_r+0x7c>)
 8007b12:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	6020      	str	r0, [r4, #0]
 8007b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	9b00      	ldr	r3, [sp, #0]
 8007b20:	6163      	str	r3, [r4, #20]
 8007b22:	9b01      	ldr	r3, [sp, #4]
 8007b24:	6120      	str	r0, [r4, #16]
 8007b26:	b15b      	cbz	r3, 8007b40 <__smakebuf_r+0x74>
 8007b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f000 feaf 	bl	8008890 <_isatty_r>
 8007b32:	b128      	cbz	r0, 8007b40 <__smakebuf_r+0x74>
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	f023 0303 	bic.w	r3, r3, #3
 8007b3a:	f043 0301 	orr.w	r3, r3, #1
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	89a0      	ldrh	r0, [r4, #12]
 8007b42:	4305      	orrs	r5, r0
 8007b44:	81a5      	strh	r5, [r4, #12]
 8007b46:	e7cd      	b.n	8007ae4 <__smakebuf_r+0x18>
 8007b48:	080078d1 	.word	0x080078d1

08007b4c <malloc>:
 8007b4c:	4b02      	ldr	r3, [pc, #8]	; (8007b58 <malloc+0xc>)
 8007b4e:	4601      	mov	r1, r0
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	f000 bc17 	b.w	8008384 <_malloc_r>
 8007b56:	bf00      	nop
 8007b58:	2000003c 	.word	0x2000003c

08007b5c <memcpy>:
 8007b5c:	440a      	add	r2, r1
 8007b5e:	4291      	cmp	r1, r2
 8007b60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b64:	d100      	bne.n	8007b68 <memcpy+0xc>
 8007b66:	4770      	bx	lr
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b72:	4291      	cmp	r1, r2
 8007b74:	d1f9      	bne.n	8007b6a <memcpy+0xe>
 8007b76:	bd10      	pop	{r4, pc}

08007b78 <_Balloc>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	460d      	mov	r5, r1
 8007b80:	b976      	cbnz	r6, 8007ba0 <_Balloc+0x28>
 8007b82:	2010      	movs	r0, #16
 8007b84:	f7ff ffe2 	bl	8007b4c <malloc>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b8c:	b920      	cbnz	r0, 8007b98 <_Balloc+0x20>
 8007b8e:	4b18      	ldr	r3, [pc, #96]	; (8007bf0 <_Balloc+0x78>)
 8007b90:	4818      	ldr	r0, [pc, #96]	; (8007bf4 <_Balloc+0x7c>)
 8007b92:	2166      	movs	r1, #102	; 0x66
 8007b94:	f000 fe2a 	bl	80087ec <__assert_func>
 8007b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b9c:	6006      	str	r6, [r0, #0]
 8007b9e:	60c6      	str	r6, [r0, #12]
 8007ba0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ba2:	68f3      	ldr	r3, [r6, #12]
 8007ba4:	b183      	cbz	r3, 8007bc8 <_Balloc+0x50>
 8007ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bae:	b9b8      	cbnz	r0, 8007be0 <_Balloc+0x68>
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	fa01 f605 	lsl.w	r6, r1, r5
 8007bb6:	1d72      	adds	r2, r6, #5
 8007bb8:	0092      	lsls	r2, r2, #2
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 fb60 	bl	8008280 <_calloc_r>
 8007bc0:	b160      	cbz	r0, 8007bdc <_Balloc+0x64>
 8007bc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bc6:	e00e      	b.n	8007be6 <_Balloc+0x6e>
 8007bc8:	2221      	movs	r2, #33	; 0x21
 8007bca:	2104      	movs	r1, #4
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f000 fb57 	bl	8008280 <_calloc_r>
 8007bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bd4:	60f0      	str	r0, [r6, #12]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e4      	bne.n	8007ba6 <_Balloc+0x2e>
 8007bdc:	2000      	movs	r0, #0
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	6802      	ldr	r2, [r0, #0]
 8007be2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007be6:	2300      	movs	r3, #0
 8007be8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bec:	e7f7      	b.n	8007bde <_Balloc+0x66>
 8007bee:	bf00      	nop
 8007bf0:	08008b59 	.word	0x08008b59
 8007bf4:	08008c3c 	.word	0x08008c3c

08007bf8 <_Bfree>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	b976      	cbnz	r6, 8007c20 <_Bfree+0x28>
 8007c02:	2010      	movs	r0, #16
 8007c04:	f7ff ffa2 	bl	8007b4c <malloc>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	6268      	str	r0, [r5, #36]	; 0x24
 8007c0c:	b920      	cbnz	r0, 8007c18 <_Bfree+0x20>
 8007c0e:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <_Bfree+0x3c>)
 8007c10:	4809      	ldr	r0, [pc, #36]	; (8007c38 <_Bfree+0x40>)
 8007c12:	218a      	movs	r1, #138	; 0x8a
 8007c14:	f000 fdea 	bl	80087ec <__assert_func>
 8007c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c1c:	6006      	str	r6, [r0, #0]
 8007c1e:	60c6      	str	r6, [r0, #12]
 8007c20:	b13c      	cbz	r4, 8007c32 <_Bfree+0x3a>
 8007c22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c24:	6862      	ldr	r2, [r4, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c2c:	6021      	str	r1, [r4, #0]
 8007c2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	08008b59 	.word	0x08008b59
 8007c38:	08008c3c 	.word	0x08008c3c

08007c3c <__multadd>:
 8007c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c40:	690d      	ldr	r5, [r1, #16]
 8007c42:	4607      	mov	r7, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	461e      	mov	r6, r3
 8007c48:	f101 0c14 	add.w	ip, r1, #20
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	f8dc 3000 	ldr.w	r3, [ip]
 8007c52:	b299      	uxth	r1, r3
 8007c54:	fb02 6101 	mla	r1, r2, r1, r6
 8007c58:	0c1e      	lsrs	r6, r3, #16
 8007c5a:	0c0b      	lsrs	r3, r1, #16
 8007c5c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c60:	b289      	uxth	r1, r1
 8007c62:	3001      	adds	r0, #1
 8007c64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c68:	4285      	cmp	r5, r0
 8007c6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c72:	dcec      	bgt.n	8007c4e <__multadd+0x12>
 8007c74:	b30e      	cbz	r6, 8007cba <__multadd+0x7e>
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	42ab      	cmp	r3, r5
 8007c7a:	dc19      	bgt.n	8007cb0 <__multadd+0x74>
 8007c7c:	6861      	ldr	r1, [r4, #4]
 8007c7e:	4638      	mov	r0, r7
 8007c80:	3101      	adds	r1, #1
 8007c82:	f7ff ff79 	bl	8007b78 <_Balloc>
 8007c86:	4680      	mov	r8, r0
 8007c88:	b928      	cbnz	r0, 8007c96 <__multadd+0x5a>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	4b0c      	ldr	r3, [pc, #48]	; (8007cc0 <__multadd+0x84>)
 8007c8e:	480d      	ldr	r0, [pc, #52]	; (8007cc4 <__multadd+0x88>)
 8007c90:	21b5      	movs	r1, #181	; 0xb5
 8007c92:	f000 fdab 	bl	80087ec <__assert_func>
 8007c96:	6922      	ldr	r2, [r4, #16]
 8007c98:	3202      	adds	r2, #2
 8007c9a:	f104 010c 	add.w	r1, r4, #12
 8007c9e:	0092      	lsls	r2, r2, #2
 8007ca0:	300c      	adds	r0, #12
 8007ca2:	f7ff ff5b 	bl	8007b5c <memcpy>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f7ff ffa5 	bl	8007bf8 <_Bfree>
 8007cae:	4644      	mov	r4, r8
 8007cb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cb4:	3501      	adds	r5, #1
 8007cb6:	615e      	str	r6, [r3, #20]
 8007cb8:	6125      	str	r5, [r4, #16]
 8007cba:	4620      	mov	r0, r4
 8007cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc0:	08008bcb 	.word	0x08008bcb
 8007cc4:	08008c3c 	.word	0x08008c3c

08007cc8 <__hi0bits>:
 8007cc8:	0c03      	lsrs	r3, r0, #16
 8007cca:	041b      	lsls	r3, r3, #16
 8007ccc:	b9d3      	cbnz	r3, 8007d04 <__hi0bits+0x3c>
 8007cce:	0400      	lsls	r0, r0, #16
 8007cd0:	2310      	movs	r3, #16
 8007cd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007cd6:	bf04      	itt	eq
 8007cd8:	0200      	lsleq	r0, r0, #8
 8007cda:	3308      	addeq	r3, #8
 8007cdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ce0:	bf04      	itt	eq
 8007ce2:	0100      	lsleq	r0, r0, #4
 8007ce4:	3304      	addeq	r3, #4
 8007ce6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007cea:	bf04      	itt	eq
 8007cec:	0080      	lsleq	r0, r0, #2
 8007cee:	3302      	addeq	r3, #2
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	db05      	blt.n	8007d00 <__hi0bits+0x38>
 8007cf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007cf8:	f103 0301 	add.w	r3, r3, #1
 8007cfc:	bf08      	it	eq
 8007cfe:	2320      	moveq	r3, #32
 8007d00:	4618      	mov	r0, r3
 8007d02:	4770      	bx	lr
 8007d04:	2300      	movs	r3, #0
 8007d06:	e7e4      	b.n	8007cd2 <__hi0bits+0xa>

08007d08 <__lo0bits>:
 8007d08:	6803      	ldr	r3, [r0, #0]
 8007d0a:	f013 0207 	ands.w	r2, r3, #7
 8007d0e:	4601      	mov	r1, r0
 8007d10:	d00b      	beq.n	8007d2a <__lo0bits+0x22>
 8007d12:	07da      	lsls	r2, r3, #31
 8007d14:	d423      	bmi.n	8007d5e <__lo0bits+0x56>
 8007d16:	0798      	lsls	r0, r3, #30
 8007d18:	bf49      	itett	mi
 8007d1a:	085b      	lsrmi	r3, r3, #1
 8007d1c:	089b      	lsrpl	r3, r3, #2
 8007d1e:	2001      	movmi	r0, #1
 8007d20:	600b      	strmi	r3, [r1, #0]
 8007d22:	bf5c      	itt	pl
 8007d24:	600b      	strpl	r3, [r1, #0]
 8007d26:	2002      	movpl	r0, #2
 8007d28:	4770      	bx	lr
 8007d2a:	b298      	uxth	r0, r3
 8007d2c:	b9a8      	cbnz	r0, 8007d5a <__lo0bits+0x52>
 8007d2e:	0c1b      	lsrs	r3, r3, #16
 8007d30:	2010      	movs	r0, #16
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	b90a      	cbnz	r2, 8007d3a <__lo0bits+0x32>
 8007d36:	3008      	adds	r0, #8
 8007d38:	0a1b      	lsrs	r3, r3, #8
 8007d3a:	071a      	lsls	r2, r3, #28
 8007d3c:	bf04      	itt	eq
 8007d3e:	091b      	lsreq	r3, r3, #4
 8007d40:	3004      	addeq	r0, #4
 8007d42:	079a      	lsls	r2, r3, #30
 8007d44:	bf04      	itt	eq
 8007d46:	089b      	lsreq	r3, r3, #2
 8007d48:	3002      	addeq	r0, #2
 8007d4a:	07da      	lsls	r2, r3, #31
 8007d4c:	d403      	bmi.n	8007d56 <__lo0bits+0x4e>
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	f100 0001 	add.w	r0, r0, #1
 8007d54:	d005      	beq.n	8007d62 <__lo0bits+0x5a>
 8007d56:	600b      	str	r3, [r1, #0]
 8007d58:	4770      	bx	lr
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	e7e9      	b.n	8007d32 <__lo0bits+0x2a>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	4770      	bx	lr
 8007d62:	2020      	movs	r0, #32
 8007d64:	4770      	bx	lr
	...

08007d68 <__i2b>:
 8007d68:	b510      	push	{r4, lr}
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	f7ff ff03 	bl	8007b78 <_Balloc>
 8007d72:	4602      	mov	r2, r0
 8007d74:	b928      	cbnz	r0, 8007d82 <__i2b+0x1a>
 8007d76:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <__i2b+0x24>)
 8007d78:	4805      	ldr	r0, [pc, #20]	; (8007d90 <__i2b+0x28>)
 8007d7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d7e:	f000 fd35 	bl	80087ec <__assert_func>
 8007d82:	2301      	movs	r3, #1
 8007d84:	6144      	str	r4, [r0, #20]
 8007d86:	6103      	str	r3, [r0, #16]
 8007d88:	bd10      	pop	{r4, pc}
 8007d8a:	bf00      	nop
 8007d8c:	08008bcb 	.word	0x08008bcb
 8007d90:	08008c3c 	.word	0x08008c3c

08007d94 <__multiply>:
 8007d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d98:	4691      	mov	r9, r2
 8007d9a:	690a      	ldr	r2, [r1, #16]
 8007d9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	bfb8      	it	lt
 8007da4:	460b      	movlt	r3, r1
 8007da6:	460c      	mov	r4, r1
 8007da8:	bfbc      	itt	lt
 8007daa:	464c      	movlt	r4, r9
 8007dac:	4699      	movlt	r9, r3
 8007dae:	6927      	ldr	r7, [r4, #16]
 8007db0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007db4:	68a3      	ldr	r3, [r4, #8]
 8007db6:	6861      	ldr	r1, [r4, #4]
 8007db8:	eb07 060a 	add.w	r6, r7, sl
 8007dbc:	42b3      	cmp	r3, r6
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	bfb8      	it	lt
 8007dc2:	3101      	addlt	r1, #1
 8007dc4:	f7ff fed8 	bl	8007b78 <_Balloc>
 8007dc8:	b930      	cbnz	r0, 8007dd8 <__multiply+0x44>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	4b44      	ldr	r3, [pc, #272]	; (8007ee0 <__multiply+0x14c>)
 8007dce:	4845      	ldr	r0, [pc, #276]	; (8007ee4 <__multiply+0x150>)
 8007dd0:	f240 115d 	movw	r1, #349	; 0x15d
 8007dd4:	f000 fd0a 	bl	80087ec <__assert_func>
 8007dd8:	f100 0514 	add.w	r5, r0, #20
 8007ddc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007de0:	462b      	mov	r3, r5
 8007de2:	2200      	movs	r2, #0
 8007de4:	4543      	cmp	r3, r8
 8007de6:	d321      	bcc.n	8007e2c <__multiply+0x98>
 8007de8:	f104 0314 	add.w	r3, r4, #20
 8007dec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007df0:	f109 0314 	add.w	r3, r9, #20
 8007df4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007df8:	9202      	str	r2, [sp, #8]
 8007dfa:	1b3a      	subs	r2, r7, r4
 8007dfc:	3a15      	subs	r2, #21
 8007dfe:	f022 0203 	bic.w	r2, r2, #3
 8007e02:	3204      	adds	r2, #4
 8007e04:	f104 0115 	add.w	r1, r4, #21
 8007e08:	428f      	cmp	r7, r1
 8007e0a:	bf38      	it	cc
 8007e0c:	2204      	movcc	r2, #4
 8007e0e:	9201      	str	r2, [sp, #4]
 8007e10:	9a02      	ldr	r2, [sp, #8]
 8007e12:	9303      	str	r3, [sp, #12]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d80c      	bhi.n	8007e32 <__multiply+0x9e>
 8007e18:	2e00      	cmp	r6, #0
 8007e1a:	dd03      	ble.n	8007e24 <__multiply+0x90>
 8007e1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d05a      	beq.n	8007eda <__multiply+0x146>
 8007e24:	6106      	str	r6, [r0, #16]
 8007e26:	b005      	add	sp, #20
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	f843 2b04 	str.w	r2, [r3], #4
 8007e30:	e7d8      	b.n	8007de4 <__multiply+0x50>
 8007e32:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e36:	f1ba 0f00 	cmp.w	sl, #0
 8007e3a:	d024      	beq.n	8007e86 <__multiply+0xf2>
 8007e3c:	f104 0e14 	add.w	lr, r4, #20
 8007e40:	46a9      	mov	r9, r5
 8007e42:	f04f 0c00 	mov.w	ip, #0
 8007e46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e4a:	f8d9 1000 	ldr.w	r1, [r9]
 8007e4e:	fa1f fb82 	uxth.w	fp, r2
 8007e52:	b289      	uxth	r1, r1
 8007e54:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8007e60:	4461      	add	r1, ip
 8007e62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e66:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e6e:	b289      	uxth	r1, r1
 8007e70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e74:	4577      	cmp	r7, lr
 8007e76:	f849 1b04 	str.w	r1, [r9], #4
 8007e7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e7e:	d8e2      	bhi.n	8007e46 <__multiply+0xb2>
 8007e80:	9a01      	ldr	r2, [sp, #4]
 8007e82:	f845 c002 	str.w	ip, [r5, r2]
 8007e86:	9a03      	ldr	r2, [sp, #12]
 8007e88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	f1b9 0f00 	cmp.w	r9, #0
 8007e92:	d020      	beq.n	8007ed6 <__multiply+0x142>
 8007e94:	6829      	ldr	r1, [r5, #0]
 8007e96:	f104 0c14 	add.w	ip, r4, #20
 8007e9a:	46ae      	mov	lr, r5
 8007e9c:	f04f 0a00 	mov.w	sl, #0
 8007ea0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ea4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ea8:	fb09 220b 	mla	r2, r9, fp, r2
 8007eac:	4492      	add	sl, r2
 8007eae:	b289      	uxth	r1, r1
 8007eb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007eb4:	f84e 1b04 	str.w	r1, [lr], #4
 8007eb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ebc:	f8be 1000 	ldrh.w	r1, [lr]
 8007ec0:	0c12      	lsrs	r2, r2, #16
 8007ec2:	fb09 1102 	mla	r1, r9, r2, r1
 8007ec6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007eca:	4567      	cmp	r7, ip
 8007ecc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ed0:	d8e6      	bhi.n	8007ea0 <__multiply+0x10c>
 8007ed2:	9a01      	ldr	r2, [sp, #4]
 8007ed4:	50a9      	str	r1, [r5, r2]
 8007ed6:	3504      	adds	r5, #4
 8007ed8:	e79a      	b.n	8007e10 <__multiply+0x7c>
 8007eda:	3e01      	subs	r6, #1
 8007edc:	e79c      	b.n	8007e18 <__multiply+0x84>
 8007ede:	bf00      	nop
 8007ee0:	08008bcb 	.word	0x08008bcb
 8007ee4:	08008c3c 	.word	0x08008c3c

08007ee8 <__pow5mult>:
 8007ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eec:	4615      	mov	r5, r2
 8007eee:	f012 0203 	ands.w	r2, r2, #3
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	460f      	mov	r7, r1
 8007ef6:	d007      	beq.n	8007f08 <__pow5mult+0x20>
 8007ef8:	4c25      	ldr	r4, [pc, #148]	; (8007f90 <__pow5mult+0xa8>)
 8007efa:	3a01      	subs	r2, #1
 8007efc:	2300      	movs	r3, #0
 8007efe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f02:	f7ff fe9b 	bl	8007c3c <__multadd>
 8007f06:	4607      	mov	r7, r0
 8007f08:	10ad      	asrs	r5, r5, #2
 8007f0a:	d03d      	beq.n	8007f88 <__pow5mult+0xa0>
 8007f0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f0e:	b97c      	cbnz	r4, 8007f30 <__pow5mult+0x48>
 8007f10:	2010      	movs	r0, #16
 8007f12:	f7ff fe1b 	bl	8007b4c <malloc>
 8007f16:	4602      	mov	r2, r0
 8007f18:	6270      	str	r0, [r6, #36]	; 0x24
 8007f1a:	b928      	cbnz	r0, 8007f28 <__pow5mult+0x40>
 8007f1c:	4b1d      	ldr	r3, [pc, #116]	; (8007f94 <__pow5mult+0xac>)
 8007f1e:	481e      	ldr	r0, [pc, #120]	; (8007f98 <__pow5mult+0xb0>)
 8007f20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f24:	f000 fc62 	bl	80087ec <__assert_func>
 8007f28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f2c:	6004      	str	r4, [r0, #0]
 8007f2e:	60c4      	str	r4, [r0, #12]
 8007f30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f38:	b94c      	cbnz	r4, 8007f4e <__pow5mult+0x66>
 8007f3a:	f240 2171 	movw	r1, #625	; 0x271
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f7ff ff12 	bl	8007d68 <__i2b>
 8007f44:	2300      	movs	r3, #0
 8007f46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	6003      	str	r3, [r0, #0]
 8007f4e:	f04f 0900 	mov.w	r9, #0
 8007f52:	07eb      	lsls	r3, r5, #31
 8007f54:	d50a      	bpl.n	8007f6c <__pow5mult+0x84>
 8007f56:	4639      	mov	r1, r7
 8007f58:	4622      	mov	r2, r4
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7ff ff1a 	bl	8007d94 <__multiply>
 8007f60:	4639      	mov	r1, r7
 8007f62:	4680      	mov	r8, r0
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7ff fe47 	bl	8007bf8 <_Bfree>
 8007f6a:	4647      	mov	r7, r8
 8007f6c:	106d      	asrs	r5, r5, #1
 8007f6e:	d00b      	beq.n	8007f88 <__pow5mult+0xa0>
 8007f70:	6820      	ldr	r0, [r4, #0]
 8007f72:	b938      	cbnz	r0, 8007f84 <__pow5mult+0x9c>
 8007f74:	4622      	mov	r2, r4
 8007f76:	4621      	mov	r1, r4
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff ff0b 	bl	8007d94 <__multiply>
 8007f7e:	6020      	str	r0, [r4, #0]
 8007f80:	f8c0 9000 	str.w	r9, [r0]
 8007f84:	4604      	mov	r4, r0
 8007f86:	e7e4      	b.n	8007f52 <__pow5mult+0x6a>
 8007f88:	4638      	mov	r0, r7
 8007f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f8e:	bf00      	nop
 8007f90:	08008d88 	.word	0x08008d88
 8007f94:	08008b59 	.word	0x08008b59
 8007f98:	08008c3c 	.word	0x08008c3c

08007f9c <__lshift>:
 8007f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	6849      	ldr	r1, [r1, #4]
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007faa:	68a3      	ldr	r3, [r4, #8]
 8007fac:	4607      	mov	r7, r0
 8007fae:	4691      	mov	r9, r2
 8007fb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fb4:	f108 0601 	add.w	r6, r8, #1
 8007fb8:	42b3      	cmp	r3, r6
 8007fba:	db0b      	blt.n	8007fd4 <__lshift+0x38>
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	f7ff fddb 	bl	8007b78 <_Balloc>
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	b948      	cbnz	r0, 8007fda <__lshift+0x3e>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	4b2a      	ldr	r3, [pc, #168]	; (8008074 <__lshift+0xd8>)
 8007fca:	482b      	ldr	r0, [pc, #172]	; (8008078 <__lshift+0xdc>)
 8007fcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007fd0:	f000 fc0c 	bl	80087ec <__assert_func>
 8007fd4:	3101      	adds	r1, #1
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	e7ee      	b.n	8007fb8 <__lshift+0x1c>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f100 0114 	add.w	r1, r0, #20
 8007fe0:	f100 0210 	add.w	r2, r0, #16
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	4553      	cmp	r3, sl
 8007fe8:	db37      	blt.n	800805a <__lshift+0xbe>
 8007fea:	6920      	ldr	r0, [r4, #16]
 8007fec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ff0:	f104 0314 	add.w	r3, r4, #20
 8007ff4:	f019 091f 	ands.w	r9, r9, #31
 8007ff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ffc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008000:	d02f      	beq.n	8008062 <__lshift+0xc6>
 8008002:	f1c9 0e20 	rsb	lr, r9, #32
 8008006:	468a      	mov	sl, r1
 8008008:	f04f 0c00 	mov.w	ip, #0
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	fa02 f209 	lsl.w	r2, r2, r9
 8008012:	ea42 020c 	orr.w	r2, r2, ip
 8008016:	f84a 2b04 	str.w	r2, [sl], #4
 800801a:	f853 2b04 	ldr.w	r2, [r3], #4
 800801e:	4298      	cmp	r0, r3
 8008020:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008024:	d8f2      	bhi.n	800800c <__lshift+0x70>
 8008026:	1b03      	subs	r3, r0, r4
 8008028:	3b15      	subs	r3, #21
 800802a:	f023 0303 	bic.w	r3, r3, #3
 800802e:	3304      	adds	r3, #4
 8008030:	f104 0215 	add.w	r2, r4, #21
 8008034:	4290      	cmp	r0, r2
 8008036:	bf38      	it	cc
 8008038:	2304      	movcc	r3, #4
 800803a:	f841 c003 	str.w	ip, [r1, r3]
 800803e:	f1bc 0f00 	cmp.w	ip, #0
 8008042:	d001      	beq.n	8008048 <__lshift+0xac>
 8008044:	f108 0602 	add.w	r6, r8, #2
 8008048:	3e01      	subs	r6, #1
 800804a:	4638      	mov	r0, r7
 800804c:	612e      	str	r6, [r5, #16]
 800804e:	4621      	mov	r1, r4
 8008050:	f7ff fdd2 	bl	8007bf8 <_Bfree>
 8008054:	4628      	mov	r0, r5
 8008056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805a:	f842 0f04 	str.w	r0, [r2, #4]!
 800805e:	3301      	adds	r3, #1
 8008060:	e7c1      	b.n	8007fe6 <__lshift+0x4a>
 8008062:	3904      	subs	r1, #4
 8008064:	f853 2b04 	ldr.w	r2, [r3], #4
 8008068:	f841 2f04 	str.w	r2, [r1, #4]!
 800806c:	4298      	cmp	r0, r3
 800806e:	d8f9      	bhi.n	8008064 <__lshift+0xc8>
 8008070:	e7ea      	b.n	8008048 <__lshift+0xac>
 8008072:	bf00      	nop
 8008074:	08008bcb 	.word	0x08008bcb
 8008078:	08008c3c 	.word	0x08008c3c

0800807c <__mcmp>:
 800807c:	b530      	push	{r4, r5, lr}
 800807e:	6902      	ldr	r2, [r0, #16]
 8008080:	690c      	ldr	r4, [r1, #16]
 8008082:	1b12      	subs	r2, r2, r4
 8008084:	d10e      	bne.n	80080a4 <__mcmp+0x28>
 8008086:	f100 0314 	add.w	r3, r0, #20
 800808a:	3114      	adds	r1, #20
 800808c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008090:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008094:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008098:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800809c:	42a5      	cmp	r5, r4
 800809e:	d003      	beq.n	80080a8 <__mcmp+0x2c>
 80080a0:	d305      	bcc.n	80080ae <__mcmp+0x32>
 80080a2:	2201      	movs	r2, #1
 80080a4:	4610      	mov	r0, r2
 80080a6:	bd30      	pop	{r4, r5, pc}
 80080a8:	4283      	cmp	r3, r0
 80080aa:	d3f3      	bcc.n	8008094 <__mcmp+0x18>
 80080ac:	e7fa      	b.n	80080a4 <__mcmp+0x28>
 80080ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080b2:	e7f7      	b.n	80080a4 <__mcmp+0x28>

080080b4 <__mdiff>:
 80080b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b8:	460c      	mov	r4, r1
 80080ba:	4606      	mov	r6, r0
 80080bc:	4611      	mov	r1, r2
 80080be:	4620      	mov	r0, r4
 80080c0:	4690      	mov	r8, r2
 80080c2:	f7ff ffdb 	bl	800807c <__mcmp>
 80080c6:	1e05      	subs	r5, r0, #0
 80080c8:	d110      	bne.n	80080ec <__mdiff+0x38>
 80080ca:	4629      	mov	r1, r5
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7ff fd53 	bl	8007b78 <_Balloc>
 80080d2:	b930      	cbnz	r0, 80080e2 <__mdiff+0x2e>
 80080d4:	4b3a      	ldr	r3, [pc, #232]	; (80081c0 <__mdiff+0x10c>)
 80080d6:	4602      	mov	r2, r0
 80080d8:	f240 2132 	movw	r1, #562	; 0x232
 80080dc:	4839      	ldr	r0, [pc, #228]	; (80081c4 <__mdiff+0x110>)
 80080de:	f000 fb85 	bl	80087ec <__assert_func>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ec:	bfa4      	itt	ge
 80080ee:	4643      	movge	r3, r8
 80080f0:	46a0      	movge	r8, r4
 80080f2:	4630      	mov	r0, r6
 80080f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080f8:	bfa6      	itte	ge
 80080fa:	461c      	movge	r4, r3
 80080fc:	2500      	movge	r5, #0
 80080fe:	2501      	movlt	r5, #1
 8008100:	f7ff fd3a 	bl	8007b78 <_Balloc>
 8008104:	b920      	cbnz	r0, 8008110 <__mdiff+0x5c>
 8008106:	4b2e      	ldr	r3, [pc, #184]	; (80081c0 <__mdiff+0x10c>)
 8008108:	4602      	mov	r2, r0
 800810a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800810e:	e7e5      	b.n	80080dc <__mdiff+0x28>
 8008110:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008114:	6926      	ldr	r6, [r4, #16]
 8008116:	60c5      	str	r5, [r0, #12]
 8008118:	f104 0914 	add.w	r9, r4, #20
 800811c:	f108 0514 	add.w	r5, r8, #20
 8008120:	f100 0e14 	add.w	lr, r0, #20
 8008124:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008128:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800812c:	f108 0210 	add.w	r2, r8, #16
 8008130:	46f2      	mov	sl, lr
 8008132:	2100      	movs	r1, #0
 8008134:	f859 3b04 	ldr.w	r3, [r9], #4
 8008138:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800813c:	fa1f f883 	uxth.w	r8, r3
 8008140:	fa11 f18b 	uxtah	r1, r1, fp
 8008144:	0c1b      	lsrs	r3, r3, #16
 8008146:	eba1 0808 	sub.w	r8, r1, r8
 800814a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800814e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008152:	fa1f f888 	uxth.w	r8, r8
 8008156:	1419      	asrs	r1, r3, #16
 8008158:	454e      	cmp	r6, r9
 800815a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800815e:	f84a 3b04 	str.w	r3, [sl], #4
 8008162:	d8e7      	bhi.n	8008134 <__mdiff+0x80>
 8008164:	1b33      	subs	r3, r6, r4
 8008166:	3b15      	subs	r3, #21
 8008168:	f023 0303 	bic.w	r3, r3, #3
 800816c:	3304      	adds	r3, #4
 800816e:	3415      	adds	r4, #21
 8008170:	42a6      	cmp	r6, r4
 8008172:	bf38      	it	cc
 8008174:	2304      	movcc	r3, #4
 8008176:	441d      	add	r5, r3
 8008178:	4473      	add	r3, lr
 800817a:	469e      	mov	lr, r3
 800817c:	462e      	mov	r6, r5
 800817e:	4566      	cmp	r6, ip
 8008180:	d30e      	bcc.n	80081a0 <__mdiff+0xec>
 8008182:	f10c 0203 	add.w	r2, ip, #3
 8008186:	1b52      	subs	r2, r2, r5
 8008188:	f022 0203 	bic.w	r2, r2, #3
 800818c:	3d03      	subs	r5, #3
 800818e:	45ac      	cmp	ip, r5
 8008190:	bf38      	it	cc
 8008192:	2200      	movcc	r2, #0
 8008194:	441a      	add	r2, r3
 8008196:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800819a:	b17b      	cbz	r3, 80081bc <__mdiff+0x108>
 800819c:	6107      	str	r7, [r0, #16]
 800819e:	e7a3      	b.n	80080e8 <__mdiff+0x34>
 80081a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80081a4:	fa11 f288 	uxtah	r2, r1, r8
 80081a8:	1414      	asrs	r4, r2, #16
 80081aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80081ae:	b292      	uxth	r2, r2
 80081b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80081b4:	f84e 2b04 	str.w	r2, [lr], #4
 80081b8:	1421      	asrs	r1, r4, #16
 80081ba:	e7e0      	b.n	800817e <__mdiff+0xca>
 80081bc:	3f01      	subs	r7, #1
 80081be:	e7ea      	b.n	8008196 <__mdiff+0xe2>
 80081c0:	08008bcb 	.word	0x08008bcb
 80081c4:	08008c3c 	.word	0x08008c3c

080081c8 <__d2b>:
 80081c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081cc:	4689      	mov	r9, r1
 80081ce:	2101      	movs	r1, #1
 80081d0:	ec57 6b10 	vmov	r6, r7, d0
 80081d4:	4690      	mov	r8, r2
 80081d6:	f7ff fccf 	bl	8007b78 <_Balloc>
 80081da:	4604      	mov	r4, r0
 80081dc:	b930      	cbnz	r0, 80081ec <__d2b+0x24>
 80081de:	4602      	mov	r2, r0
 80081e0:	4b25      	ldr	r3, [pc, #148]	; (8008278 <__d2b+0xb0>)
 80081e2:	4826      	ldr	r0, [pc, #152]	; (800827c <__d2b+0xb4>)
 80081e4:	f240 310a 	movw	r1, #778	; 0x30a
 80081e8:	f000 fb00 	bl	80087ec <__assert_func>
 80081ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80081f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081f4:	bb35      	cbnz	r5, 8008244 <__d2b+0x7c>
 80081f6:	2e00      	cmp	r6, #0
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	d028      	beq.n	800824e <__d2b+0x86>
 80081fc:	4668      	mov	r0, sp
 80081fe:	9600      	str	r6, [sp, #0]
 8008200:	f7ff fd82 	bl	8007d08 <__lo0bits>
 8008204:	9900      	ldr	r1, [sp, #0]
 8008206:	b300      	cbz	r0, 800824a <__d2b+0x82>
 8008208:	9a01      	ldr	r2, [sp, #4]
 800820a:	f1c0 0320 	rsb	r3, r0, #32
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	430b      	orrs	r3, r1
 8008214:	40c2      	lsrs	r2, r0
 8008216:	6163      	str	r3, [r4, #20]
 8008218:	9201      	str	r2, [sp, #4]
 800821a:	9b01      	ldr	r3, [sp, #4]
 800821c:	61a3      	str	r3, [r4, #24]
 800821e:	2b00      	cmp	r3, #0
 8008220:	bf14      	ite	ne
 8008222:	2202      	movne	r2, #2
 8008224:	2201      	moveq	r2, #1
 8008226:	6122      	str	r2, [r4, #16]
 8008228:	b1d5      	cbz	r5, 8008260 <__d2b+0x98>
 800822a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800822e:	4405      	add	r5, r0
 8008230:	f8c9 5000 	str.w	r5, [r9]
 8008234:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008238:	f8c8 0000 	str.w	r0, [r8]
 800823c:	4620      	mov	r0, r4
 800823e:	b003      	add	sp, #12
 8008240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008248:	e7d5      	b.n	80081f6 <__d2b+0x2e>
 800824a:	6161      	str	r1, [r4, #20]
 800824c:	e7e5      	b.n	800821a <__d2b+0x52>
 800824e:	a801      	add	r0, sp, #4
 8008250:	f7ff fd5a 	bl	8007d08 <__lo0bits>
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	6163      	str	r3, [r4, #20]
 8008258:	2201      	movs	r2, #1
 800825a:	6122      	str	r2, [r4, #16]
 800825c:	3020      	adds	r0, #32
 800825e:	e7e3      	b.n	8008228 <__d2b+0x60>
 8008260:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008264:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008268:	f8c9 0000 	str.w	r0, [r9]
 800826c:	6918      	ldr	r0, [r3, #16]
 800826e:	f7ff fd2b 	bl	8007cc8 <__hi0bits>
 8008272:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008276:	e7df      	b.n	8008238 <__d2b+0x70>
 8008278:	08008bcb 	.word	0x08008bcb
 800827c:	08008c3c 	.word	0x08008c3c

08008280 <_calloc_r>:
 8008280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008282:	fba1 2402 	umull	r2, r4, r1, r2
 8008286:	b94c      	cbnz	r4, 800829c <_calloc_r+0x1c>
 8008288:	4611      	mov	r1, r2
 800828a:	9201      	str	r2, [sp, #4]
 800828c:	f000 f87a 	bl	8008384 <_malloc_r>
 8008290:	9a01      	ldr	r2, [sp, #4]
 8008292:	4605      	mov	r5, r0
 8008294:	b930      	cbnz	r0, 80082a4 <_calloc_r+0x24>
 8008296:	4628      	mov	r0, r5
 8008298:	b003      	add	sp, #12
 800829a:	bd30      	pop	{r4, r5, pc}
 800829c:	220c      	movs	r2, #12
 800829e:	6002      	str	r2, [r0, #0]
 80082a0:	2500      	movs	r5, #0
 80082a2:	e7f8      	b.n	8008296 <_calloc_r+0x16>
 80082a4:	4621      	mov	r1, r4
 80082a6:	f7fd fdf3 	bl	8005e90 <memset>
 80082aa:	e7f4      	b.n	8008296 <_calloc_r+0x16>

080082ac <_free_r>:
 80082ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082ae:	2900      	cmp	r1, #0
 80082b0:	d044      	beq.n	800833c <_free_r+0x90>
 80082b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082b6:	9001      	str	r0, [sp, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f1a1 0404 	sub.w	r4, r1, #4
 80082be:	bfb8      	it	lt
 80082c0:	18e4      	addlt	r4, r4, r3
 80082c2:	f000 fb19 	bl	80088f8 <__malloc_lock>
 80082c6:	4a1e      	ldr	r2, [pc, #120]	; (8008340 <_free_r+0x94>)
 80082c8:	9801      	ldr	r0, [sp, #4]
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	b933      	cbnz	r3, 80082dc <_free_r+0x30>
 80082ce:	6063      	str	r3, [r4, #4]
 80082d0:	6014      	str	r4, [r2, #0]
 80082d2:	b003      	add	sp, #12
 80082d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082d8:	f000 bb14 	b.w	8008904 <__malloc_unlock>
 80082dc:	42a3      	cmp	r3, r4
 80082de:	d908      	bls.n	80082f2 <_free_r+0x46>
 80082e0:	6825      	ldr	r5, [r4, #0]
 80082e2:	1961      	adds	r1, r4, r5
 80082e4:	428b      	cmp	r3, r1
 80082e6:	bf01      	itttt	eq
 80082e8:	6819      	ldreq	r1, [r3, #0]
 80082ea:	685b      	ldreq	r3, [r3, #4]
 80082ec:	1949      	addeq	r1, r1, r5
 80082ee:	6021      	streq	r1, [r4, #0]
 80082f0:	e7ed      	b.n	80082ce <_free_r+0x22>
 80082f2:	461a      	mov	r2, r3
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	b10b      	cbz	r3, 80082fc <_free_r+0x50>
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d9fa      	bls.n	80082f2 <_free_r+0x46>
 80082fc:	6811      	ldr	r1, [r2, #0]
 80082fe:	1855      	adds	r5, r2, r1
 8008300:	42a5      	cmp	r5, r4
 8008302:	d10b      	bne.n	800831c <_free_r+0x70>
 8008304:	6824      	ldr	r4, [r4, #0]
 8008306:	4421      	add	r1, r4
 8008308:	1854      	adds	r4, r2, r1
 800830a:	42a3      	cmp	r3, r4
 800830c:	6011      	str	r1, [r2, #0]
 800830e:	d1e0      	bne.n	80082d2 <_free_r+0x26>
 8008310:	681c      	ldr	r4, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	6053      	str	r3, [r2, #4]
 8008316:	4421      	add	r1, r4
 8008318:	6011      	str	r1, [r2, #0]
 800831a:	e7da      	b.n	80082d2 <_free_r+0x26>
 800831c:	d902      	bls.n	8008324 <_free_r+0x78>
 800831e:	230c      	movs	r3, #12
 8008320:	6003      	str	r3, [r0, #0]
 8008322:	e7d6      	b.n	80082d2 <_free_r+0x26>
 8008324:	6825      	ldr	r5, [r4, #0]
 8008326:	1961      	adds	r1, r4, r5
 8008328:	428b      	cmp	r3, r1
 800832a:	bf04      	itt	eq
 800832c:	6819      	ldreq	r1, [r3, #0]
 800832e:	685b      	ldreq	r3, [r3, #4]
 8008330:	6063      	str	r3, [r4, #4]
 8008332:	bf04      	itt	eq
 8008334:	1949      	addeq	r1, r1, r5
 8008336:	6021      	streq	r1, [r4, #0]
 8008338:	6054      	str	r4, [r2, #4]
 800833a:	e7ca      	b.n	80082d2 <_free_r+0x26>
 800833c:	b003      	add	sp, #12
 800833e:	bd30      	pop	{r4, r5, pc}
 8008340:	20000388 	.word	0x20000388

08008344 <sbrk_aligned>:
 8008344:	b570      	push	{r4, r5, r6, lr}
 8008346:	4e0e      	ldr	r6, [pc, #56]	; (8008380 <sbrk_aligned+0x3c>)
 8008348:	460c      	mov	r4, r1
 800834a:	6831      	ldr	r1, [r6, #0]
 800834c:	4605      	mov	r5, r0
 800834e:	b911      	cbnz	r1, 8008356 <sbrk_aligned+0x12>
 8008350:	f000 f9e6 	bl	8008720 <_sbrk_r>
 8008354:	6030      	str	r0, [r6, #0]
 8008356:	4621      	mov	r1, r4
 8008358:	4628      	mov	r0, r5
 800835a:	f000 f9e1 	bl	8008720 <_sbrk_r>
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	d00a      	beq.n	8008378 <sbrk_aligned+0x34>
 8008362:	1cc4      	adds	r4, r0, #3
 8008364:	f024 0403 	bic.w	r4, r4, #3
 8008368:	42a0      	cmp	r0, r4
 800836a:	d007      	beq.n	800837c <sbrk_aligned+0x38>
 800836c:	1a21      	subs	r1, r4, r0
 800836e:	4628      	mov	r0, r5
 8008370:	f000 f9d6 	bl	8008720 <_sbrk_r>
 8008374:	3001      	adds	r0, #1
 8008376:	d101      	bne.n	800837c <sbrk_aligned+0x38>
 8008378:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800837c:	4620      	mov	r0, r4
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	2000038c 	.word	0x2000038c

08008384 <_malloc_r>:
 8008384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008388:	1ccd      	adds	r5, r1, #3
 800838a:	f025 0503 	bic.w	r5, r5, #3
 800838e:	3508      	adds	r5, #8
 8008390:	2d0c      	cmp	r5, #12
 8008392:	bf38      	it	cc
 8008394:	250c      	movcc	r5, #12
 8008396:	2d00      	cmp	r5, #0
 8008398:	4607      	mov	r7, r0
 800839a:	db01      	blt.n	80083a0 <_malloc_r+0x1c>
 800839c:	42a9      	cmp	r1, r5
 800839e:	d905      	bls.n	80083ac <_malloc_r+0x28>
 80083a0:	230c      	movs	r3, #12
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	2600      	movs	r6, #0
 80083a6:	4630      	mov	r0, r6
 80083a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ac:	4e2e      	ldr	r6, [pc, #184]	; (8008468 <_malloc_r+0xe4>)
 80083ae:	f000 faa3 	bl	80088f8 <__malloc_lock>
 80083b2:	6833      	ldr	r3, [r6, #0]
 80083b4:	461c      	mov	r4, r3
 80083b6:	bb34      	cbnz	r4, 8008406 <_malloc_r+0x82>
 80083b8:	4629      	mov	r1, r5
 80083ba:	4638      	mov	r0, r7
 80083bc:	f7ff ffc2 	bl	8008344 <sbrk_aligned>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	4604      	mov	r4, r0
 80083c4:	d14d      	bne.n	8008462 <_malloc_r+0xde>
 80083c6:	6834      	ldr	r4, [r6, #0]
 80083c8:	4626      	mov	r6, r4
 80083ca:	2e00      	cmp	r6, #0
 80083cc:	d140      	bne.n	8008450 <_malloc_r+0xcc>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	4631      	mov	r1, r6
 80083d2:	4638      	mov	r0, r7
 80083d4:	eb04 0803 	add.w	r8, r4, r3
 80083d8:	f000 f9a2 	bl	8008720 <_sbrk_r>
 80083dc:	4580      	cmp	r8, r0
 80083de:	d13a      	bne.n	8008456 <_malloc_r+0xd2>
 80083e0:	6821      	ldr	r1, [r4, #0]
 80083e2:	3503      	adds	r5, #3
 80083e4:	1a6d      	subs	r5, r5, r1
 80083e6:	f025 0503 	bic.w	r5, r5, #3
 80083ea:	3508      	adds	r5, #8
 80083ec:	2d0c      	cmp	r5, #12
 80083ee:	bf38      	it	cc
 80083f0:	250c      	movcc	r5, #12
 80083f2:	4629      	mov	r1, r5
 80083f4:	4638      	mov	r0, r7
 80083f6:	f7ff ffa5 	bl	8008344 <sbrk_aligned>
 80083fa:	3001      	adds	r0, #1
 80083fc:	d02b      	beq.n	8008456 <_malloc_r+0xd2>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	442b      	add	r3, r5
 8008402:	6023      	str	r3, [r4, #0]
 8008404:	e00e      	b.n	8008424 <_malloc_r+0xa0>
 8008406:	6822      	ldr	r2, [r4, #0]
 8008408:	1b52      	subs	r2, r2, r5
 800840a:	d41e      	bmi.n	800844a <_malloc_r+0xc6>
 800840c:	2a0b      	cmp	r2, #11
 800840e:	d916      	bls.n	800843e <_malloc_r+0xba>
 8008410:	1961      	adds	r1, r4, r5
 8008412:	42a3      	cmp	r3, r4
 8008414:	6025      	str	r5, [r4, #0]
 8008416:	bf18      	it	ne
 8008418:	6059      	strne	r1, [r3, #4]
 800841a:	6863      	ldr	r3, [r4, #4]
 800841c:	bf08      	it	eq
 800841e:	6031      	streq	r1, [r6, #0]
 8008420:	5162      	str	r2, [r4, r5]
 8008422:	604b      	str	r3, [r1, #4]
 8008424:	4638      	mov	r0, r7
 8008426:	f104 060b 	add.w	r6, r4, #11
 800842a:	f000 fa6b 	bl	8008904 <__malloc_unlock>
 800842e:	f026 0607 	bic.w	r6, r6, #7
 8008432:	1d23      	adds	r3, r4, #4
 8008434:	1af2      	subs	r2, r6, r3
 8008436:	d0b6      	beq.n	80083a6 <_malloc_r+0x22>
 8008438:	1b9b      	subs	r3, r3, r6
 800843a:	50a3      	str	r3, [r4, r2]
 800843c:	e7b3      	b.n	80083a6 <_malloc_r+0x22>
 800843e:	6862      	ldr	r2, [r4, #4]
 8008440:	42a3      	cmp	r3, r4
 8008442:	bf0c      	ite	eq
 8008444:	6032      	streq	r2, [r6, #0]
 8008446:	605a      	strne	r2, [r3, #4]
 8008448:	e7ec      	b.n	8008424 <_malloc_r+0xa0>
 800844a:	4623      	mov	r3, r4
 800844c:	6864      	ldr	r4, [r4, #4]
 800844e:	e7b2      	b.n	80083b6 <_malloc_r+0x32>
 8008450:	4634      	mov	r4, r6
 8008452:	6876      	ldr	r6, [r6, #4]
 8008454:	e7b9      	b.n	80083ca <_malloc_r+0x46>
 8008456:	230c      	movs	r3, #12
 8008458:	603b      	str	r3, [r7, #0]
 800845a:	4638      	mov	r0, r7
 800845c:	f000 fa52 	bl	8008904 <__malloc_unlock>
 8008460:	e7a1      	b.n	80083a6 <_malloc_r+0x22>
 8008462:	6025      	str	r5, [r4, #0]
 8008464:	e7de      	b.n	8008424 <_malloc_r+0xa0>
 8008466:	bf00      	nop
 8008468:	20000388 	.word	0x20000388

0800846c <__sfputc_r>:
 800846c:	6893      	ldr	r3, [r2, #8]
 800846e:	3b01      	subs	r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	b410      	push	{r4}
 8008474:	6093      	str	r3, [r2, #8]
 8008476:	da08      	bge.n	800848a <__sfputc_r+0x1e>
 8008478:	6994      	ldr	r4, [r2, #24]
 800847a:	42a3      	cmp	r3, r4
 800847c:	db01      	blt.n	8008482 <__sfputc_r+0x16>
 800847e:	290a      	cmp	r1, #10
 8008480:	d103      	bne.n	800848a <__sfputc_r+0x1e>
 8008482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008486:	f7fe ba03 	b.w	8006890 <__swbuf_r>
 800848a:	6813      	ldr	r3, [r2, #0]
 800848c:	1c58      	adds	r0, r3, #1
 800848e:	6010      	str	r0, [r2, #0]
 8008490:	7019      	strb	r1, [r3, #0]
 8008492:	4608      	mov	r0, r1
 8008494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008498:	4770      	bx	lr

0800849a <__sfputs_r>:
 800849a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849c:	4606      	mov	r6, r0
 800849e:	460f      	mov	r7, r1
 80084a0:	4614      	mov	r4, r2
 80084a2:	18d5      	adds	r5, r2, r3
 80084a4:	42ac      	cmp	r4, r5
 80084a6:	d101      	bne.n	80084ac <__sfputs_r+0x12>
 80084a8:	2000      	movs	r0, #0
 80084aa:	e007      	b.n	80084bc <__sfputs_r+0x22>
 80084ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b0:	463a      	mov	r2, r7
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7ff ffda 	bl	800846c <__sfputc_r>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d1f3      	bne.n	80084a4 <__sfputs_r+0xa>
 80084bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084c0 <_vfiprintf_r>:
 80084c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	460d      	mov	r5, r1
 80084c6:	b09d      	sub	sp, #116	; 0x74
 80084c8:	4614      	mov	r4, r2
 80084ca:	4698      	mov	r8, r3
 80084cc:	4606      	mov	r6, r0
 80084ce:	b118      	cbz	r0, 80084d8 <_vfiprintf_r+0x18>
 80084d0:	6983      	ldr	r3, [r0, #24]
 80084d2:	b90b      	cbnz	r3, 80084d8 <_vfiprintf_r+0x18>
 80084d4:	f7ff fa30 	bl	8007938 <__sinit>
 80084d8:	4b89      	ldr	r3, [pc, #548]	; (8008700 <_vfiprintf_r+0x240>)
 80084da:	429d      	cmp	r5, r3
 80084dc:	d11b      	bne.n	8008516 <_vfiprintf_r+0x56>
 80084de:	6875      	ldr	r5, [r6, #4]
 80084e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e2:	07d9      	lsls	r1, r3, #31
 80084e4:	d405      	bmi.n	80084f2 <_vfiprintf_r+0x32>
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	059a      	lsls	r2, r3, #22
 80084ea:	d402      	bmi.n	80084f2 <_vfiprintf_r+0x32>
 80084ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ee:	f7ff fac6 	bl	8007a7e <__retarget_lock_acquire_recursive>
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	071b      	lsls	r3, r3, #28
 80084f6:	d501      	bpl.n	80084fc <_vfiprintf_r+0x3c>
 80084f8:	692b      	ldr	r3, [r5, #16]
 80084fa:	b9eb      	cbnz	r3, 8008538 <_vfiprintf_r+0x78>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4630      	mov	r0, r6
 8008500:	f7fe fa18 	bl	8006934 <__swsetup_r>
 8008504:	b1c0      	cbz	r0, 8008538 <_vfiprintf_r+0x78>
 8008506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008508:	07dc      	lsls	r4, r3, #31
 800850a:	d50e      	bpl.n	800852a <_vfiprintf_r+0x6a>
 800850c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008510:	b01d      	add	sp, #116	; 0x74
 8008512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	4b7b      	ldr	r3, [pc, #492]	; (8008704 <_vfiprintf_r+0x244>)
 8008518:	429d      	cmp	r5, r3
 800851a:	d101      	bne.n	8008520 <_vfiprintf_r+0x60>
 800851c:	68b5      	ldr	r5, [r6, #8]
 800851e:	e7df      	b.n	80084e0 <_vfiprintf_r+0x20>
 8008520:	4b79      	ldr	r3, [pc, #484]	; (8008708 <_vfiprintf_r+0x248>)
 8008522:	429d      	cmp	r5, r3
 8008524:	bf08      	it	eq
 8008526:	68f5      	ldreq	r5, [r6, #12]
 8008528:	e7da      	b.n	80084e0 <_vfiprintf_r+0x20>
 800852a:	89ab      	ldrh	r3, [r5, #12]
 800852c:	0598      	lsls	r0, r3, #22
 800852e:	d4ed      	bmi.n	800850c <_vfiprintf_r+0x4c>
 8008530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008532:	f7ff faa5 	bl	8007a80 <__retarget_lock_release_recursive>
 8008536:	e7e9      	b.n	800850c <_vfiprintf_r+0x4c>
 8008538:	2300      	movs	r3, #0
 800853a:	9309      	str	r3, [sp, #36]	; 0x24
 800853c:	2320      	movs	r3, #32
 800853e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008542:	f8cd 800c 	str.w	r8, [sp, #12]
 8008546:	2330      	movs	r3, #48	; 0x30
 8008548:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800870c <_vfiprintf_r+0x24c>
 800854c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008550:	f04f 0901 	mov.w	r9, #1
 8008554:	4623      	mov	r3, r4
 8008556:	469a      	mov	sl, r3
 8008558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855c:	b10a      	cbz	r2, 8008562 <_vfiprintf_r+0xa2>
 800855e:	2a25      	cmp	r2, #37	; 0x25
 8008560:	d1f9      	bne.n	8008556 <_vfiprintf_r+0x96>
 8008562:	ebba 0b04 	subs.w	fp, sl, r4
 8008566:	d00b      	beq.n	8008580 <_vfiprintf_r+0xc0>
 8008568:	465b      	mov	r3, fp
 800856a:	4622      	mov	r2, r4
 800856c:	4629      	mov	r1, r5
 800856e:	4630      	mov	r0, r6
 8008570:	f7ff ff93 	bl	800849a <__sfputs_r>
 8008574:	3001      	adds	r0, #1
 8008576:	f000 80aa 	beq.w	80086ce <_vfiprintf_r+0x20e>
 800857a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857c:	445a      	add	r2, fp
 800857e:	9209      	str	r2, [sp, #36]	; 0x24
 8008580:	f89a 3000 	ldrb.w	r3, [sl]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 80a2 	beq.w	80086ce <_vfiprintf_r+0x20e>
 800858a:	2300      	movs	r3, #0
 800858c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008594:	f10a 0a01 	add.w	sl, sl, #1
 8008598:	9304      	str	r3, [sp, #16]
 800859a:	9307      	str	r3, [sp, #28]
 800859c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085a0:	931a      	str	r3, [sp, #104]	; 0x68
 80085a2:	4654      	mov	r4, sl
 80085a4:	2205      	movs	r2, #5
 80085a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085aa:	4858      	ldr	r0, [pc, #352]	; (800870c <_vfiprintf_r+0x24c>)
 80085ac:	f7f7 fe30 	bl	8000210 <memchr>
 80085b0:	9a04      	ldr	r2, [sp, #16]
 80085b2:	b9d8      	cbnz	r0, 80085ec <_vfiprintf_r+0x12c>
 80085b4:	06d1      	lsls	r1, r2, #27
 80085b6:	bf44      	itt	mi
 80085b8:	2320      	movmi	r3, #32
 80085ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085be:	0713      	lsls	r3, r2, #28
 80085c0:	bf44      	itt	mi
 80085c2:	232b      	movmi	r3, #43	; 0x2b
 80085c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c8:	f89a 3000 	ldrb.w	r3, [sl]
 80085cc:	2b2a      	cmp	r3, #42	; 0x2a
 80085ce:	d015      	beq.n	80085fc <_vfiprintf_r+0x13c>
 80085d0:	9a07      	ldr	r2, [sp, #28]
 80085d2:	4654      	mov	r4, sl
 80085d4:	2000      	movs	r0, #0
 80085d6:	f04f 0c0a 	mov.w	ip, #10
 80085da:	4621      	mov	r1, r4
 80085dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e0:	3b30      	subs	r3, #48	; 0x30
 80085e2:	2b09      	cmp	r3, #9
 80085e4:	d94e      	bls.n	8008684 <_vfiprintf_r+0x1c4>
 80085e6:	b1b0      	cbz	r0, 8008616 <_vfiprintf_r+0x156>
 80085e8:	9207      	str	r2, [sp, #28]
 80085ea:	e014      	b.n	8008616 <_vfiprintf_r+0x156>
 80085ec:	eba0 0308 	sub.w	r3, r0, r8
 80085f0:	fa09 f303 	lsl.w	r3, r9, r3
 80085f4:	4313      	orrs	r3, r2
 80085f6:	9304      	str	r3, [sp, #16]
 80085f8:	46a2      	mov	sl, r4
 80085fa:	e7d2      	b.n	80085a2 <_vfiprintf_r+0xe2>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	1d19      	adds	r1, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	9103      	str	r1, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbb      	ittet	lt
 8008608:	425b      	neglt	r3, r3
 800860a:	f042 0202 	orrlt.w	r2, r2, #2
 800860e:	9307      	strge	r3, [sp, #28]
 8008610:	9307      	strlt	r3, [sp, #28]
 8008612:	bfb8      	it	lt
 8008614:	9204      	strlt	r2, [sp, #16]
 8008616:	7823      	ldrb	r3, [r4, #0]
 8008618:	2b2e      	cmp	r3, #46	; 0x2e
 800861a:	d10c      	bne.n	8008636 <_vfiprintf_r+0x176>
 800861c:	7863      	ldrb	r3, [r4, #1]
 800861e:	2b2a      	cmp	r3, #42	; 0x2a
 8008620:	d135      	bne.n	800868e <_vfiprintf_r+0x1ce>
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	1d1a      	adds	r2, r3, #4
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	9203      	str	r2, [sp, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	bfb8      	it	lt
 800862e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008632:	3402      	adds	r4, #2
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800871c <_vfiprintf_r+0x25c>
 800863a:	7821      	ldrb	r1, [r4, #0]
 800863c:	2203      	movs	r2, #3
 800863e:	4650      	mov	r0, sl
 8008640:	f7f7 fde6 	bl	8000210 <memchr>
 8008644:	b140      	cbz	r0, 8008658 <_vfiprintf_r+0x198>
 8008646:	2340      	movs	r3, #64	; 0x40
 8008648:	eba0 000a 	sub.w	r0, r0, sl
 800864c:	fa03 f000 	lsl.w	r0, r3, r0
 8008650:	9b04      	ldr	r3, [sp, #16]
 8008652:	4303      	orrs	r3, r0
 8008654:	3401      	adds	r4, #1
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865c:	482c      	ldr	r0, [pc, #176]	; (8008710 <_vfiprintf_r+0x250>)
 800865e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008662:	2206      	movs	r2, #6
 8008664:	f7f7 fdd4 	bl	8000210 <memchr>
 8008668:	2800      	cmp	r0, #0
 800866a:	d03f      	beq.n	80086ec <_vfiprintf_r+0x22c>
 800866c:	4b29      	ldr	r3, [pc, #164]	; (8008714 <_vfiprintf_r+0x254>)
 800866e:	bb1b      	cbnz	r3, 80086b8 <_vfiprintf_r+0x1f8>
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	3307      	adds	r3, #7
 8008674:	f023 0307 	bic.w	r3, r3, #7
 8008678:	3308      	adds	r3, #8
 800867a:	9303      	str	r3, [sp, #12]
 800867c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867e:	443b      	add	r3, r7
 8008680:	9309      	str	r3, [sp, #36]	; 0x24
 8008682:	e767      	b.n	8008554 <_vfiprintf_r+0x94>
 8008684:	fb0c 3202 	mla	r2, ip, r2, r3
 8008688:	460c      	mov	r4, r1
 800868a:	2001      	movs	r0, #1
 800868c:	e7a5      	b.n	80085da <_vfiprintf_r+0x11a>
 800868e:	2300      	movs	r3, #0
 8008690:	3401      	adds	r4, #1
 8008692:	9305      	str	r3, [sp, #20]
 8008694:	4619      	mov	r1, r3
 8008696:	f04f 0c0a 	mov.w	ip, #10
 800869a:	4620      	mov	r0, r4
 800869c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a0:	3a30      	subs	r2, #48	; 0x30
 80086a2:	2a09      	cmp	r2, #9
 80086a4:	d903      	bls.n	80086ae <_vfiprintf_r+0x1ee>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0c5      	beq.n	8008636 <_vfiprintf_r+0x176>
 80086aa:	9105      	str	r1, [sp, #20]
 80086ac:	e7c3      	b.n	8008636 <_vfiprintf_r+0x176>
 80086ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b2:	4604      	mov	r4, r0
 80086b4:	2301      	movs	r3, #1
 80086b6:	e7f0      	b.n	800869a <_vfiprintf_r+0x1da>
 80086b8:	ab03      	add	r3, sp, #12
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	462a      	mov	r2, r5
 80086be:	4b16      	ldr	r3, [pc, #88]	; (8008718 <_vfiprintf_r+0x258>)
 80086c0:	a904      	add	r1, sp, #16
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7fd fc8c 	bl	8005fe0 <_printf_float>
 80086c8:	4607      	mov	r7, r0
 80086ca:	1c78      	adds	r0, r7, #1
 80086cc:	d1d6      	bne.n	800867c <_vfiprintf_r+0x1bc>
 80086ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086d0:	07d9      	lsls	r1, r3, #31
 80086d2:	d405      	bmi.n	80086e0 <_vfiprintf_r+0x220>
 80086d4:	89ab      	ldrh	r3, [r5, #12]
 80086d6:	059a      	lsls	r2, r3, #22
 80086d8:	d402      	bmi.n	80086e0 <_vfiprintf_r+0x220>
 80086da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086dc:	f7ff f9d0 	bl	8007a80 <__retarget_lock_release_recursive>
 80086e0:	89ab      	ldrh	r3, [r5, #12]
 80086e2:	065b      	lsls	r3, r3, #25
 80086e4:	f53f af12 	bmi.w	800850c <_vfiprintf_r+0x4c>
 80086e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ea:	e711      	b.n	8008510 <_vfiprintf_r+0x50>
 80086ec:	ab03      	add	r3, sp, #12
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	462a      	mov	r2, r5
 80086f2:	4b09      	ldr	r3, [pc, #36]	; (8008718 <_vfiprintf_r+0x258>)
 80086f4:	a904      	add	r1, sp, #16
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7fd ff16 	bl	8006528 <_printf_i>
 80086fc:	e7e4      	b.n	80086c8 <_vfiprintf_r+0x208>
 80086fe:	bf00      	nop
 8008700:	08008bfc 	.word	0x08008bfc
 8008704:	08008c1c 	.word	0x08008c1c
 8008708:	08008bdc 	.word	0x08008bdc
 800870c:	08008d94 	.word	0x08008d94
 8008710:	08008d9e 	.word	0x08008d9e
 8008714:	08005fe1 	.word	0x08005fe1
 8008718:	0800849b 	.word	0x0800849b
 800871c:	08008d9a 	.word	0x08008d9a

08008720 <_sbrk_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d06      	ldr	r5, [pc, #24]	; (800873c <_sbrk_r+0x1c>)
 8008724:	2300      	movs	r3, #0
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	f7f9 f814 	bl	8001758 <_sbrk>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_sbrk_r+0x1a>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_sbrk_r+0x1a>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20000390 	.word	0x20000390

08008740 <__sread>:
 8008740:	b510      	push	{r4, lr}
 8008742:	460c      	mov	r4, r1
 8008744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008748:	f000 f8e2 	bl	8008910 <_read_r>
 800874c:	2800      	cmp	r0, #0
 800874e:	bfab      	itete	ge
 8008750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008752:	89a3      	ldrhlt	r3, [r4, #12]
 8008754:	181b      	addge	r3, r3, r0
 8008756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800875a:	bfac      	ite	ge
 800875c:	6563      	strge	r3, [r4, #84]	; 0x54
 800875e:	81a3      	strhlt	r3, [r4, #12]
 8008760:	bd10      	pop	{r4, pc}

08008762 <__swrite>:
 8008762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008766:	461f      	mov	r7, r3
 8008768:	898b      	ldrh	r3, [r1, #12]
 800876a:	05db      	lsls	r3, r3, #23
 800876c:	4605      	mov	r5, r0
 800876e:	460c      	mov	r4, r1
 8008770:	4616      	mov	r6, r2
 8008772:	d505      	bpl.n	8008780 <__swrite+0x1e>
 8008774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008778:	2302      	movs	r3, #2
 800877a:	2200      	movs	r2, #0
 800877c:	f000 f898 	bl	80088b0 <_lseek_r>
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	4632      	mov	r2, r6
 800878e:	463b      	mov	r3, r7
 8008790:	4628      	mov	r0, r5
 8008792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008796:	f000 b817 	b.w	80087c8 <_write_r>

0800879a <__sseek>:
 800879a:	b510      	push	{r4, lr}
 800879c:	460c      	mov	r4, r1
 800879e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a2:	f000 f885 	bl	80088b0 <_lseek_r>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	bf15      	itete	ne
 80087ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087b6:	81a3      	strheq	r3, [r4, #12]
 80087b8:	bf18      	it	ne
 80087ba:	81a3      	strhne	r3, [r4, #12]
 80087bc:	bd10      	pop	{r4, pc}

080087be <__sclose>:
 80087be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c2:	f000 b831 	b.w	8008828 <_close_r>
	...

080087c8 <_write_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d07      	ldr	r5, [pc, #28]	; (80087e8 <_write_r+0x20>)
 80087cc:	4604      	mov	r4, r0
 80087ce:	4608      	mov	r0, r1
 80087d0:	4611      	mov	r1, r2
 80087d2:	2200      	movs	r2, #0
 80087d4:	602a      	str	r2, [r5, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	f7f8 ff6d 	bl	80016b6 <_write>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d102      	bne.n	80087e6 <_write_r+0x1e>
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	b103      	cbz	r3, 80087e6 <_write_r+0x1e>
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	20000390 	.word	0x20000390

080087ec <__assert_func>:
 80087ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087ee:	4614      	mov	r4, r2
 80087f0:	461a      	mov	r2, r3
 80087f2:	4b09      	ldr	r3, [pc, #36]	; (8008818 <__assert_func+0x2c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4605      	mov	r5, r0
 80087f8:	68d8      	ldr	r0, [r3, #12]
 80087fa:	b14c      	cbz	r4, 8008810 <__assert_func+0x24>
 80087fc:	4b07      	ldr	r3, [pc, #28]	; (800881c <__assert_func+0x30>)
 80087fe:	9100      	str	r1, [sp, #0]
 8008800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008804:	4906      	ldr	r1, [pc, #24]	; (8008820 <__assert_func+0x34>)
 8008806:	462b      	mov	r3, r5
 8008808:	f000 f81e 	bl	8008848 <fiprintf>
 800880c:	f000 f89f 	bl	800894e <abort>
 8008810:	4b04      	ldr	r3, [pc, #16]	; (8008824 <__assert_func+0x38>)
 8008812:	461c      	mov	r4, r3
 8008814:	e7f3      	b.n	80087fe <__assert_func+0x12>
 8008816:	bf00      	nop
 8008818:	2000003c 	.word	0x2000003c
 800881c:	08008da5 	.word	0x08008da5
 8008820:	08008db2 	.word	0x08008db2
 8008824:	08008de0 	.word	0x08008de0

08008828 <_close_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d06      	ldr	r5, [pc, #24]	; (8008844 <_close_r+0x1c>)
 800882c:	2300      	movs	r3, #0
 800882e:	4604      	mov	r4, r0
 8008830:	4608      	mov	r0, r1
 8008832:	602b      	str	r3, [r5, #0]
 8008834:	f7f8 ff5b 	bl	80016ee <_close>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d102      	bne.n	8008842 <_close_r+0x1a>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	b103      	cbz	r3, 8008842 <_close_r+0x1a>
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	bd38      	pop	{r3, r4, r5, pc}
 8008844:	20000390 	.word	0x20000390

08008848 <fiprintf>:
 8008848:	b40e      	push	{r1, r2, r3}
 800884a:	b503      	push	{r0, r1, lr}
 800884c:	4601      	mov	r1, r0
 800884e:	ab03      	add	r3, sp, #12
 8008850:	4805      	ldr	r0, [pc, #20]	; (8008868 <fiprintf+0x20>)
 8008852:	f853 2b04 	ldr.w	r2, [r3], #4
 8008856:	6800      	ldr	r0, [r0, #0]
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	f7ff fe31 	bl	80084c0 <_vfiprintf_r>
 800885e:	b002      	add	sp, #8
 8008860:	f85d eb04 	ldr.w	lr, [sp], #4
 8008864:	b003      	add	sp, #12
 8008866:	4770      	bx	lr
 8008868:	2000003c 	.word	0x2000003c

0800886c <_fstat_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4d07      	ldr	r5, [pc, #28]	; (800888c <_fstat_r+0x20>)
 8008870:	2300      	movs	r3, #0
 8008872:	4604      	mov	r4, r0
 8008874:	4608      	mov	r0, r1
 8008876:	4611      	mov	r1, r2
 8008878:	602b      	str	r3, [r5, #0]
 800887a:	f7f8 ff44 	bl	8001706 <_fstat>
 800887e:	1c43      	adds	r3, r0, #1
 8008880:	d102      	bne.n	8008888 <_fstat_r+0x1c>
 8008882:	682b      	ldr	r3, [r5, #0]
 8008884:	b103      	cbz	r3, 8008888 <_fstat_r+0x1c>
 8008886:	6023      	str	r3, [r4, #0]
 8008888:	bd38      	pop	{r3, r4, r5, pc}
 800888a:	bf00      	nop
 800888c:	20000390 	.word	0x20000390

08008890 <_isatty_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d06      	ldr	r5, [pc, #24]	; (80088ac <_isatty_r+0x1c>)
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	f7f8 ff43 	bl	8001726 <_isatty>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_isatty_r+0x1a>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_isatty_r+0x1a>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	20000390 	.word	0x20000390

080088b0 <_lseek_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d07      	ldr	r5, [pc, #28]	; (80088d0 <_lseek_r+0x20>)
 80088b4:	4604      	mov	r4, r0
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	602a      	str	r2, [r5, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7f8 ff3c 	bl	800173c <_lseek>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_lseek_r+0x1e>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_lseek_r+0x1e>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20000390 	.word	0x20000390

080088d4 <__ascii_mbtowc>:
 80088d4:	b082      	sub	sp, #8
 80088d6:	b901      	cbnz	r1, 80088da <__ascii_mbtowc+0x6>
 80088d8:	a901      	add	r1, sp, #4
 80088da:	b142      	cbz	r2, 80088ee <__ascii_mbtowc+0x1a>
 80088dc:	b14b      	cbz	r3, 80088f2 <__ascii_mbtowc+0x1e>
 80088de:	7813      	ldrb	r3, [r2, #0]
 80088e0:	600b      	str	r3, [r1, #0]
 80088e2:	7812      	ldrb	r2, [r2, #0]
 80088e4:	1e10      	subs	r0, r2, #0
 80088e6:	bf18      	it	ne
 80088e8:	2001      	movne	r0, #1
 80088ea:	b002      	add	sp, #8
 80088ec:	4770      	bx	lr
 80088ee:	4610      	mov	r0, r2
 80088f0:	e7fb      	b.n	80088ea <__ascii_mbtowc+0x16>
 80088f2:	f06f 0001 	mvn.w	r0, #1
 80088f6:	e7f8      	b.n	80088ea <__ascii_mbtowc+0x16>

080088f8 <__malloc_lock>:
 80088f8:	4801      	ldr	r0, [pc, #4]	; (8008900 <__malloc_lock+0x8>)
 80088fa:	f7ff b8c0 	b.w	8007a7e <__retarget_lock_acquire_recursive>
 80088fe:	bf00      	nop
 8008900:	20000382 	.word	0x20000382

08008904 <__malloc_unlock>:
 8008904:	4801      	ldr	r0, [pc, #4]	; (800890c <__malloc_unlock+0x8>)
 8008906:	f7ff b8bb 	b.w	8007a80 <__retarget_lock_release_recursive>
 800890a:	bf00      	nop
 800890c:	20000382 	.word	0x20000382

08008910 <_read_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d07      	ldr	r5, [pc, #28]	; (8008930 <_read_r+0x20>)
 8008914:	4604      	mov	r4, r0
 8008916:	4608      	mov	r0, r1
 8008918:	4611      	mov	r1, r2
 800891a:	2200      	movs	r2, #0
 800891c:	602a      	str	r2, [r5, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	f7f8 feac 	bl	800167c <_read>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d102      	bne.n	800892e <_read_r+0x1e>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b103      	cbz	r3, 800892e <_read_r+0x1e>
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	20000390 	.word	0x20000390

08008934 <__ascii_wctomb>:
 8008934:	b149      	cbz	r1, 800894a <__ascii_wctomb+0x16>
 8008936:	2aff      	cmp	r2, #255	; 0xff
 8008938:	bf85      	ittet	hi
 800893a:	238a      	movhi	r3, #138	; 0x8a
 800893c:	6003      	strhi	r3, [r0, #0]
 800893e:	700a      	strbls	r2, [r1, #0]
 8008940:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008944:	bf98      	it	ls
 8008946:	2001      	movls	r0, #1
 8008948:	4770      	bx	lr
 800894a:	4608      	mov	r0, r1
 800894c:	4770      	bx	lr

0800894e <abort>:
 800894e:	b508      	push	{r3, lr}
 8008950:	2006      	movs	r0, #6
 8008952:	f000 f82b 	bl	80089ac <raise>
 8008956:	2001      	movs	r0, #1
 8008958:	f7f8 fe86 	bl	8001668 <_exit>

0800895c <_raise_r>:
 800895c:	291f      	cmp	r1, #31
 800895e:	b538      	push	{r3, r4, r5, lr}
 8008960:	4604      	mov	r4, r0
 8008962:	460d      	mov	r5, r1
 8008964:	d904      	bls.n	8008970 <_raise_r+0x14>
 8008966:	2316      	movs	r3, #22
 8008968:	6003      	str	r3, [r0, #0]
 800896a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008972:	b112      	cbz	r2, 800897a <_raise_r+0x1e>
 8008974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008978:	b94b      	cbnz	r3, 800898e <_raise_r+0x32>
 800897a:	4620      	mov	r0, r4
 800897c:	f000 f830 	bl	80089e0 <_getpid_r>
 8008980:	462a      	mov	r2, r5
 8008982:	4601      	mov	r1, r0
 8008984:	4620      	mov	r0, r4
 8008986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800898a:	f000 b817 	b.w	80089bc <_kill_r>
 800898e:	2b01      	cmp	r3, #1
 8008990:	d00a      	beq.n	80089a8 <_raise_r+0x4c>
 8008992:	1c59      	adds	r1, r3, #1
 8008994:	d103      	bne.n	800899e <_raise_r+0x42>
 8008996:	2316      	movs	r3, #22
 8008998:	6003      	str	r3, [r0, #0]
 800899a:	2001      	movs	r0, #1
 800899c:	e7e7      	b.n	800896e <_raise_r+0x12>
 800899e:	2400      	movs	r4, #0
 80089a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089a4:	4628      	mov	r0, r5
 80089a6:	4798      	blx	r3
 80089a8:	2000      	movs	r0, #0
 80089aa:	e7e0      	b.n	800896e <_raise_r+0x12>

080089ac <raise>:
 80089ac:	4b02      	ldr	r3, [pc, #8]	; (80089b8 <raise+0xc>)
 80089ae:	4601      	mov	r1, r0
 80089b0:	6818      	ldr	r0, [r3, #0]
 80089b2:	f7ff bfd3 	b.w	800895c <_raise_r>
 80089b6:	bf00      	nop
 80089b8:	2000003c 	.word	0x2000003c

080089bc <_kill_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4d07      	ldr	r5, [pc, #28]	; (80089dc <_kill_r+0x20>)
 80089c0:	2300      	movs	r3, #0
 80089c2:	4604      	mov	r4, r0
 80089c4:	4608      	mov	r0, r1
 80089c6:	4611      	mov	r1, r2
 80089c8:	602b      	str	r3, [r5, #0]
 80089ca:	f7f8 fe3d 	bl	8001648 <_kill>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	d102      	bne.n	80089d8 <_kill_r+0x1c>
 80089d2:	682b      	ldr	r3, [r5, #0]
 80089d4:	b103      	cbz	r3, 80089d8 <_kill_r+0x1c>
 80089d6:	6023      	str	r3, [r4, #0]
 80089d8:	bd38      	pop	{r3, r4, r5, pc}
 80089da:	bf00      	nop
 80089dc:	20000390 	.word	0x20000390

080089e0 <_getpid_r>:
 80089e0:	f7f8 be2a 	b.w	8001638 <_getpid>

080089e4 <_init>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	bf00      	nop
 80089e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ea:	bc08      	pop	{r3}
 80089ec:	469e      	mov	lr, r3
 80089ee:	4770      	bx	lr

080089f0 <_fini>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr
